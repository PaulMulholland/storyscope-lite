<?php
define('GOOGLEAPIKEY', 'AIzaSyBYyj76m4jLMbI1ZQH06-OiSmfUwfwKz8k');
define('ARC2FILEPATH',"/Applications/MAMP/htdocs/recommender/drupal7/sites/all/modules/contrib/rdf/vendor/arc/ARC2.php");
define('LODENDPOINT', 'http://lod.openlinksw.com/sparql');
//define('LODENDPOINT', 'http://factforge.net/sparql.xml');

/**
 * file: dec_rec.module
 *
 * New DECIPHER SemRecommender service. 
 *
 * Paul Mulholland <p.mulholland@open.ac.uk>
 *
 */
function recommend_test() {
	require_once(ARC2FILEPATH);
	$config = array('remote_store_endpoint' => 'http://lod.openlinksw.com/sparql');
	$store = ARC2::getRemoteStore($config);
	$result = $store->query("SELECT * WHERE {?s a ?o} limit 10");
	dpm($result);
}


/**
 * function dec_rec_menu
 */

function dec_rec_menu(){
//      $items['admin/config/services/dec_rec'] = array(
// 	 'title' => 'SemRecommender service',
// 	 'description' => 'Configure the location of the SemRecommender service used by StoryScope.',
// 	 'page callback' => 'drupal_get_form',
// 	 'page arguments' => array('dec_rec_form_config'),
// 	 'access callback' => 'user_access',
// 	 'access arguments' => array('administer site configuration'),
//      );
      $items['timeline_for_tags/%'] = array(
	 'title' => 'Timeline',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_timeline_for_tags',
     'page arguments' => array(1),
	'access callback' => TRUE,
     );
      $items['story/%'] = array(
	 'title' => 'Timeline',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_story',
     'page arguments' => array(1),
	'access callback' => TRUE,
     );
   	$items['timeline_for_setting'] = array(
	 'title' => 'Timeline',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_timeline_for_setting',
	'access callback' => TRUE,
     );
      $items['timeline/%/%'] = array(
	 'title' => 'Timeline',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_timeline',
     'page arguments' => array(1,2),
	'access callback' => TRUE,
     );
      $items['test'] = array(
	 'title' => 'Test',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_test',
	'access callback' => TRUE,
     );
     $items['tag/%/%'] = array(
	 'title' => 'Tag',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_tag',
     'page arguments' => array(1,2),
	'access callback' => TRUE,
     );
     $items['tagtimeline/%/%'] = array(
	 'title' => 'Tag',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_tag',
     'page arguments' => array(1,2),
	'access callback' => TRUE,
     );
     $items['tagtimelinedata/%/%'] = array(
	 'title' => 'Tag',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'tagtimelinedata',
     'page arguments' => array(1,2),
	'access callback' => TRUE,
     );
     $items['tags'] = array(
	 'title' => 'Tags',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_tags',
	'access callback' => TRUE,
     );
     $items['tagstimelinedata/%'] = array(
	 'title' => 'Tags',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'tagstimelinedata',
     'page arguments' => array(1),
	'access callback' => TRUE,
     );
     $items['settingtimelinedata'] = array(
	 'title' => 'Setting',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'settingtimelinedata',
	'access callback' => TRUE,
     );
      $items['setting'] = array(
	 'title' => 'Setting',
	 'description' => 'Recommender service used by StoryScope.',
	 'page callback' => 'dec_setting',
	'access callback' => TRUE,
     );
     $items['storytag/%'] = array(
	 'title' => 'Explain tag',
	 'description' => 'Explain tag.',
	 'page callback' => 'event_space_of_a_topic',
     'page arguments' => array(1),
	'access callback' => TRUE,
     );

     return $items;
}

/*
 * pre-cache the name, description and image of a topic
*/
function check_topic_name_image_description($topic) {

	check_freebase_saved_image($topic);
	check_for_topic_description($topic);
	check_for_topic_name($topic);
}
function tagtimelinedata($m, $id) {
	if($m == "m") {
		$topic = "/".$m."/".$id;
	}
	else {
		return drupal_json_output(array(array('timeline'=>array())));
	}
	if(isset($_GET['attribute'])) {
		$attribute = $_GET['attribute'];
		return drupal_json_output(array('timeline'=>dec_tag_timeline($topic, $attribute)));
	}
	return drupal_json_output(array('timeline'=>dec_tag_timeline($topic)));
}

function settingtimelinedata() {
	$output = "";
	if(isset($_GET['location']) && isset($_GET['time'])) {
		$location = $_GET['location'];
		$time = $_GET['time'];
	}
	else {
		return drupal_json_output(array(array('timeline'=>array())));
	}
	$year = substr($time, 0, 4);

	if(isset($_GET['end'])) {
		$end = $_GET['end'];
		$end_year = substr($end, 0, 4);
	}
	else {
		$end_year = 0;
	}
	
	if($end_year) {
		if(isset($_GET['event_type'])) {
			$event_type = $_GET['event_type'];
			return drupal_json_output(array('timeline'=>dec_setting_timeline($location, $year, $end, $event_type)));
		}
		return drupal_json_output(array('timeline'=>dec_setting_timeline($location, $year, $end)));		
	}
	else {
		if(isset($_GET['event_type'])) {
			$event_type = $_GET['event_type'];
			return drupal_json_output(array('timeline'=>dec_setting_timeline($location, $year, 0, $event_type)));
		}
		return drupal_json_output(array('timeline'=>dec_setting_timeline($location, $year)));		
	}
}

function tagstimelinedata($story_id) {
	$story_id = (int) $story_id;
	if(isset($_GET['event_type'])) {
		$event_type = $_GET['event_type'];
		return drupal_json_output(array('timeline'=>dec_tags_timeline($story_id, $event_type)));
	}
	return drupal_json_output(array('timeline'=>dec_tags_timeline($story_id)));

}

function tagtimeline() {
	global $base_url;
	
	$output = '<div id="timeline-embed"></div>
    <script type="text/javascript">
        var timeline_config = {
            width:              "100%",
            height:             "600",
            source:             "'.$base_url.'/tagtimelinedata/m/01qwfk"
        }
    </script>
    <script type="text/javascript" src="http://cdn.knightlab.com/libs/timeline/latest/js/storyjs-embed.js"></script>';
	return $output;
}


function get_attribute_reverse_title($attribute = '/visual_art/artwork/artist') {
	$query = "SELECT reverse_name FROM attribute_name WHERE attribute = :attribute;";
	$result = db_query($query, array(':attribute' => $attribute));
	$object = $result->fetchObject();
	if(isset($object->reverse_name)) {
		return $object->reverse_name;
	}
	else {
		return FALSE;
	}	
}

function dec_timeline_for_setting() {
	global $base_url;
	$output = "";

	if(isset($_GET['location']) && isset($_GET['time'])) {
		$location = $_GET['location'];
		$time = $_GET['time'];
	}
	else {
		return "No setting found";
	}
	$year = substr($time, 0, 4);

	if(isset($_GET['end'])) {
		$end = $_GET['end'];
		$end_year = substr($end, 0, 4);
	}
	else {
		$end_year = 0;
	}
	
	//timeline title
	$name = get_topic_name($location);
	if(isset($_GET['event_type'])) {
		$event_type = $_GET['event_type'];
		if($end_year) {
			drupal_set_title($name." ".$year."-".$end_year.': '.$event_type);			
		}
		else {
			drupal_set_title($name." ".$year.': '.$event_type);			
		}
	}
	else {
		if($end_year) {
			drupal_set_title($name." ".$year."-".$end_year);
		}
		else {
			drupal_set_title($name." ".$year);
		}
	}

	//timeline
	$output = '<div id="timeline-embed"></div>
    <script type="text/javascript">
        var timeline_config = {
            width:              "100%",
            height:             "600",';
	if(isset($event_type)) {
		if($end_year) {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?location='.$location.'&time='.$year.'&event_type='.$event_type.'&end='.$end_year.'"';
		}
		else {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?location='.$location.'&time='.$year.'&event_type='.$event_type.'"';
		}
	}
	else {
		if($end_year) {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?location='.$location.'&time='.$year.'&end='.$end_year.'"';
		}
		else {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?location='.$location.'&time='.$year.'"';
		}
	}
	
	$output .= '    }
    </script>
    <script type="text/javascript" src="http://cdn.knightlab.com/libs/timeline/latest/js/storyjs-embed.js"></script>';

	return $output;
}

function dec_timeline_for_tags($story_id) {
	global $base_url;
	$story_id = (int) $story_id;
	if(!$story_id) {
		return "No topic list found";
	}
	$output = "";
	
	//story topics for title
	$tag_array = get_tags_names_for_a_story($story_id);
	$headline = array();
	foreach($tag_array as $tag) {
		if($tag['1']) {
			$headline[] =  $tag['1'];
		}
		else {
			$headline[] = $tag['0'];
		}
	}
	
	$story_title = implode(', ',$headline);
	
	//timeline title
	if(isset($_GET['event_type'])) {
		$event_type = $_GET['event_type'];
		drupal_set_title($story_title.': '.$event_type);
	}
	else {
		drupal_set_title($story_title);
	}
	
	//timeline
	$output = '<div id="timeline-embed"></div>
    <script type="text/javascript">
        var timeline_config = {
            width:              "100%",
            height:             "600",';
	if(isset($event_type)) {
		$output .= 'source:             "'.$base_url.'/tagstimelinedata/'.$story_id.'?event_type='.$event_type.'"';
	}
	else {
		$output .= 'source:             "'.$base_url.'/tagstimelinedata/'.$story_id.'"';
	}
	
	$output .= '    }
    </script>
    <script type="text/javascript" src="http://cdn.knightlab.com/libs/timeline/latest/js/storyjs-embed.js"></script>';
	return $output;	
}

function dec_timeline($m, $id) {
	global $base_url;
	if($m == "m") {
		$topic = "/".$m."/".$id;
	}
	else {
		return "No topic found";
	}
	$output = "";
	if(isset($_GET['attribute'])) {
		$attribute = $_GET['attribute'];
		if($attribute_title = get_attribute_reverse_title($attribute)) {
			drupal_set_title(check_for_topic_name($topic).': '.$attribute_title);
		}
		else {
			drupal_set_title(check_for_topic_name($topic));
		}
	}
	else {
		drupal_set_title(check_for_topic_name($topic));
	}
	$output = '<div id="timeline-embed"></div>
    <script type="text/javascript">
        var timeline_config = {
            width:              "100%",
            height:             "600",';
	if(isset($attribute)) {
		$output .= 'source:             "'.$base_url.'/tagtimelinedata'.$topic.'?attribute='.$attribute.'"';
	}
    else {
    	$output .= 'source:             "'.$base_url.'/tagtimelinedata'.$topic.'"';
    }
    
    $output .= '    }
    </script>
    <script type="text/javascript" src="http://cdn.knightlab.com/libs/timeline/latest/js/storyjs-embed.js"></script>';
	return $output;
}

function dec_setting_timeline($location, $year, $end = 0, $event_type = FALSE) {
	$output = array();
	if($event_type) {
		$events = get_all_events_for_setting_event_type($location, $year, $event_type, $end);
	}
	else {
		$events = get_all_events_for_setting($location, $year, $end);
	}
	
	if(!empty($events)) {
		foreach($events as $label=>$events) {
			foreach($events as $event) {
				$output[] = load_art_event_without_title_addition($event);
			}
		}
	}
	
	//header
	$header = create_timeline_setting_header($location, $year, $end);
	
	//timeline array
	
	$timeline_array = translate_story_events_for_timeline($output, $header);
	
	return $timeline_array;
}

function dec_tags_timeline($story_id, $event_type = FALSE) {
	$output = array();	
	if($event_type) {
		$events = get_all_temporal_events_for_story_event_type($story_id, $event_type);
	}
	else {
 		$events = get_all_temporal_events_for_story($story_id);
	}

	if(!empty($events)) {
		foreach($events as $label=>$events) {
			foreach($events as $event) {
				$output[] = load_art_event_without_title_addition($event);
			}
		}
	}

	//header
	$header = create_timeline_story_header($story_id);

	//timeline array

	$timeline_array = translate_story_events_for_timeline($output, $header);
	
	return $timeline_array;
}

// function remove_spaces_from_reverse_names() {
// 	$query = 'SELECT * FROM attribute_name;';
// 	$result = db_query($query);
// 	$output = array();
// 	foreach ($result as $record) {
		
// 		$query = "INSERT INTO attribute_name (attribute, name, reverse_name) VALUES(:attribute, :name, :reverse_name) ON DUPLICATE KEY UPDATE attribute = VALUES(attribute), name = VALUES(name), reverse_name = VALUES(reverse_name);";
// 		$result = db_query($query, array(':attribute'=>$record->attribute, ':name'=>$record->name, ':reverse_name'=>str_replace('_', ' ',$record->reverse_name)));
// 		$output[] = array($record->attribute, $record->name, $record->reverse_name);
// 	}
// 	return $output;	
// }

function dec_tag_timeline($topic = '/m/01qwfk', $attribute = FALSE) {
	$output = array();
	$types = check_for_tag_types($topic);
	if($attribute) {
		$events = temporal_events_for_tag_attribute($topic, $attribute);
	}
	else {
		$events = temporal_events_for_tag($topic);
	}
	foreach($events as $event) {
		$output[] = load_art_event_dec_tag($event, $types, TRUE);
	}
	$header = create_timeline_header($topic);
	$timeline_array = translate_events_for_timeline($output, $header);
	return $timeline_array;
}

function translate_time_for_timeline($time) {
	return str_replace('-',',',$time['0']);
}

function create_timeline_setting_header($location, $year, $end = 0) {
	global $base_url;

	$header = array();
	if($end) {
		$header['headline'] = l(get_topic_name($location).' '.$year.'-'.$end,$base_url.'/setting', array('query'=>array('location'=>$location, 'time'=>$year, 'end'=>$end)));
	}
	else {
		$header['headline'] = l(get_topic_name($location).' '.$year,$base_url.'/setting', array('query'=>array('location'=>$location, 'time'=>$year)));
	}
	$header['text'] = get_topic_description($location, 150);
	$header['type'] = 'default';
	if($image = check_freebase_saved_image($location)) {
		$header['asset']['media'] = $image;
		$header['asset']['caption'] = '<div style="clear:both">Setting location: '.l(get_topic_name($location), $base_url.'/tag'.$location).' (pictured above)</div>'.
				'<div style="clear:both">Setting year: '.$year.'</div>';
	}	
	return $header;
}

function create_timeline_story_header($story) {

	$tag_array = get_tags_names_for_a_story($story);
	$headline = array();
	foreach($tag_array as $tag) {
		if($tag['1']) {
			$headline[] = $tag['1'];
		}
		else {
			$headline[] = $tag['0'];
		}
	}
	$text = '';
	foreach($tag_array as $tag) {
		if($tag['1']) {
			$text .=  '<div style="clear:both"><b>'.$tag['1'].':</b> '.check_for_topic_description($tag['0'],100).'</div>';
		}
		else {
			$text .= '<div style="clear:both"><b>'.$tag['0'].'</b></div>';
		}
	}
	
	$header = array();
	
	$image_result = get_image_from_tag_list($tag_array);
	if($image_result) {
		$header['asset']['media'] = $image_result['image'];
		$caption = '';
		foreach($tag_array as $tag) {
			if($tag['1']) {
				$caption .= '<div style="clear:both">'. l($tag['1'],'tag'.$tag['0']);
				if($tag['0'] == $image_result['tag']['0']) {
					$caption .= ' (pictured above)';
				}
				$caption .= '</div>';
			}
			else {
				$caption .= '<div style="clear:both">'.$tag['0'].'</div>';
			}
		}
		$header['asset']['caption'] = $caption;
	}
	
	$header['headline'] = l(implode(', ',$headline), 'story/'.$story);
	$header['text'] = '&nbsp;';//$text;
	$header['type'] = 'default';
	return $header;
}

function get_image_from_tag_list($tag_array) {
	foreach($tag_array as $tag) {
		if($tag['1']) {
			if($image = check_freebase_saved_image($tag['0'])) {
				return array('image'=>$image, 'tag'=>$tag);
			}
		}
	}
	return array();
}

function create_timeline_header($topic) {
	$header = array();
	$header['headline'] = l(get_topic_name($topic),'tag'.$topic);
	$header['text'] = get_topic_description($topic, 150);
	$header['type'] = 'default';
	if($image = check_freebase_saved_image($topic)) {
		$header['asset']['media'] = $image;
	}
	//tag triples
	$output = '';
	$tag_attributes = get_triple_ids_of_a_tag($topic);
	foreach($tag_attributes as $tag_attribute) {
		$values = get_tag_attribute_id_values($tag_attribute->id);
		$output .= '<div style="clear:both">'.$tag_attribute->attribute.": ";
		$output_values = array();
		foreach($values as $value) {
	
			$name = get_topic_name($value);
			if(!$name) {
				$name = $value;
			}
			if($tag_attribute->link) {
				$output_values[] = l($name, 'tag'.$value);
			}
			else {
				$output_values[] = $name;
			}
		}
		$output .= implode(', ',$output_values)."</div>";
	}
	$header['asset']['caption'] = $output;
	return $header;
}

function translate_story_events_for_timeline($events, $header) {
	$output = $header;
	if(empty($events)) {
		$output['date'] = array(array("startDate"=>"0000,00,00", "headline"=>"No dates available"));
		return $output;
	}
	$list = array();
	foreach($events as $event) {
		$entry = array();
		
// 		$entry['text'] = produce_event_table_for_timeline($event);
		if(isset($event['start_time'])) {
			$entry['startDate'] = translate_time_for_timeline($event['start_time']);
		}
		if(isset($event['end_time'])) {
			$entry['endDate'] = translate_time_for_timeline($event['end_time']);
		}
		if(isset($event['activity'])) {
			$entry['tag'] = $event['activity']['0'];
		}
		if(is_array($event['title']['0'])) {
			$entry['headline'] = l($event['title']['0']['1'],'tag'.$event['title']['0']['0']);
			if($image = check_freebase_saved_image($event['title']['0']['0'])) {
				$entry['asset'] = array('media'=> $image, 
				'caption'=> produce_event_table_for_timeline($event),
				'thumbnail'=> check_freebase_saved_image($event['title']['0']['0'],TRUE));
				$entry['text'] = check_for_topic_description($event['title']['0']['0'], 70);
			}
			else {
				$entry['text'] = '<div style="clear:both">'.produce_event_table_for_timeline($event).'</div>'.
				'<div style="clear:both">'.check_for_topic_description($event['title']['0']['0'], 70).'</div>';
			}
		}
		elseif(is_array($event['title'])) {
			$entry['headline'] = $event['title']['0'];
			$entry['text'] = produce_event_table_for_timeline($event);
		}
		$list[] = $entry;
	}
	$output['date'] = $list;
	return $output;
}

function translate_events_for_timeline($events, $header) {

	$output = $header;
	if(empty($events)) {
		$output['date'] = array(array("startDate"=>"0000,00,00", "headline"=>"No dates available"));
		return $output;
	}
	$list = array();
	foreach($events as $event) {
		$entry = array();
// 		$entry['text'] = produce_event_table_for_timeline($event);
		$entry['text'] = check_for_topic_description($event['title']['0']['0'], 150);
		if(isset($event['start_time'])) {
			$entry['startDate'] = translate_time_for_timeline($event['start_time']);
		}
		if(isset($event['end_time'])) {
			$entry['endDate'] = translate_time_for_timeline($event['end_time']);
		}
		if(isset($event['activity'])) {
			$entry['tag'] = $event['activity']['0'];
		}
		if(is_array($event['title'])) {
			$entry['headline'] = l($event['title']['0']['1'],'tag'.$event['title']['0']['0']);
			if($image = check_freebase_saved_image($event['title']['0']['0'])) {
			$entry['asset'] = array('media'=> $image, 
					'caption'=> produce_event_table_for_timeline($event),
					'thumbnail'=> check_freebase_saved_image($event['title']['0']['0'],TRUE));
			}
		}
		$list[] = $entry;
	}
	$output['date'] = $list;
	return $output;
}

function dec_tag_attribute_timeline($topic = '/m/01qwfk', $attribute = '/visual_art/artwork') {
	$output = array();
	$types = check_for_tag_types($topic);
	$events = temporal_events_for_tag_attribute($topic, $attribute);
	foreach($events as $event) {
		$output[] = load_art_event_dec_tag($event, $types, TRUE);
	}
	return $output;
}

function temporal_events_for_story($story_id) {//*****here
	$query = "SELECT DISTINCT event_table.event
	FROM event_attribute_value as time_table, event_attribute_value as event_table, attribute_name, query_tag
	WHERE query_tag.id = '".$story_id."' AND
	event_table.value = query_tag.tag AND
	event_table.event = time_table.event AND
	time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	//if tag is itself an event
	$query = "
SELECT DISTINCT event_table.event
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name
WHERE query_tag.id = '".$story_id."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	
	$result = db_query($query);
	foreach ($result as $record) {
		$output[] = $record->event;
	}
	return $output;
}

function temporal_events_for_story_activity($story_id, $activity = 'object_creation') {
	$query = "SELECT DISTINCT event_table.event
FROM event_attribute_value as time_table, event_attribute_value as event_table, attribute_name, event_attribute_value as attribute_table, attribute_name as attribute_attribute_name, query_tag
WHERE query_tag.id = '".$story_id."' AND 
event_table.value = query_tag.tag AND
time_table.event = event_table.event AND
time_table.attribute = attribute_name.attribute AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
attribute_table.value = '".$activity."' AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	//if tag is itself an event
	$query = "SELECT DISTINCT event_table.event
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name, event_attribute_value as attribute_table
WHERE query_tag.id = '".$story_id."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
attribute_table.value = '".$activity."' AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	foreach ($result as $record) {
		$output[] = $record->event;
	}
	return $output;
}

function temporal_events_for_tag($topic) {
	$query = "SELECT DISTINCT event_table.event
FROM event_attribute_value as time_table, event_attribute_value as event_table, attribute_name
WHERE event_table.value = '".$topic."' AND
event_table.event = time_table.event AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	//if tag is itself an event
	$query = "SELECT event_attribute_value.event
FROM event_attribute_value, attribute_name
WHERE event_attribute_value.event = '".$topic."' AND
event_attribute_value.attribute = attribute_name.attribute AND
attribute_name.name = 'start_time';";
	$result = db_query($query);
	$object = $result->fetchObject();
	if(isset($object->event)) {
		$output[] = $topic;
	}
	
	return $output;
}

function temporal_events_for_tag_attribute($topic, $attribute = '/visual_art/artwork') {
	$query = "SELECT DISTINCT event_table.event
FROM event_attribute_value as time_table, event_attribute_value as event_table, attribute_name, event_attribute_value as attribute_table, attribute_name as attribute_attribute_name
WHERE event_table.value = '".$topic."' AND
event_table.event = time_table.event AND
time_table.attribute = attribute_name.attribute AND
event_table.event = attribute_table.event AND
attribute_table.attribute = '".$attribute."' AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	//if tag is itself an event
	$query = "SELECT event_attribute_value.event
FROM event_attribute_value, attribute_name
WHERE event_attribute_value.event = '".$topic."' AND
event_attribute_value.attribute = attribute_name.attribute AND
attribute_name.name = 'start_time';";
	$result = db_query($query);
	$object = $result->fetchObject();
	if(isset($object->event)) {
		$output[] = $topic;
	}
	
	return $output;
}

function thumbnail_image_html_for_a_freebase_topic($topic) {
	$imageUrl = 'https://usercontent.googleapis.com/freebase/v1/image'.$topic;
	return $imageUrl;
}

function check_for_cached_image($topic) {
	$query = "SELECT tag FROM fb_saved_images WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$found = $result->fetchObject();
	if($found) {
		return TRUE;
	}
	else {
		return FALSE;
	}
}


function image_url_for_freebase_topic($topic, $thumbnail_url = FALSE) {
	//check for cached image
	$cache = check_for_cached_image($topic);
	if(!$cache) {
		save_fb_image($topic);
	}

	$id = substr($topic,3);
	global $base_url;
	if($thumbnail_url) {
		return $base_url.'/fbimages/'.$id.'_sm.jpeg';		
	}
	else {
		return $base_url.'/fbimages/'.$id.'.jpeg';			
	}
	
}

function image_html_for_a_freebase_topic($topic) {
	$imageUrl = 'https://usercontent.googleapis.com/freebase/v1/image'.$topic.'?maxwidth=200&maxheight=200';
	return $imageUrl;
	return '<img src="'.$imageUrl.'">';
}

function dec_save_image($url, $filename) {
	$ch = curl_init($url);

	$fp = fopen($filename, 'wb');

	curl_setopt($ch, CURLOPT_FILE, $fp);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	$response = curl_exec($ch);

	$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

	curl_close($ch);
	fclose($fp);	
}


function save_fb_image($topic, $thumbnail_url = FALSE) {

	$imageUrl = 'https://usercontent.googleapis.com/freebase/v1/image'.$topic.'?maxwidth=200&maxheight=200';
	$imageUrlthumbnail = 'https://usercontent.googleapis.com/freebase/v1/image'.$topic;
	
	$id = substr($topic,3);
	$filename = 'fbimages/'.$id.'.jpeg';
	$filenamethunbnail = 'fbimages/'.$id.'_sm.jpeg';

	dec_save_image($imageUrl, $filename);
	dec_save_image($imageUrlthumbnail, $filenamethunbnail);
	
	return $id;
}

function getUrlMimeType($url) {
	$buffer = file_get_contents($url);
	$finfo = new finfo(FILEINFO_MIME_TYPE);
	return $finfo->buffer($buffer);
}

function dec_test() {

	
// 	check_for_topic_name("/m/06drqnq");
	reset_recommender_databse();
// 	dec_mql_test6();

// 	check_for_topic_name();
// 	check_for_topic_description();
	return "hello";
}

//get topic name
function get_topic_image_topic($topic = "/m/0hc9x6h") {
	$query = "SELECT tag, image_tag FROM fb_saved_images WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$object = $result->fetchObject();
	if(isset($object->tag)) {
		return array('tag'=>$object->tag, 'image_tag'=>$object->image_tag);
	}
	else {
		return array();
	}
}

function check_freebase_saved_image($topic = '/m/01qwfk', $thumbnail_url = FALSE, $reload = FALSE) {
	global $base_url;
	//check in local cache for image id
	if(!$reload) {
		$image_topic_test = get_topic_image_topic($topic);
	}
	if(!empty($image_topic_test)) {
		if($image_topic_test['image_tag']) {
			if($thumbnail_url) {
				return $base_url.'/fbimages/'.$image_topic_test['image_tag'].'_sm.jpeg';
			}
			else {
				return $base_url.'/fbimages/'.$image_topic_test['image_tag'].'.jpeg';
			}
		}
		else {
			return FALSE;
		}
	}
	
	//retrieve topic id for image
	$image_query = 'https://www.googleapis.com/freebase/v1/topic'.$topic.'?filter=/common/topic/image&limit=1'.'&key='.GOOGLEAPIKEY;
	$result = drupal_http_request($image_query);

	if(isset($result->data)) {
		$data = drupal_json_decode($result->data);
	}
	
	if(isset($data['property']['/common/topic/image']['values']['0']['id'])) {
		$image_topic = $data['property']['/common/topic/image']['values']['0']['id'];
	}
	else {
		$image_topic = FALSE;
	}	

	//retrieve and save image using id
	//save reference in local db
	if($image_topic == FALSE) {

		$values_list = "VALUES ('".$topic."')";
		$query = "INSERT INTO fb_saved_images (tag) ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag);";
		$result = db_query($query, array(':tag'=>$topic));
		$local_url = FALSE;
	}
	else {

		$id = save_fb_image($image_topic);
		$values_list = "VALUES ('".$topic."', '".$id."')";
		$query = "INSERT INTO fb_saved_images (tag, image_tag) ".$values_list." ON DUPLICATE KEY UPDATE image_tag = VALUES(image_tag);";
		$result = db_query($query, array(':tag'=>$topic));
		if($thumbnail_url) {
			return $base_url.'/fbimages/'.$id.'_sm.jpeg';
		}
		else {
			return $base_url.'/fbimages/'.$id.'.jpeg';
		}
	}	

	return $local_url;	
}

function save_image_topic_reference($topic, $image_topic) {
	$values_list = "VALUES ('".$topic."', '".$image_topic."')";
	$query = "INSERT INTO fb_saved_images (tag, image_tag) ".$values_list." ON DUPLICATE KEY UPDATE image_tag = VALUES(image_tag);";
	$result = db_query($query, array(':tag'=>$topic));
}

//this wipes all cached data on tags, events, etc.
function reset_recommender_databse() {
	//this table lists the previously calculated tags
	$query = "delete from calculated_tags WHERE 1;";
	db_query($query);
	
	//this table lists the name (title) of each tag
	$query = "delete from tag_name WHERE 1;";
	db_query($query);
	
	//this table defines the link type between a tag and each of its events
	$query = "DELETE from tag_link_event_id WHERE 1;";
	db_query($query);
	
	//this table defines the triples of each event
	$query = "delete from event_attribute_value WHERE 1;";
	$result = db_query($query);
	
	//this table records an id for each multi-tag query
	$query = "delete from query_id WHERE 1;";
	db_query($query);

	//this table records the tags of each query id
	$query = "delete from query_tag WHERE 1;";
	db_query($query);

	//this table records the description of each tag
	$query = "delete FROM tag_description WHERE 1;";
	db_query($query);
	
	//this table lists the previously calculated settings
	$query = "delete from calculated_settings WHERE 1;";
	db_query($query);
	
	//this table lists direct triples (non-events) of a topic
	$query = "delete from tag_triple WHERE 1;";
	db_query($query);	
	
	//this table lists values of topic attribute pairs
 	$query = "DELETE FROM tag_attribute_id_value WHERE 1;";
 	db_query($query);
 
	//this table lists topic attribute pairs
	$query = "DELETE FROM tag_attribute WHERE 1;";
	db_query($query);
	
	$query = "delete from tag_notable_types where 1;";
	db_query($query);
	
	$query = "delete from setting_link_event_id where 1;";
	db_query($query);
	
	//list of cahced freebase images
	$query = "delete from fb_saved_images where 1;";
	db_query($query);
}


// ALTER TABLE tag_triple
// ADD CONSTRAINT tav UNIQUE (tag,attribute,value);
function triples_of_a_tag($topic) {
	$result = array("triples"=>array(),"names"=>array());
// 	$result = array("events"=>array(),"names"=>array(), "links"=>array());
	$types = check_for_tag_types($topic);

	//**type: /people/person
	if(in_array("/people/person", $types)) {
		//person birth details
		$result = fb_person_birth_date_location($topic, $result);
	}	
	if(in_array("/people/deceased_person", $types)) {
		//person death details
		$result = fb_deceased_person_death_date_location($topic, $result);
	}
	
	if(in_array("/visual_art/visual_artist", $types)) {
		//artist movement details
		$result = fb_artist_associated_periods_movements($topic, $result);
	}

	if(in_array("/visual_art/art_period_movement", $types)) {
		//artist movement details
		$result = fb_periods_movements_associated_artist_($topic, $result);
	}
	
	//saving
	save_tag_names_to_db($result["names"]);
	save_triples_to_db($result["triples"]);
}

function save_tag_attribute($topic, $attribute, $link) {
	$query = "INSERT INTO tag_attribute (tag, attribute, link) VALUES(:tag, :attribute, :link) ON DUPLICATE KEY UPDATE tag = VALUES(tag), attribute = VALUES(attribute), link = VALUES(link);";
	$result = db_query($query, array(':tag'=>$topic, ':attribute'=>$attribute, ':link'=>$link));
}

function check_for_tag_in_tag_attribute($topic) {
	$query = "SELECT id FROM tag_attribute WHERE tag = :tag;";
	$result = db_query($query, array(':tag'=>$topic));
	$found = $result->fetchObject();
	if(isset($found->id)) {
		return $found->id;
	}
	else {
		return 0;
	}	
}

function check_for_tag_attribute($topic, $attribute) {
	$query = "SELECT id FROM tag_attribute WHERE tag = :tag AND attribute = :attribute;";
	$result = db_query($query, array(':tag'=>$topic, ':attribute'=>$attribute));
	$found = $result->fetchObject();
	if(isset($found->id)) {
		return $found->id;
	}
	else {
		return 0;
	}
}

function save_tag_attribute_id_values($id, $values) {
	$values_list = "";	
	foreach($values as $value) {
		$name = my_escape_string($value);
		$values_list .=", ('".$id."', '".$name."')";
	}
	if($values_list == "") {
		return;
	}
	$values_list = "VALUES".substr($values_list, 1)." ";
	
	$query = "INSERT INTO tag_attribute_id_value (tag_attribute_id, value) ".$values_list." ON DUPLICATE KEY UPDATE tag_attribute_id = VALUES(tag_attribute_id), value = VALUES(value);";
	
	$result = db_query($query);
}

function save_triples_to_db($triples) {
	foreach($triples as $triple) {
		//save to tag_triple_table
		$topic = $triple["0"];
		$attribute = $triple["1"];
		$values = $triple["2"];
		$link = $triple["3"];
		save_tag_attribute($topic, $attribute, $link);
		
		//get new tag triple id
		$id = check_for_tag_attribute($topic, $attribute);
		
		//save to tag triple value table

 		save_tag_attribute_id_values($id, $values);
	}
}

function fb_periods_movements_associated_artist_($topic = '/m/014wxs', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/art_period_movement/associated_artists"=> array(array(
    "mid"=> null,
    "name"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"]["0"]["/visual_art/art_period_movement/associated_artists"])) {
		$triples[] = array($topic, "Associated artists", get_values($resultarray["result"]["0"]["/visual_art/art_period_movement/associated_artists"]), 1);
		$tag_names = get_topic_name_pairs(array("/visual_art/art_period_movement/associated_artists"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

function fb_artist_associated_periods_movements($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/visual_artist/associated_periods_or_movements"=> array(array(
    "mid"=> null,
    "name"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"]["0"]["/visual_art/visual_artist/associated_periods_or_movements"])) {
		$triples[] = array($topic, "Associated period or movement", get_values($resultarray["result"]["0"]["/visual_art/visual_artist/associated_periods_or_movements"]), 1);
		$tag_names = get_topic_name_pairs(array("/visual_art/visual_artist/associated_periods_or_movements"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

function fb_person_birth_date_location($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/people/person/date_of_birth"=> null,
  "/people/person/place_of_birth"=> array(
    "mid"=> null,
    "name"=> null
  )
));

	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/people/person/place_of_birth"]["mid"]) && isset($resultarray["result"]["0"]["/people/person/place_of_birth"]["name"])) {
		$triples[] = array($topic, "Place of birth", array($resultarray["result"]["0"]["/people/person/place_of_birth"]["mid"]), 1);
		$tag_names[$resultarray["result"]["0"]["/people/person/place_of_birth"]["mid"]] = $resultarray["result"]["0"]["/people/person/place_of_birth"]["name"];
	}
	if(isset($resultarray["result"]["0"]["/people/person/date_of_birth"])) {
		$triples[] = array($topic, "Date of birth", array($resultarray["result"]["0"]["/people/person/date_of_birth"]), 0);
	}
	
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

function fb_deceased_person_death_date_location($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/people/deceased_person/date_of_death"=> null,
  "/people/deceased_person/place_of_death"=> array(
    "mid"=> null,
    "name"=> null
  )
));
	
	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["mid"]) && isset($resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["name"])) {
		$triples[] = array($topic, "Place of death", array($resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["mid"]), 1);
		$tag_names[$resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["mid"]] = $resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["name"];
	}
	if(isset($resultarray["result"]["0"]["/people/deceased_person/date_of_death"])) {
		$triples[] = array($topic, "Date of death", array($resultarray["result"]["0"]["/people/deceased_person/date_of_death"]), 0);
	}
	
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));	
}


function event_space_of_a_setting($location, $year, $end = 0) {
	if($end) {
		$year_field = $year."-".$end;
	}
	else {
		$year_field = $year;
	}	
	if(check_for_calculated_setting($location, $year_field)) {
		return;
	}
	$result = array("events"=>array(),"names"=>array(),"links"=>array());
	$result = dec_events_of_the_setting($location, $year, $end, $result);
	$result = dec_containing_events_of_the_setting($location, $year, $end, $result);
	$result = dec_containing_containing_events_of_the_setting($location, $year, $end, $result);

	save_events_to_db($result["events"]);
	save_tag_names_to_db($result["names"]);
	save_calculated_setting($location, $year);
	save_setting_links_to_db($result["links"]);

}

function dec_get_events_for_setting($location, $year) {
	$query = "SELECT setting_link_event_id.event_id AS event FROM setting_link_event_id 
WHERE setting_link_event_id.location = '".$location."' AND 
setting_link_event_id.year = '".$year."' UNION SELECT event_location.event 
FROM event_attribute_value AS event_location, event_attribute_value AS event_time, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND 
event_location.value = '".$location."' AND 
event_location.event = event_time.event AND
event_time.attribute = time_attribute_name.attribute AND 
(time_attribute_name.name = 'start_time' OR time_attribute_name.name = 'end_time') AND 
event_time.value LIKE '".$year."%';";
	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	return $output;	
	
}

function dec_setting() {
	$output = "";
	if(isset($_GET['location']) && isset($_GET['time'])) {
		$location = $_GET['location'];
		$time = $_GET['time'];
	}
	else {
		return "No setting found";
	}

	$year = substr($time, 0, 4);

	if(isset($_GET['end'])) {
		$end = $_GET['end'];
		$end_year = substr($end, 0, 4);
	}
	else {
		$end_year = 0;
	}
	
	//check the event space of the location has been calculated
	new_event_space_of_a_topic($location);
		
	//event space for setting
	event_space_of_a_setting($location, $year, $end_year);
	
	//get events for a setting
// 	$related_events = dec_get_events_for_setting($location, $year);
	$all_events = get_all_events_for_setting($location, $year, $end_year);
	
	//get themes for the events of a setting
	$themes = dec_get_themes_for_events_of_setting($location, $year, $end_year);

	$name = get_topic_name($location);
	if($end_year) {
		if($name) {
			drupal_set_title($name." ".$year."-".$end_year);
		}
		else {
			drupal_set_title($location." ".$year."-".$end_year);
		}		
	}
	else {
		if($name) {
			drupal_set_title($name." ".$year);
		}
		else {
			drupal_set_title($location." ".$year);
		}
	}
	
	//tag description
	$description = get_topic_description($location);
	if($description) {
		// 		$output .= '<div style="clear:both">Description:</div><div style="clear:both">'.$description.'</div>';
		$output .= '<div style="clear:both">'.$description.'</div>';
	}

	if(!empty($themes)) {
		$output .= '<div style="clear:both"><h2>Themes: </h2></div>';
		foreach($themes as $theme) {
			$output .= l('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", "tag".$theme->value, array("html"=>TRUE));
		}
	
	}
	
// 	if(!empty($related_events)) {
// 		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
// 		foreach($related_events as $related_event) {
// 			$output .= '<div style="float: left;  width: 200px;">'.output_event_table($related_event)."</div>";
// 		}
	
// 	}	

	if(!empty($all_events)) {
		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
		if($end_year) {
			$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$year, 'end'=>$end_year))).'</div></div>';
		}
		else {
			$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$year))).'</div></div>';
		}
		foreach($all_events as $label=>$events) {
			$output .= '<div style="clear:both">'.ucfirst($label).':</div>';
			if($end_year) {
				$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline '.ucfirst($label),'timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$year, 'event_type'=>$label, 'end'=>$end_year))).'</div></div>';
			}
			else {
				$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline '.ucfirst($label),'timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$year, 'event_type'=>$label))).'</div></div>';
			}
			foreach($events as $event) {
				$output .= '<div style="float: left; width: 200px;">'.output_event_table($event)."</div>";
	
			}
		}
	}
	return $output;
	
}

function dec_get_themes_for_events_of_setting($location, $year, $end = 0) {
	if($end) {
		$end_date = $end.'-12-31';
		$query = "SELECT * 
FROM
(SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name
FROM event_attribute_value, tag_name,
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM 
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
	location_attribute_name.name = 'location' AND
	event_location.value = '".$location."' AND
	event_activity.event = event_location.event AND
	event_activity.attribute = 'activity' AND
	event_location.event = event_start_time.event AND
	event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time') as start_location_result
LEFT JOIN 
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
	location2_attribute_name.name = 'location' AND
	event_location2.value = '".$location."' AND
	event_location2.event = event_end_time.event AND
	event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time <= '".$end_date."' AND start_end_location_result.start_time >= '".$year."' AND start_end_location_result.end_time IS NULL) OR
(start_end_location_result.start_time <= '".$end_date."' AND start_end_location_result.end_time >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."-".$end."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity') as combined_result
          WHERE combined_result.event = event_attribute_value.event AND
     event_attribute_value.value = tag_name.tag
     group by event_attribute_value.value ORDER BY frequency DESC) as frequency_result
     WHERE frequency > 1 LIMIT 5;";
	}
	else {
		$query = "SELECT * 
FROM
(SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name
FROM event_attribute_value, tag_name,
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = '".$location."' AND
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time') as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
     location2_attribute_name.name = 'location' AND
     event_location2.value = '".$location."' AND
     event_location2.event = event_end_time.event AND
     event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time = '".$year."' AND start_end_location_result.end_time IS NULL) OR
(start_end_location_result.start_time <= '".$year."' AND start_end_location_result.end_time  >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity') as combined_result
     WHERE combined_result.event = event_attribute_value.event AND
     event_attribute_value.value = tag_name.tag
     group by event_attribute_value.value ORDER BY frequency DESC) as frequency_result
     WHERE frequency > 1 LIMIT 5;";
	}

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;
}
		
		
function dec_get_themes_for_events_of_setting_old($location, $year) {
	$query = "SELECT triples.value, COUNT(triples.value) as frequency, tag_name.name 
FROM tag_name, 
(SELECT eav.event, eav.attribute, eav.value 
FROM event_attribute_value as eav, (
SELECT DISTINCT event_location.event 
FROM event_attribute_value AS event_location, event_attribute_value AS event_time
WHERE event_location.attribute = 'location' AND 
event_location.value = '".$location."' AND 
event_location.event = event_time.event AND
(event_time.attribute = 'start_time' OR event_time.attribute = 'end_time') AND 
event_time.value LIKE '".$year."%') as res 
where res.event = eav.event
UNION
SELECT eav.event, eav.attribute, eav.value 
FROM event_attribute_value as eav, (
SELECT DISTINCT setting_link_event_id.event_id AS event, setting_link_event_id.year AS year  FROM setting_link_event_id 
WHERE setting_link_event_id.location = '".$location."' AND 
setting_link_event_id.year = '".$year."') as res
where res.event = eav.event) as triples 
WHERE triples.value = tag_name.tag 
group by triples.value ORDER BY frequency DESC LIMIT 5;";
	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;	
}

function dec_events_of_the_setting($location, $year, $end = 0, $previous_output = array("events"=>array(),"names"=>array(),"links"=>array())) {
	if(!$end) {
		$end = $year;
	}
	$query = array(array(
  "type"=> "/time/event",
  "mid"=> null,
  "name"=> null,
  "/time/event/locations"=> array(array(
    "mid"=> $location
  )),
  "ns3:/time/event/locations"=> array(array(
    "mid"=> null,
  	"name"=> null
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
  	"name"=> null,
  	"optional"=> "optional"
  )),
  "ns1:/time/event/start_date<="=> $end."-12-12",
  "ns2:/time/event/end_date>="=> $year."-01-01",
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null
));

	$resultarray = execute_mql_event_query($query);

	$setting_event_links = array();
	$topic_name_pairs = array();
	$output = array();
	if(!isset($resultarray["result"])) {
		return ;
	}
	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] =  str_replace(' ', '_',strtolower($notable_types["0"]));
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}

		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/locations","/time/event/people_involved"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$setting_event_links[] = array($location, $year, $end, $result["mid"]);
		
	}	

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
		"links"=>array_merge($setting_event_links, $previous_output["links"])
	);	
}

function dec_containing_events_of_the_setting($location, $year, $end = 0, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	if(!$end) {
		$end = $year;
	}
	$query = array(array(
  "type"=> "/time/event",
  "mid"=> null,
  "name"=> null,
  "ns0:/time/event/locations"=> array(array(
    "mid"=> null,
    "/location/location/contains"=> array(array(
      "mid"=> $location
    ))
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  )),
  "/time/event/locations"=> array(array(
    "mid"=> null,
    "name"=> null
  )),
  "/time/event/start_date<="=> $end."-12-12",
  "/time/event/end_date>="=> $year."-01-01",
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null
));

	$resultarray = execute_mql_event_query($query);
	$setting_event_links = array();
	$topic_name_pairs = array();
	$output = array();
	if(!isset($resultarray["result"])) {
		return ;
	}
	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] = str_replace(' ', '_',strtolower($notable_types["0"]));
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}
		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/locations","/time/event/people_involved"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$setting_event_links[] = array($location, $year, $end, $result["mid"]);
	}
			
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
	"links"=>array_merge($setting_event_links, $previous_output["links"]));
}

function dec_containing_containing_events_of_the_setting($location, $year, $end = 0, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	if(!$end) {
		$end = $year;
	}
	$query = array(array(
  "type"=> "/time/event",
  "mid"=> null,
  "name"=> null,
  "ns0:/time/event/locations"=> array(array(
    "mid"=> null,
    "/location/location/contains"=> array(array(
      "/location/location/contains"=> array(array(
        "mid"=> $location
      ))
    ))
  )),
  "/time/event/locations"=> array(array(
    "mid"=> null,
    "name"=> null
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  )),
  "/time/event/start_date<="=> $end."-12-12",
  "/time/event/end_date>="=> $year."-01-01",
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null
));
	$resultarray = execute_mql_event_query($query);
	$setting_event_links = array();
	$topic_name_pairs = array();	
	$output = array();
	if(!isset($resultarray["result"])) {
		return ;
	}
	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] = str_replace(' ', '_',strtolower($notable_types["0"]));
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}
		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/locations","/time/event/people_involved"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$setting_event_links[] = array($location, $year, $end, $result["mid"]);
	}	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
	"links"=>array_merge($setting_event_links, $previous_output["links"]));
}

function dec_story($story) {
	$story = (int) $story;
	
	if(!$story) {
		return "No story found";
	}
	$query = "SELECT query_tag.tag, tag_name.name FROM query_tag
LEFT JOIN tag_name ON query_tag.tag = tag_name.tag
WHERE query_tag.id = '".$story."';";
	$result = db_query($query);
	
	$tag_array = array();
	foreach ($result as $record) {
		$tag_array[] = $record->tag;
	}
	
	return dec_list_of_tags($tag_array, $story);
}

function dec_tags() {
	
	if(isset($_GET['list'])) {
		$list = $_GET['list'];
	}
	else {
		return "No list found";
	}
	$tag_array = explode(",", str_replace(' ', '', substr(substr($list, 1), 0, -1)));
	$tag_array = array_unique($tag_array);

	if(!is_array($tag_array) || empty($tag_array)) {
		return "No list found";
	}
	
	//get unique query id
	$query1 = "INSERT INTO query_id(id) VALUES (NULL);";
	$result1 = db_query($query1);
	$query2 = "select max(id) as val from query_id";
	$result2 = db_query($query2);
	$maxobj = $result2->fetchObject();
	$max_value = $maxobj->val;
	
	//assign tags to query id
	$query = db_insert('query_tag')->fields(array('id', 'tag'));
	foreach($tag_array as $tag) {
		$query->values(array("id"=>$max_value, "tag"=>$tag));
	}
	$query->execute();
	
	return dec_list_of_tags($tag_array, $max_value);
}

function dec_list_of_tags($tag_array, $max_value) {
	$output = "";

	//produce event spaces
	foreach($tag_array as $tag) {
		new_event_space_of_a_topic($tag);
	}
	
	//tags title
	$tag_name_array = array();
	foreach($tag_array as $tag) {
		$name = get_topic_name($tag);
		if($name) {
			$tag_name_array[] = $name;
		}
		else {
			$tag_name_array[] = $tag;
		}		
	}
	drupal_set_title(implode(", ",$tag_name_array));
	
	//calculate themes 
// 	$themes = top_n_themes_of_story($max_value, 5);
// 	if(!empty($themes)) {
// 		$output .= '<div style="clear:both">Themes: </div>';
// 		foreach($themes as $theme) {
// 			$output .= l('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", "tag".$theme->value, array("html"=>TRUE));
// 		}
	
// 	}	
	//matching themes
	$matching_themes = top_n_matching_themes_of_story($max_value, 10);
	if(!empty($matching_themes)) {
		$output .= '<div style="clear:both"><h2>Tags: </h2></div>';
		foreach($matching_themes as $theme) {
			if($theme->value && !$theme->name) {
				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->value."</div>";
			}
			else {
				$output .= l('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", "tag".$theme->value, array("html"=>TRUE));
			}
		}
	
	}
	
	//non-matching themes
	$nonmatching_themes = top_n_nonmatching_themes_of_story($max_value, 10);
	if(!empty($nonmatching_themes)) {
		$output .= '<div style="clear:both"><h2>Themes: </h2></div>';
		foreach($nonmatching_themes as $theme) {
			$output .= l('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", "tag".$theme->value, array("html"=>TRUE));
		}
	
	}
	
	//settings that overlap with the tag_array
// 	$overlapping_settings = get_n_matching_settings_for_a_story($max_value, $n = 5);
	$overlapping_settings = get_n_matching_settings_for_a_story2($max_value, $n = 5);

// 	if(!empty($overlapping_settings)) {
// 		$output .= '<div style="clear:both"><h2>Settings that include a tag: </h2></div>';
// 		foreach($overlapping_settings as $setting) {
// 			$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
// 					l($setting->name." ".$setting->time,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->time))).
// 					"</div>";
// 		}
	
// 	}
	if(!empty($overlapping_settings)) {
		$output .= '<div style="clear:both"><h2>Settings that include a tag: </h2></div>';
		foreach($overlapping_settings as $setting) {
			if($setting->end && $setting->start !== $setting->end) {
				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
						l($setting->name." ".$setting->start."-".$setting->end,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->start, 'end' => $setting->end))).
						"</div>";				
			}
			else {
				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
					l($setting->name." ".$setting->start,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->start))).
					"</div>";
			}
		}
	
	}
			
	//settings that do not overlap with the tag_array
// 	$non_overlapping_settings = get_n_nonmatching_settings_for_a_story($max_value, $n = 5);
	$non_overlapping_settings = get_n_nonmatching_settings_for_a_story2($max_value, $n = 5);
	
// 	if(!empty($non_overlapping_settings)) {
// 		$output .= '<div style="clear:both"><h2>Settings that do not include a tag: </h2></div>';
// 		foreach($non_overlapping_settings as $setting) {
// 			$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
// 					l($setting->name." ".$setting->time,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->time))).
// 					"</div>";
// 		}
	
// 	}
	if(!empty($non_overlapping_settings)) {
		$output .= '<div style="clear:both"><h2>Settings that do not include a tag: </h2></div>';
		foreach($non_overlapping_settings as $setting) {
			if($setting->end && $setting->start !== $setting->end) {
				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
						l($setting->name." ".$setting->start."-".$setting->end,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->start, 'end' => $setting->end))).
						"</div>";
			}
			else {
				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
						l($setting->name." ".$setting->start,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->start))).
						"</div>";
			}
		}
	
	}		
	//events
	//combined events of the tag array via tag event link
// 	$linked_events = get_link_events_for_story($max_value);
// 	$related_events = get_related_events_for_story($max_value);
	$all_events = get_all_events_for_story($max_value);

	if(!empty($all_events)) {
		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
		$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline_for_tags/'.$max_value).'</div></div>';
		
		foreach($all_events as $label=>$events) {
			$output .= '<div style="clear:both">'.ucfirst($label).':</div>';
			$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline '.ucfirst($label),'timeline_for_tags/'.$max_value,array('query'=>array('event_type'=>$label))).'</div></div>';
			foreach($events as $event) {
				$output .= '<div style="float: left; width: 200px;">'.output_event_table($event)."</div>";
	
			}
		}
	}
	
	
// 	if(!empty($linked_events) || !empty($related_events)) {
// 		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
// 	}
	
// 	if(!empty($linked_events)) {
// 		foreach($linked_events as $link=>$events) {
// 			$output .= '<div style="clear:both">'.ucfirst($link).':</div>';
// 			if(!empty($events)) {
// 				foreach($events as $event) {
// 					$output .= '<div style="float: left; width: 200px;">'.output_event_table($event)."</div>";
// 				}	
// 			}
// 		}
// 	}
	
// 	$related_events = get_related_events_for_story($max_value);
// 	if(!empty($related_events)) {
// 		$output .= '<div style="clear:both">Related events:</div>';
// 		foreach($related_events as $related_event) {
// 			$output .= '<div style="float: left;  width: 200px;">'.output_event_table($related_event)."</div>";
// 		}
// 	}
		
	return $output;
}

function execute_mql_event_query($query) {
	$jsonquerystr = urlencode(json_encode($query));
	#run the query
	$queryurl='https://www.googleapis.com/freebase/v1/mqlread?query='.$jsonquerystr.'&key='.GOOGLEAPIKEY;
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $queryurl);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$jsonresultstr = curl_exec($ch);
	curl_close($ch);
	$resultarray = json_decode($jsonresultstr, true); #true:give us the json struct as an array
	return $resultarray;
}

function execute_sparql_event_query($query) {
	$config = array('remote_store_endpoint' => 'http://factforge.net/sparql.xml');
	$store = ARC2::getRemoteStore($config);
	$rows = $store->query($query, 'rows');
	return $rows;
}

function get_notable_tag_type_names($topic) {
	$output = array();
	$query = "SELECT * FROM tag_notable_types WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	foreach ($result as $record) {
		if(isset($record->notable_type_name)) {
			$output[] = $record->notable_type_name;
		}
	}
	return $output;
}

function dec_tag($m, $id) {
	$output = "";
	$x = arg(1);
	$y = arg(2);
	$id_num = (int) $id;

	if(isset($_GET['reload'])) {
		$reload = $_GET['reload'];
	}
	else {
		$reload = FALSE;
	}
	
	if($m == "m") {
		$topic = "/".$m."/".$id;
	}
	elseif($m == "date" && $id_num != 0) {
		$topic = $id;
	}
	else {
		return "No topic found";
	}
	if($m == "m") {
		//calculate event space (if not cached)
		$types = new_event_space_of_a_topic($topic, $reload);

		//calculate triples
		$calculated_triples = check_for_tag_in_tag_attribute($topic);
		if(!$calculated_triples && !$reload) {
			triples_of_a_tag($topic);
		}
	
		//tag name
		$name = get_topic_name($topic);
		if($name) {
			drupal_set_title($name);
		}
// 		$output .= image_html_for_a_freebase_topic($topic);
		if($image = check_freebase_saved_image($topic, FALSE, $reload)) {
			$output .= '<img src="'.$image.'">';
		}
		
		//tag type
		$notable_tag_types = get_notable_tag_type_names($topic);
		if(!empty($notable_tag_types)) {
			$output .= '<div style="clear:both">Type: ';
			$output .= implode(', ', $notable_tag_types);
			$output .= '</div>';
		}
		//tag description
		$description = get_topic_description($topic);
		if($description) {
			$output .= '<div style="clear:both"><div style="float: left;">'.$description.'</div>';
		}
		
		//tag triples
		$tag_attributes = get_triple_ids_of_a_tag($topic);
		foreach($tag_attributes as $tag_attribute) {
			$values = get_tag_attribute_id_values($tag_attribute->id);
			$output .= '<div style="clear:both">'.$tag_attribute->attribute.": ";
			$output_values = array();
			foreach($values as $value) {
				
				$name = get_topic_name($value);
				if(!$name) {
					$name = $value;
				}
				if($tag_attribute->link) {
					$output_values[] = l($name, 'tag'.$value);
				}
				else {
					$output_values[] = $name."</div>";
				}						
			}
			$output .= implode(', ',$output_values);
			$output .= "</div>";
		}	
	}
	elseif($m == "date" && $id != 0) {
		drupal_set_title($id);
	}
	
	//tag themes
	$themes = top_n_themes_of_tag($topic, 10);
	if(!empty($themes)) {
		$output .= '<div style="clear:both"><h2>Themes: </h2></div>';
		foreach($themes as $theme) {
			$output .= l('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", "tag".$theme->value, array("html"=>TRUE));
		}
		
	}
	
	//settings
	$settings = get_n_settings_for_a_tag($topic, 10);

	if(!empty($settings)) {
		$output .= '<div style="clear:both"><h2>Settings: </h2></div>';
		foreach($settings as $setting) {
			if(isset($setting['end_time']) && isset($setting['start_time']) &&  $setting['end_time'] != $setting['start_time']) {
				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
						l($setting['name']." ".$setting['start_time']."-".$setting['end_time'],'setting',array('query' => array('location' => $setting['location'], 'time' => $setting['start_time'], 'end' => $setting['end_time']))).
						"</div>";
			}
			elseif(isset($setting['start_time'])) {
				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
						l($setting['name']." ".$setting['start_time'],'setting',array('query' => array('location' => $setting['location'], 'time' => $setting['start_time']))).
						"</div>";
			}	
		}
	}
	
	//event links
// 	$linked_events = get_link_events_for_tag($topic);

// 	$related_events = get_related_events_for_tag($topic);
	
	$all_events = get_all_events_for_tag($topic);

	if(!empty($all_events)) {
		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
		$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline'.$topic).'</div></div>';
				foreach($all_events as $all_event) {
					$output .= '<div style="clear:both">'.ucfirst($all_event['label']).':</div>';
					$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline '.ucfirst($all_event['label']),'timeline'.$topic,array('query'=>array('attribute'=>$all_event['name']))).'</div></div>';
						foreach($all_event['events'] as $event) {
							$output .= '<div style="float: left; width: 200px;">'.output_event_table_dec_tag($event, $types)."</div>";
				
			}
		}
	}

// 	if(!empty($linked_events) || !empty($related_events)) {
// 		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
// 	}

// 	if(!empty($linked_events)) {
// 		foreach($linked_events as $link=>$events) {
// 			$output .= '<div style="clear:both">'.ucfirst($link).':</div>';
// 			if(!empty($events)) {
// 				foreach($events as $event) {
// 					$output .= '<div style="float: left; width: 200px;">'.output_event_table_dec_tag($event, $types)."</div>";
// 				}
			
// 			}
// 		}
// 	}

// 	//other events
// 	if(!empty($related_events)) {
// 		$output .= '<div style="clear:both">Other events:</div>';
// 		foreach($related_events as $related_event) {
// 			$output .= '<div style="float: left;  width: 200px;">'.output_event_table_dec_tag($related_event, $types)."</div>";
// 		}
// 	}	

	//l($setting->name." ".$setting->time,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->time))).
	
	$output .= '<div style="clear:both">'.l('Reload','tag/'.$m.'/'.$id, array('query' => array('reload' => '1'))).'</div>';
	return $output;
}

function merge_event_arrays($linked_events, $related_events) {
	foreach($related_events as $key=>$value) {
		if(isset($linked_events[$key])) {
			$linked_events[$key] = array_merge($linked_events[$key], $value);
		}
		else {
			$linked_events[$key] = $value;
		}
	}
	return $linked_events;
}

function produce_event_table_for_timeline($event) {

	$output = '';
	$rows = array();
	foreach($event as $key=>$elements) {
		if(!in_array($key,array('title','activity','start_time','end_time'))) {
			$value_array = array();
			if(is_array($elements)) {
				$output .= '<div style="clear:both">'.$key.": ";
				foreach($elements as $element) {
					if(is_array($element)) {
						$value_array[] = l($element[1], "tag".$element[0]);
					}
					//comment this out to remove date links TODO
					// 			elseif($key == 'start_time' || $key == 'end_time') {
					// 				$value_string .= l($element, "tag/date/".$element)."</br> ";
					// 			}
				}
				$output .= implode(', ',$value_array)."</div>";
			}
		}
	}
	
	return $output;
}

function produce_event_table($event) {
	$rows = array();
	foreach($event as $key=>$elements) {
		$value_string = "";
		if(is_array($elements)) {
			foreach($elements as $element) {
				if(is_array($element)) {
					$value_string .= l($element[1], "tag".$element[0])."</br> ";
				}
				//comment this out to remove date links TODO
				// 			elseif($key == 'start_time' || $key == 'end_time') {
				// 				$value_string .= l($element, "tag/date/".$element)."</br> ";
					// 			}
					else {
						$value_string .= $element."</br> ";
					}
				}
				$rows[] = array($key,$value_string);
			}
		}
		return theme('table', array('rows' => $rows, 'attributes' => array('width' => '50%')));
}

function output_event_table_dec_tag($event_id, $topic_types) {
	$event = load_art_event_dec_tag($event_id, $topic_types);

	return produce_event_table($event);
}

function output_event_table_tags_timeline($event_id) {
	$event = load_art_event_without_title_addition($event_id);

	$rows = array();
	foreach($event as $key=>$elements) {
		$value_string = "";
		foreach($elements as $element) {
			if(is_array($element)) {
				$value_string .= l($element[1], "tag".$element[0])."</br> ";
			}
			//comment this out to remove date links TODO
			// 			elseif($key == 'start_time' || $key == 'end_time') {
			// 				$value_string .= l($element, "tag/date/".$element)."</br> ";
			// 			}
				else {
					$value_string .= $element."</br> ";
				}
		}
		$rows[] = array($key,$value_string);
	}
	return theme('table', array('rows' => $rows, 'attributes' => array('width' => '50%')));
}

function output_event_table($event_id) {
	$event = load_art_event_without_title_addition($event_id);

	$rows = array();
	foreach($event as $key=>$elements) {
		$value_string = "";
		foreach($elements as $element) {
			if(is_array($element)) {
				$value_string .= l($element[1], "tag".$element[0])."</br> ";
			}
			//comment this out to remove date links TODO
// 			elseif($key == 'start_time' || $key == 'end_time') {
// 				$value_string .= l($element, "tag/date/".$element)."</br> ";
// 			}
			else {
				$value_string .= $element."</br> ";
			}
		}
		$rows[] = array($key,$value_string);
	}
	return theme('table', array('rows' => $rows, 'attributes' => array('width' => '50%')));
}

function get_type_of_stored_event($event_id) {
	$query = "SELECT event_attribute_value.value
FROM event_attribute_value
WHERE event_attribute_value.event = '".$event_id."' AND 
event_attribute_value.attribute = 'activity';";
	$result = db_query($query);
	
	$object = $result->fetchObject();
	if(isset($object->value)) {
		return $object->value;
	}
	else {
		return FALSE;
	}
}

function get_event_label_with_event_attribute_name($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name, attribute_name
	WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute AND
	attribute_name.name = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";

	$result = db_query($query);

	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		return $object->name;
	}
	else {
		return '';
	}
}

function get_event_value_with_event_attribute_name($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name, attribute_name 
	WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute AND
	attribute_name.name = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";

	$result = db_query($query);

	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		return array($object->value, $object->name);
		//pre-cache topic for timelines
		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $object->value);
	}
	else {
		return FALSE;
	}
}

function get_event_label($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name
	WHERE event_attribute_value.event = '".$event_id."' AND
	event_attribute_value.attribute = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";

	$result = db_query($query);

	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		return $object->name;
	}
	else {
		return '';
	}
}

function get_event_value($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name
	WHERE event_attribute_value.event = '".$event_id."' AND
	event_attribute_value.attribute = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";
	
	$result = db_query($query);
	
	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		return array($object->value, $object->name);
		//pre-cache topic for timelines
		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $object->value);
	}
	else {
		return FALSE;
	}	
}

function add_event_title($event_id, $topic_types, $output) {

	//try topic name
	if($event_name = get_topic_name($event_id)) {
		$output['title'][] = array($event_id,$event_name);
		return $output;
	}
	
	$event_type = get_type_of_stored_event($event_id);

	//location for education, lived
	if($event_type == 'Award nomination') {
		$output['title'][] = get_event_value($event_id, 'award').' nomination';
		return $output;
	}
	if($event_type == 'Award won') {
		$output['title'][] = get_event_value($event_id, 'award').' win';
		return $output;
	}
	//prize for awards and nominations
	if($event_type == 'Education') {
		$output['title'][] = 'Educated at '.get_event_value($event_id, 'location');
		return $output;		
	}
	if($event_type == 'Place lived') {
		$output['title'][] = 'Lived in '.get_event_value($event_id, 'location');
		return $output;		
	}

	return FALSE;
}



function load_art_event_dec_tag($event_id, $topic_types = array(), $for_timeline = FALSE) {
	$query = "SELECT events.name as attribute, events.value, tag_name.name FROM 
(SELECT attribute_name.name, event_attribute_value.value FROM event_attribute_value, attribute_name
WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute) as events 
LEFT JOIN tag_name ON tag_name.tag = events.value;";
	$result = db_query($query);
	$output = array();
	$output['title'] = '';
	//add event title if stored
// 	$output = add_event_title($event_id, $topic_types, $output);
// 	if($event_name = get_topic_name($event_id)) {
// 		$output['title'][] = array($event_id,$event_name);
// 		// 		$output['Title'][] = $event_name;
// 	}
	$records = array();

	foreach ($result as $record) {
// 		if(in_array($record->attribute, array('activity','location','agent','start_time','end_time'))) {
			$attribute = $record->attribute;
// 		}
// 		else {
// 			$attribute = 'tags';
// 		}

		if(isset($output[$attribute])) {

			if($record->name) {
				$output[$attribute][] = array($record->value, $record->name);
			}
			else {
				$output[$attribute][] = $record->value;
			}
		}
		else {
			if($record->name) {
				$output[$attribute] = array(array($record->value, $record->name));
			}
			else {
				$output[$attribute] = array($record->value);
			}
		}
	}
	
	if($for_timeline) {
		if(isset($output['end_time']) && !isset($output['start_time'])) {
			$output['start_time'] = $output['end_time'];
			unset($output['end_time']);
		}
	}
	
	//add title to the event array
	$event_type = get_type_of_stored_event($event_id);

	if($event_name = get_topic_name($event_id)) {
		$output['title'][] = array($event_id,$event_name);
		//cache topic info
		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $event_id);
		
	}
	elseif($event_type == 'award_won') {
		if(in_array('/award/award', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/award/award_honor/award');
		}
	}
	elseif($event_type == 'award_nomination') {
		if(in_array('/award/award', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/award/award_nomination/award');
		}
	}
	elseif($event_type == 'education') {
		if(in_array('/education/educational_institution', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'location');
		}
	}
	elseif($event_type == 'place_lived') {
			if(in_array('/location/location', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'location');
		}
	}	
	elseif($event_type == 'exhibition_run') {
			if(in_array('/exhibitions/exhibition', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/exhibitions/exhibition_run/venue');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/exhibitions/exhibition_run/exhibition');
		}
	}
	elseif($event_type == 'object_location') {
			if(in_array('/visual_art/artwork', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_location_relationship/location');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_location_relationship/artwork');
		}
	}
	elseif($event_type == 'object_ownership') {
			if(in_array('/visual_art/art_owner', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_owner_relationship/artwork');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_owner_relationship/owner');
		}
	}
	elseif($event_type == 'organization_membership') {
			if(in_array(' /organization/membership_organization', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/organization/organization_membership/member');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/organization/organization_membership/organization');
		}
	}
	return $output;
}

function load_art_event_without_title_addition($event_id) {
	$query = "SELECT events.name as attribute, events.value, tag_name.name FROM
(SELECT attribute_name.name, event_attribute_value.value FROM event_attribute_value, attribute_name
WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute) as events
LEFT JOIN tag_name ON tag_name.tag = events.value;";
	$result = db_query($query);
	$output = array();
	//add event title if stored
	// 	$output = add_event_title($event_id, $topic_types, $output);
	// 	if($event_name = get_topic_name($event_id)) {
	// 		$output['title'][] = array($event_id,$event_name);
	// 		// 		$output['Title'][] = $event_name;
	// 	}
	$records = array();

		//add title to the event array
		$event_type = get_type_of_stored_event($event_id);

		if($event_name = get_topic_name($event_id)) {
			$output['title'][] = array($event_id,$event_name);
		//cache topic info
		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $event_id);
		
		}
	elseif($event_type == 'award_won') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' won '
		.get_event_label($event_id, '/award/award_honor/award');
	}
	elseif($event_type == 'award_nomination') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' nominated for '
	.get_event_label($event_id, '/award/award_nomination/award');
	}
	elseif($event_type == 'education') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' educated at '
					.get_event_label_with_event_attribute_name($event_id, 'location');
	}
	elseif($event_type == 'place_lived') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' lived in '
			.get_event_label_with_event_attribute_name($event_id, 'location');
	}	
	elseif($event_type == 'exhibition_run') {
			$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition_run/venue').' exhibited '
	.$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition_run/exhibition');
	}
	elseif($event_type == 'object_location') {
			$output['title'][] = get_event_label($event_id, '/visual_art/artwork_location_relationship/artwork').' in '
					.get_event_label($event_id, '/visual_art/artwork_location_relationship/location');
	}
	elseif($event_type == 'object_ownership') {
			$output['title'][] = get_event_label($event_id, '/visual_art/artwork_owner_relationship/artwork').' owned by '
		.get_event_label($event_id, '/visual_art/artwork_owner_relationship/owner');
	}
	elseif($event_type == 'organization_membership') {
		$output['title'][] = get_event_label($event_id, '/organization/organization_membership/member').' member of '
				.get_event_label($event_id, '/organization/organization_membership/organization');
	}
			
		foreach ($result as $record) {
		// 		if(in_array($record->attribute, array('activity','location','agent','start_time','end_time'))) {
		$attribute = $record->attribute;
		// 		}
		// 		else {
		// 			$attribute = 'tags';
		// 		}

			if(isset($output[$attribute])) {

				if($record->name) {
					$output[$attribute][] = array($record->value, $record->name);
				}
				else {
					$output[$attribute][] = $record->value;
				}
			}
			else {
				if($record->name) {
					$output[$attribute] = array(array($record->value, $record->name));
				}
				else {
					$output[$attribute] = array($record->value);
				}
			}
		}

		if(isset($output['end_time']) && !isset($output['start_time'])) {
			$output['start_time'] = $output['end_time'];
			unset($output['end_time']);
		}

		return $output;
}

function load_art_event($event_id) {
	$query = "SELECT attribute, value, tag_name.name FROM event_attribute_value
	LEFT JOIN tag_name ON event_attribute_value.value = tag_name.tag
	WHERE event = '".$event_id."'";
	$result = db_query($query);
	$output = array();

	//add event title if stored
	if($event_name = get_topic_name($event_id)) {
		$output['title'][] = array($event_id,$event_name);
// 		$output['Title'][] = $event_name;
	}
// 	else {
// 		dpm($event_id);
// 	}
	foreach ($result as $record) {
		if(isset($output[$record->attribute])) {
			if($record->name) {
				$output[$record->attribute][] = array($record->value, $record->name);
			}
			else {
				$output[$record->attribute][] = $record->value;
			}
		}
		else {
			if($record->name) {
				$output[$record->attribute] = array(array($record->value, $record->name));
			}
			else {
				$output[$record->attribute] = array($record->value);
			}
		}
	}
	return $output;
}

function get_link_events_for_story($story) {
	$query = "SELECT tag_link_event_id.link, tag_link_event_id.event_id
	FROM tag_link_event_id, query_tag
	WHERE query_tag.id = '".$story."' AND
	query_tag.tag = tag_link_event_id.tag ORDER BY tag_link_event_id.link;";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		if(isset($output[$record->link])) {
			$output[$record->link][] = $record->event_id;
		}
		else {
			$output[$record->link] = array($record->event_id);
		}
	}
	return $output;	
}

function get_link_events_for_tag($topic) {
	$query = "SELECT tag_link_event_id.link, tag_link_event_id.event_id
	FROM tag_link_event_id
	WHERE tag_link_event_id.tag = '".$topic."' ORDER BY tag_link_event_id.link;	";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		if(isset($output[$record->link])) {
			$output[$record->link][] = $record->event_id;
		}
		else {
			$output[$record->link] = array($record->event_id);
		}
	}
	return $output;
}

function get_all_events_for_tag($topic) {//*****here
	$query = "SELECT attribute_name.attribute, attribute_name.reverse_name, GROUP_CONCAT(event_attribute_value.event) as events FROM event_attribute_value, attribute_name
WHERE event_attribute_value.value = '".$topic."' AND 
event_attribute_value.attribute = attribute_name.attribute 
GROUP BY attribute_name.reverse_name;";
	$result = db_query($query);

	$output = array();
	foreach ($result as $record) {
		$output[$record->attribute] =  array('name'=>$record->attribute, 'label'=>$record->reverse_name, 'events'=>explode(',',$record->events));
	}
	
	//if tag is itself an event
	$query = "SELECT event_attribute_value.event FROM event_attribute_value WHERE event_attribute_value.event = '".$topic."';";
	$result = db_query($query);
	$object = $result->fetchObject();
	if(isset($object->event)) {
		$output['event'] = array('name'=>'event', 'label'=>'event', 'events'=>array($topic));
	}
	return $output;
}

function get_all_events_for_setting_event_type($location, $year, $event_type, $end = 0) {
	if($end) {
		$end_date = $end.'-12-31';
		$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
	location_attribute_name.name = 'location' AND
	event_location.value = '".$location."' AND
	event_activity.event = event_location.event AND
	event_activity.attribute = 'activity' AND 
	event_activity.value = '".$event_type."' AND
	event_location.event = event_start_time.event AND
	event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time') as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
	location2_attribute_name.name = 'location' AND
	event_location2.value = '".$location."' AND
	event_location2.event = event_end_time.event AND
	event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time <= '".$end_date."' AND start_end_location_result.start_time >= '".$year."' AND start_end_location_result.end_time IS NULL) OR
(start_end_location_result.start_time <= '".$end_date."' AND start_end_location_result.end_time >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."-".$end."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity' AND
	 event_attribute_value.value = '".$event_type."') as combined_result
GROUP BY combined_result.activity;";
	}
	else {
		$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = '".$location."' AND
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_activity.value = '".$event_type."' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time') as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
     location2_attribute_name.name = 'location' AND
     event_location2.value = '".$location."' AND
     event_location2.event = event_end_time.event AND
     event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time = '".$year."' AND start_end_location_result.end_time IS NULL) OR
(start_end_location_result.start_time <= '".$year."' AND start_end_location_result.end_time  >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity' AND
	event_attribute_value.value = '".$event_type."') as combined_result
GROUP BY combined_result.activity;";
	}

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[$record->activity] =  array_unique(explode(',',$record->events));
	}
	return $output;
}

function get_all_events_for_setting_event_type_old($location, $year, $event_type) {
	$query = "SELECT GROUP_CONCAT(result_table.event) as events, result_table.value FROM
	(SELECT setting_link_event_id.event_id AS event, event_attribute_value.value FROM setting_link_event_id, event_attribute_value
	WHERE setting_link_event_id.location = '".$location."' AND
	setting_link_event_id.year = '".$year."' AND
	event_attribute_value.event = setting_link_event_id.event_id AND
	event_attribute_value.attribute = 'activity' AND
	event_attribute_value.value = '".$event_type."' UNION
SELECT event_location.event, event_activity.value
	FROM event_attribute_value AS event_location, event_attribute_value AS event_time, event_attribute_value AS event_activity, attribute_name as location_attribute_name, attribute_name as time_attribute_name
	WHERE event_location.attribute = location_attribute_name.attribute AND
	location_attribute_name.name = 'location' AND
	event_location.value = '".$location."' AND
	event_location.event = event_time.event AND
	event_time.attribute = time_attribute_name.attribute AND
	(time_attribute_name.name = 'start_time' OR time_attribute_name.name = 'end_time') AND
	event_time.value LIKE '".$year."%' AND
	event_activity.event = event_location.event AND
	event_activity.attribute = 'activity' AND
event_activity.value = '".$event_type."') as result_table
	GROUP BY result_table.value;";
	
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[$record->value] =  array_unique(explode(',',$record->events));
	}
	
	return $output;	
}

function get_all_temporal_events_for_story_event_type($story, $event_type = 'award_nomination') {
	$query = "SELECT GROUP_CONCAT(event_table.event) as events, event_table.value FROM event_attribute_value as value_table, event_attribute_value as event_table,query_tag, event_attribute_value as time_table, attribute_name, event_attribute_value as activity_table WHERE
	query_tag.id = '".$story."' AND
	query_tag.tag = value_table.value AND
	value_table.event = event_table.event AND
	event_table.attribute = 'activity' AND
activity_table.event = event_table.event AND 
activity_table.attribute = 'activity' AND
activity_table.value = '".$event_type."' AND
time_table.event = event_table.event AND 
time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')
	GROUP BY event_table.value;";
	$result = db_query($query);

	$output = array();
	foreach ($result as $record) {
		$output[$record->value] =  array_unique(explode(',',$record->events));
	}

	//if tag is itself an event
	$query = "SELECT DISTINCT event_table.event, attribute_table.value
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name, event_attribute_value as attribute_table
WHERE query_tag.id = '".$story."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
attribute_table.value = '".$event_type."' AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	foreach ($result as $record) {
		if(isset($output[$record->value])) {
			$output[$record->value] = array_unique(array_merge($output[$record->value], array($record->event)));
		}
		else {
			$output[$record->value] = array($record->event);
		}
	}
	return $output;
}

function get_all_temporal_events_for_story($story) {//***here
	$query = "SELECT GROUP_CONCAT(event_table.event) as events, event_table.value FROM event_attribute_value as value_table, event_attribute_value as event_table,query_tag, event_attribute_value as time_table, attribute_name WHERE
	query_tag.id = '".$story."' AND
	query_tag.tag = value_table.value AND
	value_table.event = event_table.event AND
	event_table.attribute = 'activity' AND
time_table.event = event_table.event AND 
time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')
	GROUP BY event_table.value;";
	$result = db_query($query);

	$output = array();
	foreach ($result as $record) {
		$output[$record->value] =  array_unique(explode(',',$record->events));
	}

	//if tag is itself an event
	$query = "SELECT DISTINCT event_table.event, attribute_table.value
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name, event_attribute_value as attribute_table
WHERE query_tag.id = '".$story."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	foreach ($result as $record) {
		if(isset($output[$record->value])) {
			$output[$record->value] = array_unique(array_merge($output[$record->value], array($record->event)));
		}
		else {
			$output[$record->value] = array($record->event);
		}
	}	
	return $output;
}

function get_tags_names_for_a_story($story) {
	$query = "SELECT query_tag.tag, tag_name.name FROM query_tag 
LEFT JOIN tag_name ON query_tag.tag = tag_name.tag
WHERE query_tag.id = '".$story."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = array($record->tag, $record->name);
	}

	return $output;
}

function get_all_events_for_setting($location, $year, $end = 0) {//*****here
	if($end) {
		$end_date = $end.'-12-31';
		$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM 
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
	location_attribute_name.name = 'location' AND
	event_location.value = '".$location."' AND
	event_activity.event = event_location.event AND
	event_activity.attribute = 'activity' AND
	event_location.event = event_start_time.event AND
	event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time') as start_location_result
LEFT JOIN 
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
	location2_attribute_name.name = 'location' AND
	event_location2.value = '".$location."' AND
	event_location2.event = event_end_time.event AND
	event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time <= '".$end_date."' AND start_end_location_result.start_time >= '".$year."' AND start_end_location_result.end_time IS NULL) OR
(start_end_location_result.start_time <= '".$end_date."' AND start_end_location_result.end_time >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."-".$end."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity') as combined_result
GROUP BY combined_result.activity;";
		$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(
SELECT events_table.event, events_table.location, event_start_table.start_time, events_table.activity
FROM 
(SELECT DISTINCT event_location.event, event_location.value as location, event_activity.value as activity
FROM event_attribute_value as event_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = '".$location."' AND
     event_location.event = event_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND 
     ((event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') OR (event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time'))) events_table
LEFT JOIN 
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = '".$location."' AND
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time')
as event_start_table ON event_start_table.event = events_table.event) as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
	location2_attribute_name.name = 'location' AND
	event_location2.value = '".$location."' AND
	event_location2.event = event_end_time.event AND
	event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time <= '".$year."' AND start_end_location_result.start_time >= '".$year."' AND start_end_location_result.end_time IS NULL) OR
		(start_end_location_result.end_time <= '".$year."' AND start_end_location_result.end_time >= '".$year."' AND start_end_location_result.start_time IS NULL) OR
(start_end_location_result.start_time <= '".$year."' AND start_end_location_result.end_time >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."-".$end."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity') as combined_result
GROUP BY combined_result.activity;";
	}
	else {
		$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = '".$location."' AND
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time') as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
     location2_attribute_name.name = 'location' AND
     event_location2.value = '".$location."' AND
     event_location2.event = event_end_time.event AND
     event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (SUBSTRING(start_end_location_result.start_time, 1, 4) = '".$year."' AND start_end_location_result.end_time IS NULL) OR
(SUBSTRING(start_end_location_result.start_time, 1, 4) <= '".$year."' AND SUBSTRING(start_end_location_result.end_time, 1, 4)  >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity') as combined_result
GROUP BY combined_result.activity;";
		$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM (			
SELECT events_table.event, events_table.location, event_start_table.start_time, events_table.activity
FROM 
(SELECT DISTINCT event_location.event, event_location.value as location, event_activity.value as activity
FROM event_attribute_value as event_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = '".$location."' AND
     event_location.event = event_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND 
     ((event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') OR (event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time'))) events_table
LEFT JOIN 
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = '".$location."' AND
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time')
as event_start_table ON event_start_table.event = events_table.event) as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
     location2_attribute_name.name = 'location' AND
     event_location2.value = '".$location."' AND
     event_location2.event = event_end_time.event AND
     event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (SUBSTRING(start_end_location_result.start_time, 1, 4) = '".$year."' AND start_end_location_result.end_time IS NULL) OR
		(SUBSTRING(start_end_location_result.end_time, 1, 4) = '".$year."' AND start_end_location_result.start_time IS NULL) OR
(SUBSTRING(start_end_location_result.start_time, 1, 4) <= '".$year."' AND SUBSTRING(start_end_location_result.end_time, 1, 4)  >= '".$year."')
UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity') as combined_result
GROUP BY combined_result.activity;";
		
	}

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[$record->activity] =  array_unique(explode(',',$record->events));
	}

	return $output;
}

function get_all_events_for_setting_old($location, $year, $end = 0) {
	if($end) {
		$year_field = $year."-".$end;
	}
	else {
		$year_field = $year;
	}
	$query = "SELECT GROUP_CONCAT(result_table.event) as events, result_table.value FROM
	(SELECT setting_link_event_id.event_id AS event, event_attribute_value.value FROM setting_link_event_id, event_attribute_value
	WHERE setting_link_event_id.location = '".$location."' AND
	setting_link_event_id.year = '".$year_field."' AND
	event_attribute_value.event = setting_link_event_id.event_id AND
	event_attribute_value.attribute = 'activity' UNION
	SELECT event_location.event, event_activity.value
	FROM event_attribute_value AS event_location, event_attribute_value AS event_time, event_attribute_value AS event_activity, attribute_name as location_attribute_name, attribute_name as time_attribute_name
	WHERE event_location.attribute = location_attribute_name.attribute AND
	location_attribute_name.name = 'location' AND
	event_location.value = '".$location."' AND
	event_location.event = event_time.event AND
	event_time.attribute = time_attribute_name.attribute AND
	(time_attribute_name.name = 'start_time' OR time_attribute_name.name = 'end_time') AND
	event_time.value LIKE '".$year."%' AND
	event_activity.event = event_location.event AND
	event_activity.attribute = 'activity') as result_table
	GROUP BY result_table.value;";

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[$record->value] =  array_unique(explode(',',$record->events));
	}

	return $output;	
}

function get_all_events_for_story($story) {//***here
	$query = "SELECT GROUP_CONCAT(event_table.event) as events, event_table.value FROM event_attribute_value as value_table, event_attribute_value as event_table,query_tag WHERE
	query_tag.id = '".$story."' AND
	query_tag.tag = value_table.value AND
	value_table.event = event_table.event AND
	event_table.attribute = 'activity'
			GROUP BY event_table.value;";
	
	$query = "SELECT GROUP_CONCAT(event_table.event) as events, event_table.value FROM event_attribute_value as value_table, event_attribute_value as event_table,query_tag, tag_name WHERE
	query_tag.id = '".$story."' AND
	query_tag.tag = value_table.value AND
	value_table.event = event_table.event AND
	event_table.attribute = 'activity' AND
	query_tag.tag = tag_name.tag
	GROUP BY event_table.value;";
	
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[$record->value] =  array_unique(explode(',',$record->events));
	}

	//if tag is itself an event
	$query = "SELECT DISTINCT event_table.event, attribute_table.value
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name, event_attribute_value as attribute_table
WHERE query_tag.id = '".$story."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	foreach ($result as $record) {
		if(isset($output[$record->value])) {
 			$output[$record->value] = array_unique(array_merge($output[$record->value], array($record->event)));
		}
		else {
 			$output[$record->value] = array($record->event);
		}
	}

	return $output;
}

function get_related_events_for_story($story) {

// 	$query = "SELECT event_attribute_value.event
// 	FROM event_attribute_value, query_tag
// 	WHERE query_tag.id = '".$story."' AND
// 	query_tag.tag = event_attribute_value.value AND
// 	NOT EXISTS (SELECT event_attribute_value.event
// 	FROM tag_link_event_id WHERE
// 	tag_link_event_id.tag = '".$story."' AND
// 	event_attribute_value.event = tag_link_event_id.event_id);";

	$query = "SELECT event_attribute_value.event
	FROM event_attribute_value, query_tag
	WHERE query_tag.id = '".$story."' AND
	query_tag.tag = event_attribute_value.value AND
	NOT EXISTS (SELECT tag_link_event_id.link, tag_link_event_id.event_id
	FROM tag_link_event_id, query_tag
	WHERE query_tag.id = '".$story."' AND
	query_tag.tag = tag_link_event_id.tag ORDER BY tag_link_event_id.link);";
	
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}
	
	return $output;
	
}

function get_related_events_for_tag2($topic) {
	//can use like to get partial dates. needs improving TOTO
	$query = "SELECT value_table.event, activity_table.value
	FROM event_attribute_value as value_table, event_attribute_value as activity_table 
	WHERE value_table.value = '".$topic."' AND
	value_table.event = activity_table.event AND
	activity_table.attribute = 'activity' AND 
	NOT EXISTS (SELECT value_table.event
	FROM tag_link_event_id WHERE
	tag_link_event_id.tag = '".$topic."' AND
	value_table.event = tag_link_event_id.event_id);";
	$result = db_query($query);

	$output = array();
	foreach ($result as $record) {
		if(isset($output[$record->value])) {
			$output[$record->value][] = $record->event;
		}
		else {
			$output[$record->value] = array($record->event);
		}
	}

	return $output;
}

function get_related_events_for_tag($topic) {
	//can use like to get partial dates. needs improving TOTO
	$query = "SELECT event_attribute_value.event
	FROM event_attribute_value
	WHERE event_attribute_value.value = '".$topic."' AND
	NOT EXISTS (SELECT event_attribute_value.event
	FROM tag_link_event_id WHERE
	tag_link_event_id.tag = '".$topic."' AND
	event_attribute_value.event = tag_link_event_id.event_id);";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	return $output;
}

function get_n_matching_settings_for_a_story2($story, $n = 5) {//*****here
	$query = "SELECT COUNT(DISTINCT event_location_start.tag) as tags, COUNT(DISTINCT event_location_start.event) as frequency, event_location_start.location, SUBSTRING(event_location_start.start,1,4) as start, SUBSTRING(event_end.end,1,4) as end, tag_name.name 
FROM query_tag as q, tag_name,
(SELECT query_tag.tag, event_attribute_value.event, location_table.value as location, start_table.value as start
FROM query_tag, event_attribute_value, event_attribute_value as location_table, event_attribute_value as start_table, attribute_name as location_attribute_name, attribute_name as time_attribute_name, tag_name
WHERE query_tag.id = '".$story."' AND 
query_tag.tag = tag_name.tag AND
(event_attribute_value.value = query_tag.tag OR event_attribute_value.event = query_tag.tag) AND 
event_attribute_value.event = location_table.event AND
event_attribute_value.event = start_table.event AND
location_table.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
start_table.attribute = time_attribute_name.attribute AND 
time_attribute_name.name = 'start_time') as event_location_start
LEFT JOIN 
(SELECT event_attribute_value.event, end_table.value as end
FROM query_tag, event_attribute_value, event_attribute_value as end_table, attribute_name as time_attribute_name
WHERE query_tag.id = '".$story."' AND 
(event_attribute_value.value = query_tag.tag OR event_attribute_value.event = query_tag.tag) AND 
event_attribute_value.event = end_table.event AND
end_table.attribute = time_attribute_name.attribute AND 
time_attribute_name.name = 'end_time') as event_end ON event_location_start.event = event_end.event
WHERE q.id = '".$story."' AND 
(event_location_start.location = q.tag OR SUBSTRING(event_location_start.start,1,4) = q.tag OR SUBSTRING(event_end.end,1,4) = q.tag) AND
tag_name.tag = event_location_start.location
GROUP BY event_location_start.location, event_location_start.start, event_end.end
ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";

	$output = array();
	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;
}

function get_n_matching_settings_for_a_story($story, $n = 5) {
	$query = "SELECT result.location, result.time, tag_name.name FROM tag_name, 
(SELECT location_table.value as location, time_table.value as time, COUNT(*) as frequency
FROM event_attribute_value, query_tag, event_attribute_value AS location_table, attribute_name as location_attribute_name, event_attribute_value AS time_table, attribute_name as time_attribute_name 
WHERE query_tag.id = '".$story."' AND 
event_attribute_value.value = query_tag.tag AND
event_attribute_value.event = location_table.event AND
location_table.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_attribute_value.event = time_table.event AND 
time_table.attribute = time_attribute_name.attribute AND 
(time_attribute_name.name = 'start_time' OR time_attribute_name.name = 'end_time') AND EXISTS (SELECT query_tag.tag 
	FROM query_tag 
	WHERE query_tag.id = '".$story."' AND 
	(location_table.value = query_tag.tag OR 
	time_table.value = query_tag.tag))
GROUP BY location_table.value, time_table.value 
ORDER BY frequency DESC) as result 
WHERE result.location = tag_name.tag LIMIT ".$n.";";

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$record->time = substr($record->time,0,4);
		if(isset($output[$record->location.'-'.$record->time])) {
			$prev = $output[$record->location.'-'.$record->time];
			$record->count = $prev->count + 1;
		}
		else {
			$record->count = 1;
		}
		$output[$record->location.'-'.$record->time] = $record;
			
	}

	uasort($output, 'setting_frequency');
	if(count($output) > $n) {
		$output = array_slice($output, 0, $n);
	}
	
	return $output;
}

function get_n_nonmatching_settings_for_a_story2($story, $n = 5) {///**here
	$query = "SELECT COUNT(DISTINCT event_location_start.tag) as tags, COUNT(DISTINCT event_location_start.event) as frequency, event_location_start.location, SUBSTRING(event_location_start.start,1,4) as start, SUBSTRING(event_end.end,1,4) as end, tag_name.name 
FROM tag_name,
(SELECT query_tag.tag, event_attribute_value.event, location_table.value as location, start_table.value as start
FROM query_tag, event_attribute_value, event_attribute_value as location_table, event_attribute_value as start_table, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE query_tag.id = '".$story."' AND 
(event_attribute_value.value = query_tag.tag OR event_attribute_value.event = query_tag.tag) AND 
event_attribute_value.event = location_table.event AND
event_attribute_value.event = start_table.event AND
location_table.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
start_table.attribute = time_attribute_name.attribute AND 
time_attribute_name.name = 'start_time') as event_location_start
LEFT JOIN 
(SELECT event_attribute_value.event, end_table.value as end
FROM query_tag, event_attribute_value, event_attribute_value as end_table, attribute_name as time_attribute_name
WHERE query_tag.id = '".$story."' AND 
(event_attribute_value.value = query_tag.tag OR event_attribute_value.event = query_tag.tag) AND 
event_attribute_value.event = end_table.event AND
end_table.attribute = time_attribute_name.attribute AND 
time_attribute_name.name = 'end_time') as event_end ON event_location_start.event = event_end.event
WHERE event_location_start.location = tag_name.tag AND NOT EXISTS (SELECT q.tag FROM  query_tag as q WHERE
q.id = '".$story."' AND 
(event_location_start.location = q.tag OR SUBSTRING(event_location_start.start,1,4) = q.tag OR SUBSTRING(event_end.end,1,4) = q.tag))
GROUP BY event_location_start.location, event_location_start.start, event_end.end
ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";
	$output = array();
	$result = db_query($query);
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;	
}

function get_n_nonmatching_settings_for_a_story($story, $n = 5) {
	$query = "SELECT result.location, result.time, tag_name.name FROM tag_name, 
(SELECT location_table.value as location, time_table.value as time, COUNT(*) as frequency
FROM event_attribute_value, query_tag, event_attribute_value AS location_table, attribute_name as location_attribute_name, event_attribute_value AS time_table, attribute_name as time_attribute_name 
WHERE query_tag.id = '".$story."' AND 
event_attribute_value.value = query_tag.tag AND
event_attribute_value.event = location_table.event AND
location_table.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_attribute_value.event = time_table.event AND 
time_table.attribute = time_attribute_name.attribute AND 
(time_attribute_name.name = 'start_time' OR time_attribute_name.name = 'end_time') AND NOT EXISTS (SELECT query_tag.tag 
	FROM query_tag 
	WHERE query_tag.id = '".$story."' AND 
	(location_table.value = query_tag.tag OR 
	time_table.value = query_tag.tag))
GROUP BY location_table.value, time_table.value 
ORDER BY frequency DESC) as result 
WHERE result.location = tag_name.tag LIMIT ".$n.";";

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$record->time = substr($record->time,0,4);
		if(isset($output[$record->location.'-'.$record->time])) {
			$prev = $output[$record->location.'-'.$record->time];
			$record->count = $prev->count + 1;
		}
		else {
			$record->count = 1;
		}
		$output[$record->location.'-'.$record->time] = $record;
			
	}
	
	uasort($output, 'setting_frequency');
	if(count($output) > $n) {
		$output = array_slice($output, 0, $n);
	}
	
	return $output;
}

function get_n_settings_for_a_tag($topic, $n = 5) {//***here

// 	$query = "SELECT result.location, result.time, tag_name.name FROM tag_name, 
// (SELECT location_table.value as location, time_table.value as time, COUNT(*) as frequency
// FROM event_attribute_value, event_attribute_value AS location_table, attribute_name as location_attribute_name, event_attribute_value AS time_table, attribute_name as time_attribute_name 
// WHERE event_attribute_value.value = '".$topic."' AND
// event_attribute_value.event = location_table.event AND
// location_table.attribute = location_attribute_name.attribute AND
// location_attribute_name.name = 'location' AND
// event_attribute_value.event = time_table.event AND 
// time_table.attribute = time_attribute_name.attribute AND 
// (time_attribute_name.name = 'start_time' OR time_attribute_name.name = 'end_time') 
// GROUP BY location_table.value, time_table.value 
// ORDER BY frequency DESC) as result 
// WHERE result.location = tag_name.tag; LIMIT ".$n.";";
	
	$query = "SELECT event_name_start_table.event, event_name_start_table.location, event_name_start_table.name, event_name_start_table.start_time, event_end_table.end_time
FROM
(SELECT events_name_table.event, events_name_table.location, events_name_table.name, event_start_table.start_time
FROM
(SELECT events_table.event, events_table.location, tag_name.name
FROM
(SELECT DISTINCT event_value.event, event_location.value as location
FROM event_attribute_value as event_value, event_attribute_value as event_location, event_attribute_value as event_time, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE (event_value.value = '".$topic."' OR event_value.event = '".$topic."') AND 
event_value.event = event_location.event AND
event_location.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_value.event = event_time.event AND
((event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') OR (event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time'))) as events_table
LEFT JOIN tag_name ON events_table.location = tag_name.tag) as events_name_table
LEFT JOIN
(SELECT event_value.event, event_time.value as start_time
FROM event_attribute_value as event_value, event_attribute_value as event_location, event_attribute_value as event_time, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE (event_value.value = '".$topic."' OR event_value.event = '".$topic."') AND 
event_value.event = event_location.event AND
event_location.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_value.event = event_time.event AND
event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') as event_start_table ON event_start_table.event = events_name_table.event) as event_name_start_table
JOIN
(SELECT event_value.event, event_time.value as end_time
FROM event_attribute_value as event_value, event_attribute_value as event_location, event_attribute_value as event_time, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE (event_value.value = '".$topic."' OR event_value.event = '".$topic."') AND 
event_value.event = event_location.event AND
event_location.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_value.event = event_time.event AND
event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time') as event_end_table ON event_end_table.event = event_name_start_table.event;";
	$result = db_query($query);

	$output = array();
	foreach ($result as $record) {
		if($record->start_time && $record->end_time) {
			$record->start_time = substr($record->start_time,0,4);
			$record->end_time = substr($record->end_time,0,4);
			if(isset($output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['count'])) {
				$output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['count'] = $output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['count'] +1;
			}
			else {
				$output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['count'] = 1;
				$output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['start_time'] = $record->start_time;
				$output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['end_time'] = $record->end_time;
				$output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['location'] = $record->location;
				$output[$record->location.'-'.$record->start_time.'-'.$record->end_time]['name'] = $record->name;
			}
		}
		elseif($record->start_time) {
			$record->start_time = substr($record->start_time,0,4);
			if(isset($output[$record->location.'-'.$record->start_time]['count'])) {
				$record->start_time = substr($record->start_time,0,4);
				$output[$record->location.'-'.$record->start_time]['count'] = $output[$record->location.'-'.$record->start_time]['count'] +1;
			}
			else {
				$output[$record->location.'-'.$record->start_time]['count'] = 1;
				$output[$record->location.'-'.$record->start_time]['start_time'] = $record->start_time;
				$output[$record->location.'-'.$record->start_time]['location'] = $record->location;
				$output[$record->location.'-'.$record->start_time]['name'] = $record->name;
			}			
		}
		elseif($record->end_time) {
			$record->end_time = substr($record->end_time,0,4);
			if(isset($output[$record->location.'-'.$record->end_time]['count'])) {
				$record->end_time = substr($record->end_time,0,4);
				$output[$record->location.'-'.$record->end_time]['count'] = $output[$record->location.'-'.$record->end_time]['count'] +1;
			}
			else {
				$output[$record->location.'-'.$record->end_time]['count'] = 1;
				$output[$record->location.'-'.$record->end_time]['start_time'] = $record->end_time;
				$output[$record->location.'-'.$record->end_time]['location'] = $record->location;
				$output[$record->location.'-'.$record->end_time]['name'] = $record->name;
			}			
		}
	}

// 		$record->time = substr($record->time,0,4);
// 		if(isset($output[$record->location.'-'.$record->time])) {
// 			$prev = $output[$record->location.'-'.$record->time];
// 			$record->count = $prev->count + 1;
// 		}
// 		else {
// 			$record->count = 1;
// 		}
// 		$output[$record->location.'-'.$record->time] = $record;
			
// 	}

	uasort($output, 'setting_count_frequency');
	if(count($output) > $n) {
		$output = array_slice($output, 0, $n);
	}

	return $output;		
}

function setting_count_frequency($a, $b) {
	if($a['count'] == $b['count']) {
		return 0;
	}
	return ($a['count'] > $b['count']) ? -1 : 1;
}

function setting_frequency($a, $b) {
	if($a->count == $b->count) {
		return 0;
	}
	return ($a->count > $b->count) ? -1 : 1;
}

function get_tag_attribute_id_values($tag_attribute_id) {
	$query = "SELECT * FROM tag_attribute_id_value WHERE tag_attribute_id = '".$tag_attribute_id."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->value;
	}
	return $output;	
}

function get_triple_ids_of_a_tag($topic) {
	$query = "SELECT * FROM tag_attribute WHERE tag = '".$topic."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;
}

function get_triples_of_a_tag($topic) {
	$query = "SELECT * FROM tag_triple WHERE tag = '".$topic."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;
}

function top_n_themes($n = 5) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}
	$query = "SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name 
			 FROM event_attribute_value, tag_name WHERE event_attribute_value.value = tag_name.tag group by value 
			ORDER BY frequency DESC LIMIT ".$n.";";

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
}

function top_n_themes_of_tag($tag = '/m/01qwfk', $n = 5) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}
	
	//query based on event connections from tags
	$query = "SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name 
			FROM event_attribute_value, tag_name, tag_link_event_id 
			WHERE tag_link_event_id.tag = :tag AND tag_link_event_id.event_id = event_attribute_value.event 
					AND event_attribute_value.value = tag_name.tag group by value ORDER BY frequency DESC LIMIT ".$n." ;";
		
	//query based on value in events
	$query = "SELECT value_table.value, COUNT(value_table.value) as frequency, tag_name.name 
			FROM event_attribute_value as event_table, event_attribute_value as value_table, tag_name 
			WHERE event_table.value = :tag AND event_table.event = value_table.event AND
				value_table.value = tag_name.tag group by value ORDER BY frequency DESC LIMIT ".$n." ;";
	
	
	//query based on value in events and direct properties of the tag
	$query = "SELECT * FROM (SELECT result.tag as value, COUNT(result.tag) as frequency, result.name
FROM tag_name as result,
(SELECT tag_name.tag
FROM tag_attribute, tag_attribute_id_value, tag_name 
WHERE tag_name.tag = tag_name.tag AND tag_attribute.tag = :tag AND 
tag_attribute.id = tag_attribute_id_value.tag_attribute_id and
tag_name.tag = tag_attribute_id_value.value
UNION ALL 
SELECT tag_name.tag 
FROM event_attribute_value as event_table, event_attribute_value as value_table, tag_name   
WHERE event_table.value = :tag AND event_table.event = value_table.event AND
tag_name.tag = value_table.value) as data
WHERE result.tag = data.tag AND NOT(result.tag = :tag)
GROUP BY result.tag
ORDER BY frequency DESC) as frequency
WHERE frequency > 1 LIMIT ".$n." ;";
	
	$result = db_query($query, array(':tag' => $tag));
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;	
}

function top_n_matching_themes_of_story($story = 9, $n = 5) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}
	$n = (int) $n;
	if($n == 0) {
		$n = 9;
	}

	$query = "SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name
		FROM event_attribute_value, tag_name, tag_link_event_id, query_tag as qt
		WHERE qt.id = :story AND
		qt.tag = tag_link_event_id.tag
		AND tag_link_event_id.event_id = event_attribute_value.event
		AND event_attribute_value.value = tag_name.tag
		AND EXISTS (SELECT query_tag.tag FROM query_tag WHERE event_attribute_value.value = query_tag.tag)
		group by value ORDER BY frequency DESC LIMIT ".$n." ;";
	$query = "SELECT COUNT(DISTINCT result.tag) as frequency, result.value, tag_name.name
FROM tag_name, 
(SELECT query_tag.tag, value_table.value   
FROM query_tag, event_attribute_value as query_table, event_attribute_value as value_table
WHERE query_tag.id = :story AND
query_tag.tag = query_table.value AND
query_table.event = value_table.event
UNION ALL
SELECT  query_tag.tag, tag_attribute_id_value.value
FROM tag_attribute, tag_attribute_id_value, query_tag
WHERE query_tag.id = :story AND
tag_attribute.tag = query_tag.tag AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id) as result
WHERE result.value = tag_name.tag AND
 EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = :story AND qt.tag = result.value)
GROUP BY result.value
ORDER BY frequency DESC LIMIT ".$n." ;";
	$query = "SELECT COUNT(DISTINCT result.tag) as frequency, result.value, tag_name.name
FROM  
(SELECT query_tag.tag, value_table.value   
FROM query_tag, event_attribute_value as query_table, event_attribute_value as value_table
WHERE query_tag.id = :story AND
query_tag.tag = query_table.value AND
query_table.event = value_table.event
UNION ALL
SELECT  query_tag.tag, tag_attribute_id_value.value
FROM tag_attribute, tag_attribute_id_value, query_tag
WHERE query_tag.id = :story AND
tag_attribute.tag = query_tag.tag AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id) as result
LEFT JOIN tag_name ON  tag_name.tag = result.value
WHERE 
 EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = :story AND qt.tag = result.value)
GROUP BY result.value
ORDER BY frequency DESC LIMIT ".$n." ;";
	
	$query = "SELECT COUNT(DISTINCT result.tag) as tags, COUNT(DISTINCT result.event) as frequency, result.value, tag_name.name
FROM  
(SELECT query_tag.tag, value_table.value, value_table.event   
FROM query_tag, event_attribute_value as query_table, event_attribute_value as value_table
WHERE query_tag.id = :story AND
query_tag.tag = query_table.value AND
query_table.event = value_table.event
UNION ALL
SELECT  query_tag.tag, tag_attribute_id_value.value, query_tag.tag as event
FROM tag_attribute, tag_attribute_id_value, query_tag
WHERE query_tag.id = :story AND
tag_attribute.tag = query_tag.tag AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id) as result
LEFT JOIN tag_name ON  tag_name.tag = result.value
WHERE 
 EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = :story AND qt.tag = result.value)
GROUP BY result.value
ORDER BY tags DESC, frequency DESC LIMIT ".$n." ;";
	$result = db_query($query, array(':story' => $story));
	
	$used_tags = array();
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
		$used_tags[] = $record->value;
	}

	$story_tags = get_tags_names_for_a_story($story);

	foreach($story_tags as $story_tag) {
		if(!in_array($story_tag['0'], $used_tags)) {
			if($story_tag['1']) {
				$out = new stdClass();
	    		$out->value = $story_tag['0'];
	    		$out->frequency = 0;
	    		$out->tags = 0;
	    		$out->name = $story_tag['1'];
	    		$output[] = $out;
			}
			else {
				$out = new stdClass();
				$out->value = FALSE;
				$out->frequency = 0;
				$out->tags = 0;
				$out->name = $story_tag['0'];
				$output[] = $out;				
			}
		}
	}

	return $output;
}


function top_n_nonmatching_themes_of_story($story = 9, $n = 5) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}
	$n = (int) $n;
	if($n == 0) {
		$n = 9;
	}
	$query = "SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name
		FROM event_attribute_value, tag_name, tag_link_event_id, query_tag as qt
		WHERE qt.id = :story AND
		qt.tag = tag_link_event_id.tag
		AND tag_link_event_id.event_id = event_attribute_value.event
		AND event_attribute_value.value = tag_name.tag
		AND NOT EXISTS (SELECT query_tag.tag FROM query_tag WHERE event_attribute_value.value = query_tag.tag)
		group by value ORDER BY frequency DESC LIMIT ".$n." ;";
	
	$query = "SELECT * FROM (SELECT COUNT(DISTINCT result.tag) as frequency, result.value, tag_name.name
FROM tag_name, 
(SELECT query_tag.tag, value_table.value   
FROM query_tag, event_attribute_value as query_table, event_attribute_value as value_table
WHERE query_tag.id = :story AND
query_tag.tag = query_table.value AND
query_table.event = value_table.event
UNION ALL
SELECT  query_tag.tag, tag_attribute_id_value.value
FROM tag_attribute, tag_attribute_id_value, query_tag
WHERE query_tag.id = :story AND
tag_attribute.tag = query_tag.tag AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id) as result
WHERE result.value = tag_name.tag AND
NOT EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = :story AND qt.tag = result.value)
GROUP BY result.value
ORDER BY frequency DESC) as frequency
WHERE frequency > 1 LIMIT ".$n." ;";

	$query = "SELECT COUNT(DISTINCT result.tag) as tags, COUNT(DISTINCT result.event) as frequency, result.value, tag_name.name
FROM  
(SELECT query_tag.tag, value_table.value, value_table.event   
FROM query_tag, event_attribute_value as query_table, event_attribute_value as value_table
WHERE query_tag.id = :story AND
query_tag.tag = query_table.value AND
query_table.event = value_table.event
UNION ALL
SELECT  query_tag.tag, tag_attribute_id_value.value, query_tag.tag as event
FROM tag_attribute, tag_attribute_id_value, query_tag
WHERE query_tag.id = :story AND
tag_attribute.tag = query_tag.tag AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id) as result
INNER JOIN tag_name ON  tag_name.tag = result.value
WHERE NOT 
 EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = :story AND qt.tag = result.value)
GROUP BY result.value
ORDER BY tags DESC, frequency DESC LIMIT ".$n." ;";
	
	$result = db_query($query, array(':story' => $story));
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}

	return $output;
}


function top_n_themes_of_story($story = 9, $n = 5) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}
	$n = (int) $n;
	if($n == 0) {
		$n = 9;
	}

	$query = "SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name
		FROM event_attribute_value, tag_name, tag_link_event_id, query_tag
		WHERE query_tag.id = :story AND
		query_tag.tag = tag_link_event_id.tag
		AND tag_link_event_id.event_id = event_attribute_value.event
		AND event_attribute_value.value = tag_name.tag
		group by value ORDER BY frequency DESC LIMIT ".$n." ;";
	$result = db_query($query, array(':story' => $story));
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;
}

function save_query_results($agent, $result_array) {

	$foo = array();

	//save to tag - event_id table
	$tag_query = db_insert('tag_event_id')->fields(array('tag', 'event_id'));
	$event_query = db_insert('event_slot_value')->fields(array('event_id', 'slot', 'value'));
	
	foreach($result_array as $key=>$value) {
		$foo[] = array('tag'=>$agent, 'event_id'=>$key);
		$tag_query->values(array('tag'=>$agent, 'event_id'=>$key));
		
		foreach($value as $value_key=>$value_value) {
			if(is_array($value_value)) {
				$value_value = implode(" ",$value_value);
			}
			$event_query->values(array('event_id'=>$key, 'slot'=>$value_key, 'value'=>$value_value));	
		}
	}
	$tag_query->execute();
	$event_query->execute();
	

		
}

// ALTER TABLE tag_notable_types
// ADD CONSTRAINT tt UNIQUE (tag, type);
function check_for_tag_types($topic = "/m/055rd2", $reload = FALSE) {
	if(!$reload) {
		$types = array();
		$types = get_tag_types($topic);
		if(!empty($types)) {
			return $types;
		}
	}
	//get types
	$types = find_fb_types_of_topic($topic);

	if(!empty($types)) {
		//add to database
		$values_list = '';
		foreach($types as $type) {
			$values_list .=", ('".$topic."', '".$type."')";
		}
		if($values_list == "") {
			return array();
		}
		$values_list = "VALUES".substr($values_list, 1)." ";

		$query = "INSERT INTO tag_types (tag, type) ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag), type = VALUES(type);";

		$result = db_query($query);
	}
	return $types;
}

function get_tag_types($topic) {
	$output = array();
	$query = "SELECT * FROM tag_types WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	foreach ($result as $record) {
		if(isset($record->type)) {
			$output[] = $record->type;
		}
	}
	return $output;
}
function find_fb_types_of_topic($topic = "/m/050_704") {
	$query = array(array(
  			"mid"=> $topic,
  			"type"=> (array(
  			))
  	));
	$results = execute_mql_event_query($query);
	if(isset($results["result"][0]["type"])) {
		return $results["result"][0]["type"];
	}
	else {
		return array();
	}
}

function fb_person_subject_of_exhibition($agent, $res = array()) {
	$query = array(array(
			"mid"=> "/m/01qwfk",
			"/award/award_nominee/award_nominations"=> array(array(
					"mid"=> null,
					"/award/award_nomination/year"=> array(
							"value"=> null
					),
					"/award/award_nomination/award"=> array(
							"mid"=> null
					),
					"/award/award_nomination/nominated_for"=> array(array(
							"mid"=> null
					))
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	// 	foreach($result_array as $result) {

	// 	}
	foreach($resultarray["result"][0]["/award/award_nominee/award_nominations"] as $result) {
		$output[$result["mid"]] = array(
				"award"=>$result["/award/award_nomination/award"]["mid"],
				"year"=>$result["/award/award_nomination/year"]["value"],
				"id"=>$result["mid"],
				"object"=>get_values($result["/award/award_nomination/nominated_for"])
		);
	}

}

function fb_person_producing_exhibition($agent, $res = array()) {
	$query = array(array(
			"mid"=> "/m/0f896_",
			"/exhibitions/exhibition_producer/exhibitions_produced"=> array(array(
					"/exhibitions/exhibition/venues"=> array(
							"mid"=> null,
							"/exhibitions/exhibition_run/opened_on"=> array(
									"value"=> null
							),
							"/exhibitions/exhibition_run/closed_on"=> array(
									"value"=> null
							),
							"/exhibitions/exhibition_run/venue"=> array(
									"mid"=> null
							),
							"/exhibitions/exhibition_run/exhibition"=> array(
									"mid"=> null
							)
					)
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_producer/exhibitions_produced"] as $result) {
		$output[$result["/exhibitions/exhibition/venues"]["mid"]] =
		array(	"agent"=>$agent,
				"venue"=>$result["/exhibitions/exhibition/venues"]["/exhibitions/exhibition_run/venue"]["mid"],
				"exhibition"=>$result["/exhibitions/exhibition/venues"]["/exhibitions/exhibition_run/exhibition"]["mid"],
				"start_date"=>$result["/exhibitions/exhibition/venues"]["/exhibitions/exhibition_run/opened_on"]["value"],
				"end_date"=>$result["/exhibitions/exhibition/venues"]["/exhibitions/exhibition_run/closed_on"]["value"],
		);
	}

}

function fb_person_acquiring_object_event($agent, $res = array()) {
	$query = array(array(
			"mid"=> "/m/0c9h4",
			"/visual_art/art_owner/artworks_owned"=> array(array(
					"mid"=> null,
					"artwork"=> array(
							"mid"=> null
					),
					"date_acquired"=> array(
							"value"=> null,
							"optional"=> "optional"
					),
					"last_date_owned"=> array(
							"value"=> null,
							"optional"=> "optional"
					)
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	// 	foreach($result_array as $result) {

	// 	}
	foreach($resultarray["result"][0]["/visual_art/art_owner/artworks_owned"] as $result) {
		$output[$result["mid"]] = array(
				"award"=>$result["artwork"]["mid"],
				"start_date"=>$result["date_acquired"]["value"],
				"id"=>$result["mid"],
				"end_date"=>$result["last_date_owned"]["value"]
		);
	}

}

function fb_person_receiving_award($agent, $res = array()) {
	$query = array(array(
			"mid"=> "/m/01qwfk",
			"/award/award_winner/awards_won"=> array(array(
					"mid"=> null,
					"/award/award_honor/year"=> array(
							"value"=> null
					),
					"/award/award_honor/award"=> array(
							"mid"=> null
					),
					"/award/award_honor/honored_for"=> array(
							"mid"=> null
					)
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	// 	foreach($result_array as $result) {

	// 	}
	foreach($resultarray["result"][0]["/award/award_winner/awards_won"] as $result) {
		$output[$result["mid"]] = array(
				"award"=>$result["/award/award_honor/award"]["mid"],
				"year"=>$result["/award/award_honor/year"]["value"],
				"id"=>$result["mid"],
				"object"=>$result["/award/award_honor/honored_for"]["mid"]
		);
	}
	dpm($resultarray);
	dpm($output);
}

function fb_person_receiving_nomination($agent, $res = array()) {
	$query = array(array(
			"mid"=> "/m/01qwfk",
			"/award/award_nominee/award_nominations"=> array(array(
					"mid"=> null,
					"/award/award_nomination/year"=> array(
							"value"=> null
					),
					"/award/award_nomination/award"=> array(
							"mid"=> null
					),
					"/award/award_nomination/nominated_for"=> array(array(
							"mid"=> null
					))
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	// 	foreach($result_array as $result) {

	// 	}
	foreach($resultarray["result"][0]["/award/award_nominee/award_nominations"] as $result) {
		$output[$result["mid"]] = array(
				"award"=>$result["/award/award_nomination/award"]["mid"],
				"year"=>$result["/award/award_nomination/year"]["value"],
				"id"=>$result["mid"],
				"object"=>get_values($result["/award/award_nomination/nominated_for"])
		);
	}
	dpm($output);
}

//get_topic_name_pairs(array('/education/education/student','/education/education/institution','/education/education/degree','/education/education/specialization','/education/education/minor'),$result);
function get_topic_name_pairs($key_array,$result,$previous = array()) {
	$topic_name_pairs = array();
	foreach($key_array as $key) {
		if(isset($result[$key])) {
			if(isset($result[$key]['mid']) && isset($result[$key]['name'])) {
				$topic_name_pairs[$result[$key]['mid']] = $result[$key]['name'];
			}
			elseif(is_array($result[$key])) {
				foreach($result[$key] as $item) {
					if(isset($item['mid']) && isset($item['name'])) {
						$topic_name_pairs[$item['mid']] = $item['name'];
					}
				}
			}
		}
	}

	return array_merge($topic_name_pairs,$previous);
}


function add_top_level_pair($result, $topic_name_pairs) {
	if(isset($result["mid"]) && isset($result["name"])) {
		$topic_name_pairs[$result["mid"]] = $result["name"];
	}
	return $topic_name_pairs;
}

function fb_person_studying($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/people/person/education"=> array(array(
    "mid"=> null,
    "name"=> null,
    "/education/education/student"=> array(
      "mid"=> null,
      "name"=> null
    ),
    "/education/education/institution"=> array(
      "mid"=> null,
      "name"=> null
    ),
    "/education/education/start_date"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/education/education/end_date"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/education/education/degree"=> array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    ),
    "/education/education/major_field_of_study"=> array(array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    )),
    "/education/education/specialization"=> array(array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    )),
    "/education/education/minor"=> array(array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/people/person/education"] as $result) {
		$output[$result["mid"]]["activity"] = "education";
		$output[$result["mid"]]["/education/education/student"] = $result["/education/education/student"]["mid"];
		$output[$result["mid"]]["/education/education/institution"] = $result["/education/education/institution"]["mid"];
		$output[$result["mid"]]["/education/education/start_date"] = $result["/education/education/start_date"]["value"];
		$output[$result["mid"]]["/education/education/end_date"] = $result["/education/education/end_date"]["value"];
		
		$output[$result["mid"]]["/education/education/degree"] = check_array_is_returned($result["/education/education/degree"]["mid"]);
		$output[$result["mid"]]["/education/education/specialization"] = get_values($result["/education/education/specialization"]);
		$output[$result["mid"]]["/education/education/minor"] = get_values($result["/education/education/minor"]);
		
// 		$output[$result["mid"]]["tags"] = array_merge(check_array_is_returned($result["/education/education/degree"]["mid"]),
// 			get_values($result["/education/education/specialization"]),
// 			get_values($result["/education/education/minor"]));

	
	$topic_name_pairs = get_topic_name_pairs(array('/education/education/student','/education/education/institution','/education/education/degree','/education/education/specialization','/education/education/minor'),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	$topic_event_links[] = array($topic, 'education history', $result["mid"]);
	
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_person_living_at_location($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/people/person/places_lived"=> array(array(
    "mid"=> null,
    "/people/place_lived/location"=> array(
      "name"=> null,
      "mid"=> null
    ),
    "/people/place_lived/person"=> array(
      "name"=> null,
      "mid"=> null
    ),
    "/people/place_lived/start_date"=> null,
    "/people/place_lived/end_date"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/people/person/places_lived"] as $result) {
		$output[$result["mid"]]["activity"] = "place_lived";
		$output[$result["mid"]]["/people/place_lived/location"] = $result["/people/place_lived/location"]["mid"];
		$output[$result["mid"]]["/people/place_lived/person"] = $result["/people/place_lived/person"]["mid"];
		$output[$result["mid"]]["/people/place_lived/start_date"] = $result["/people/place_lived/start_date"];
		$output[$result["mid"]]["/people/place_lived/end_date"] = $result["/people/place_lived/end_date"];

	$topic_name_pairs = get_topic_name_pairs(array('/people/place_lived/location','/people/place_lived/person'),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	$topic_event_links[] = array($topic, 'Places lived', $result["mid"]);
	
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_creating_object($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/visual_artist/artworks"=> array(array(
  		"name"=> null,
  		"mid"=> null,
    "/visual_art/artwork/artist"=> array(array(
      "name"=> null,
      "mid"=> null,
 //     "optional"=> "optional"
    )),
    "/visual_art/artwork/art_subject"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "mid"=> null,
    "/visual_art/artwork/date_begun"=> null,
    "/visual_art/artwork/date_completed"=> null,
    "/visual_art/artwork/art_form"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/art_genre"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/media"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/support"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/period_or_movement"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/locations"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/owners"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/editions"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/edition_of"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/belongs_to_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/visual_art/visual_artist/artworks"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] = 
// 			array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 					get_values($result["/visual_art/artwork/art_genre"]),
// 					get_values($result["/visual_art/artwork/media"]),
// 					get_values($result["/visual_art/artwork/support"]),
// 					get_values($result["/visual_art/artwork/period_or_movement"]),
// // 		removed because a pointer to a connecting node
// // 					get_values($result["/visual_art/artwork/locations"]),
// // 					get_values($result["/visual_art/artwork/owners"]),
// 					get_values($result["/visual_art/artwork/editions"]),
// 					get_values($result["/visual_art/artwork/edition_of"]),
// 					get_values($result["/visual_art/artwork/belongs_to_series"]),
// 					check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/media","/visual_art/artwork/support","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Objects created', $result["mid"]);

	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_publishing($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/book/author/works_written"=> array(array(
    "name"=> null,"mid"=> null,
    "/book/written_work/author"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/book/written_work/editor"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/date_of_first_publication"=> null,
    "/book/written_work/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/school_or_movement"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/part_of_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/previous_in_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/next_in_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/book/author/works_written"] as $result) {
		$output[$result["mid"]]["activity"] = "book_authoring";
		$output[$result["mid"]]["/book/written_work/author"] = get_values($result["/book/written_work/author"]);
		$output[$result["mid"]]["/book/written_work/editor"] = get_values($result["/book/written_work/editor"]);

		$output[$result["mid"]]["/book/written_work/date_of_first_publication"] = $result["/book/written_work/date_of_first_publication"];
		
		$output[$result["mid"]]["/book/written_work/school_or_movement"] = get_values($result["/book/written_work/school_or_movement"]);
		$output[$result["mid"]]["/book/written_work/part_of_series"] = get_values($result["/book/written_work/part_of_series"]);
		$output[$result["mid"]]["/book/written_work/previous_in_series"] = get_values($result["/book/written_work/previous_in_series"]);
		$output[$result["mid"]]["/book/written_work/next_in_series"] = get_values($result["/book/written_work/next_in_series"]);
		$output[$result["mid"]]["/book/written_work"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/book/written_work/school_or_movement"]),
// 				get_values($result["/book/written_work/part_of_series"]),
// 				get_values($result["/book/written_work/previous_in_series"]),
// 				get_values($result["/book/written_work/next_in_series"]),
// 				check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/book/written_work/author","/book/written_work/editor","/book/written_work/date_of_first_publication",
				"/book/written_work/school_or_movement","/book/written_work/part_of_series","/book/written_work/previous_in_series","/book/written_work/next_in_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Books authored', $result["mid"]);
		
		
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));	
}

function fb_topic_organization_member($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/organization/organization_member/member_of"=> array(array(
    "mid"=> null,
    "/organization/organization_membership/member"=> array(
      "name"=> null,"mid"=> null
    ),
    "/organization/organization_membership/organization"=> array(
      "name"=> null,"mid"=> null
    ),
    "/organization/organization_membership/from"=> null,
    "/organization/organization_membership/to"=> null
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/organization/organization_member/member_of"] as $result) {
		$output[$result["mid"]]["activity"] = "organization_membership";
		$output[$result["mid"]]["/organization/organization_membership/member"] = check_array_is_returned($result["/organization/organization_membership/member"]["mid"]);
		$output[$result["mid"]]["/organization/organization_membership/organization"] = check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]);
// 		array_merge(check_array_is_returned($result["/organization/organization_membership/member"]["mid"]),
// 				check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]));
		$output[$result["mid"]]["/organization/organization_membership/from"] = $result["/organization/organization_membership/from"];
		$output[$result["mid"]]["/organization/organization_membership/to"] = $result["/organization/organization_membership/to"];

		$topic_name_pairs = get_topic_name_pairs(array("/organization/organization_membership/member", "/organization/organization_membership/organization"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Membership of organizations', $result["mid"]);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_exhibition_producer($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition_producer/exhibitions_produced"=> array(array(
    "mid"=> null,"name"=> null,
    "/exhibitions/exhibition/produced_by"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/venues"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/exhibition_types"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_producer/exhibitions_produced"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";
		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// 				get_values($result["/exhibitions/exhibition/curators"]));
		
		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/exhibitions/exhibition/venues"]),
// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// 				get_values($result["/exhibitions/exhibition/exhibits"]),
// 				get_values($result["/exhibitions/exhibition/subjects"]),
// 				check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibition_types","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Exhibitions produced', $result["mid"]);
	
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_exhibition_curator($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition_curator/exhibitions_curated"=> array(array(
    "mid"=> null,
    "/exhibitions/exhibition/produced_by"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/venues"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/exhibition_types"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_curator/exhibitions_curated"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";
		
		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// 				get_values($result["/exhibitions/exhibition/curators"]));
		
		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/exhibitions/exhibition/venues"]),
// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// 				get_values($result["/exhibitions/exhibition/exhibits"]),
// 				get_values($result["/exhibitions/exhibition/subjects"]),
// 				check_array_is_returned($result["mid"]));
		

		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibition_types","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Exhibitions curated', $result["mid"]);
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_exhibition_subject($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"=> array(array(
  	"mid"=> null,
  	"name"=>null,
    "/exhibitions/exhibition/produced_by"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/venues"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/exhibition_types"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";
		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// 				get_values($result["/exhibitions/exhibition/curators"]));
		
		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/exhibitions/exhibition/venues"]),
// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// 				get_values($result["/exhibitions/exhibition/exhibits"]),
// 				get_values($result["/exhibitions/exhibition/subjects"]),
// 				check_array_is_returned($result["mid"]));
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibition_types","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Subject of exhibition', $result["mid"]);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_art_owner($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/art_owner/artworks_owned"=> array(array(
    "mid"=> null,
    "/visual_art/artwork_owner_relationship/owner"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/artwork"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/date_acquired"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/visual_art/artwork_owner_relationship/last_date_owned"=> array(
      "value"=> null,
      "optional"=> "optional"
    )
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/visual_art/art_owner/artworks_owned"] as $result) {
		$output[$result["mid"]]["activity"] = "object_ownership";
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/owner"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/owner"]["mid"]);
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/date_acquired"] = $result["/visual_art/artwork_owner_relationship/date_acquired"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/last_date_owned"] = $result["/visual_art/artwork_owner_relationship/last_date_owned"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/artwork"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/artwork"]["mid"]);

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork_owner_relationship/owner","/visual_art/artwork_owner_relationship/artwork"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Objects owned', $result["mid"]);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_award_winner($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/award/award_winner/awards_won"=> array(array(
    "mid"=> null,
    "/award/award_honor/year"=> null,
    "/award/award_honor/award"=> array(
      "name"=> null,"mid"=> null
    ),
    "/award/award_honor/honored_for"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/award/award_honor/award_winner"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_honor/ceremony"=> array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ),
    "/award/award_honor/achievement_level"=> array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_winner/awards_won"] as $result) {
		$output[$result["mid"]]["activity"] = "award_won";
		$output[$result["mid"]]["/award/award_honor/award_winner"] = get_values($result["/award/award_honor/award_winner"]);
		$output[$result["mid"]]["/award/award_honor/year"] = $result["/award/award_honor/year"];
		
		$output[$result["mid"]]["/award/award_honor/award"] = check_array_is_returned($result["/award/award_honor/award"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/honored_for"] = get_values($result["/award/award_honor/honored_for"]);
		$output[$result["mid"]]["/award/award_honor/ceremony"] = check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/achievement_level"] = check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]);
// 		$output[$result["mid"]]["tags"] = 
// 			array_merge(check_array_is_returned($result["/award/award_honor/award"]["mid"]),
// 				get_values($result["/award/award_honor/honored_for"]),
// 				check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]),
// 				check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_honor/award","/award/award_honor/honored_for","/award/award_honor/award_winner","/award/award_honor/ceremony","/award/award_honor/achievement_level"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Awards won', $result["mid"]);
	
	}
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_topic_award_nominee($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/award/award_nominee/award_nominations"=> array(array(
    "mid"=> null,
    "/award/award_nomination/year"=> array(
      "value"=> null
    ),
    "/award/award_nomination/award"=> array(
      "name"=> null,"mid"=> null
    ),
    "/award/award_nomination/nominated_for"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/award_nominee"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/ceremony"=> array(array(
      "name"=> null,"mid"=> null
    ))
  ))
));
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	
	$topic_event_links = array();
	$topic_name_pairs = array();
	foreach($resultarray["result"][0]["/award/award_nominee/award_nominations"] as $result) {
		$output[$result["mid"]]["activity"] = "award_nomination";
		$output[$result["mid"]]["/award/award_nomination/award_nominee"] = get_values($result["/award/award_nomination/award_nominee"]);
		$output[$result["mid"]]["/award/award_nomination/year"] = $result["/award/award_nomination/year"]["value"];
		
		$output[$result["mid"]]["/award/award_nomination/award"] = check_array_is_returned($result["/award/award_nomination/award"]["mid"]);
		$output[$result["mid"]]["/award/award_nomination/nominated_for"] = get_values($result["/award/award_nomination/nominated_for"]);
		$output[$result["mid"]]["/award/award_nomination/ceremony"] = get_values($result["/award/award_nomination/ceremony"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(check_array_is_returned($result["/award/award_nomination/award"]["mid"]),
// 				get_values($result["/award/award_nomination/nominated_for"]),
// 				get_values($result["/award/award_nomination/ceremony"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_nomination/award","/award/award_nomination/nominated_for","/award/award_nomination/award_nominee","/award/award_nomination/ceremony"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Award nominations', $result["mid"]);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_artwork_created($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "name"=> null,"mid"=> $topic,
  "type"=> "/visual_art/artwork",
  "/visual_art/artwork/artist"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/art_subject"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/date_begun"=> null,
  "/visual_art/artwork/date_completed"=> null,
  "/visual_art/artwork/art_form"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/art_genre"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/media"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/support"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/period_or_movement"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/locations"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/owners"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/editions"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/edition_of"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/belongs_to_series"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  ))
));
	
	$resultarray = execute_mql_event_query($query);
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();
	foreach($resultarray["result"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 				get_values($result["/visual_art/artwork/art_genre"]),
// 				get_values($result["/visual_art/artwork/media"]),
// 				get_values($result["/visual_art/artwork/support"]),
// 				get_values($result["/visual_art/artwork/period_or_movement"]),
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/visual_art/artwork/locations"]),
// // 				get_values($result["/visual_art/artwork/owners"]),
// 				get_values($result["/visual_art/artwork/editions"]),
// 				get_values($result["/visual_art/artwork/edition_of"]),
// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
// 				check_array_is_returned($result["mid"]));
	

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/media","/visual_art/artwork/support","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Object creation details', $result["mid"]);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
	
}

function fb_artwork_located($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "type"=> "/visual_art/artwork",
  "/visual_art/artwork/locations"=> array(array(
    "mid"=> null,
    "/visual_art/artwork_location_relationship/artwork"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_location_relationship/location"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_location_relationship/from"=> null,
    "/visual_art/artwork_location_relationship/to"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_event_links = array();
	$topic_name_pairs = array();
	foreach($resultarray["result"][0]["/visual_art/artwork/locations"] as $result) {
		$output[$result["mid"]]["activity"] = "object_location";
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/location"] = $result["/visual_art/artwork_location_relationship/location"]["mid"];
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/from"] = $result["/visual_art/artwork_location_relationship/from"];
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/to"] = $result["/visual_art/artwork_location_relationship/to"];
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/artwork"] = check_array_is_returned($result["/visual_art/artwork_location_relationship/artwork"]["mid"]);

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork_location_relationship/artwork","/visual_art/artwork_location_relationship/location"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Object locations', $result["mid"]);

	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));

}

function fb_object_owned($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/artwork/owners"=> array(array(
    "mid"=> null,
    "/visual_art/artwork_owner_relationship/owner"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/artwork"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/date_acquired"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/visual_art/artwork_owner_relationship/last_date_owned"=> array(
      "value"=> null,
      "optional"=> "optional"
    )
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();
	
	foreach($resultarray["result"][0]["/visual_art/artwork/owners"] as $result) {
		$output[$result["mid"]]["activity"] = "object_ownership";
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/owner"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/owner"]["mid"]);
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/date_acquired"] = $result["/visual_art/artwork_owner_relationship/date_acquired"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/last_date_owned"] = $result["/visual_art/artwork_owner_relationship/last_date_owned"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/artwork"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/artwork"]["mid"]);

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork_owner_relationship/owner","/visual_art/artwork_owner_relationship/artwork"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Object ownership history', $result["mid"]);

	}
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_object_award_nominated_work($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/award/award_nominated_work/award_nominations"=> array(array(
    "mid"=> null,
    "/award/award_nomination/year"=> array(
      "value"=> null
    ),
    "/award/award_nomination/award"=> array(
      "name"=> null,"mid"=> null
    ),
    "/award/award_nomination/nominated_for"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/award_nominee"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/ceremony"=> array(array(
      "name"=> null,"mid"=> null
    ))
  ))
));
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_nominated_work/award_nominations"] as $result) {
		$output[$result["mid"]]["activity"] = "award_nomination";
		$output[$result["mid"]]["/award/award_nomination/award_nominee"] = get_values($result["/award/award_nomination/award_nominee"]);
		$output[$result["mid"]]["/award/award_nomination/year"] = $result["/award/award_nomination/year"]["value"];
				
		$output[$result["mid"]]["/award/award_nomination/award"] = check_array_is_returned($result["/award/award_nomination/award"]["mid"]);
		$output[$result["mid"]]["/award/award_nomination/nominated_for"] = get_values($result["/award/award_nomination/nominated_for"]);
		$output[$result["mid"]]["/award/award_nomination/ceremony"] = get_values($result["/award/award_nomination/ceremony"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(check_array_is_returned($result["/award/award_nomination/award"]["mid"]),
// 				get_values($result["/award/award_nomination/nominated_for"]),
// 				get_values($result["/award/award_nomination/ceremony"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_nomination/award","/award/award_nomination/nominated_for","/award/award_nomination/award_nominee","/award/award_nomination/ceremony"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Award nominations for object', $result["mid"]);
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_object_award_winning_work($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/award/award_winning_work/awards_won"=> array(array(
					"mid"=> null,
					"/award/award_honor/year"=> null,
					"/award/award_honor/award"=> array(
							"name"=> null,"mid"=> null
					),
					"/award/award_honor/honored_for"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/award/award_honor/award_winner"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_honor/ceremony"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					),
					"/award/award_honor/achievement_level"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_winning_work/awards_won"] as $result) {
		$output[$result["mid"]]["activity"] = "award_won";
		$output[$result["mid"]]["/award/award_honor/award_winner"] = get_values($result["/award/award_honor/award_winner"]);
		$output[$result["mid"]]["/award/award_honor/year"] = $result["/award/award_honor/year"];
		
		$output[$result["mid"]]["/award/award_honor/award"] = check_array_is_returned($result["/award/award_honor/award"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/honored_for"] = get_values($result["/award/award_honor/honored_for"]);
		$output[$result["mid"]]["/award/award_honor/ceremony"] = check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/achievement_level"] = check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(check_array_is_returned($result["/award/award_honor/award"]["mid"]),
// 				get_values($result["/award/award_honor/honored_for"]),
// 				check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]),
// 				check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_honor/award","/award/award_honor/honored_for","/award/award_honor/award_winner","/award/award_honor/ceremony","/award/award_honor/achievement_level"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Awards won for object', $result["mid"]);
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_object_exhibited($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
  	"mid"=> null,"name"=> null,
  		"/exhibitions/exhibition/produced_by"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/venues"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/exhibition_types"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/exhibits"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/curators"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/subjects"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		))
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibit/exhibitions_displayed_in"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";

		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
		// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
		// 				get_values($result["/exhibitions/exhibition/curators"]));
		
		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(
		// // 		removed because a pointer to a connecting node
		// // 				get_values($result["/exhibitions/exhibition/venues"]),
		// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
		// 				get_values($result["/exhibitions/exhibition/exhibits"]),
		// 				get_values($result["/exhibitions/exhibition/subjects"]),
		// 				check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibition_types","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Object exhibition history', $result["mid"]);
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_exhibition_production_of_the_exhibition($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition/produced_by"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  )),
    "/exhibitions/exhibition/exhibition_types"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
 ));
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();
	
	foreach($resultarray["result"] as $result) {

		$output[$result["mid"]]["activity"] = "exhibition_creation";
		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// 				get_values($result["/exhibitions/exhibition/curators"]));
		
		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/exhibitions/exhibition/venues"]),
// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// 				get_values($result["/exhibitions/exhibition/exhibits"]),
// 				get_values($result["/exhibitions/exhibition/subjects"]),
// 				check_array_is_returned($result["mid"]));
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibition_types","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Exhibition creation details', $result["mid"]);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
		
}

function fb_exhibition_held_at_venue($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {

	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition/venues"=> array(array(
    "mid"=> null,
    "/exhibitions/exhibition_run/exhibition"=> array(
      "name"=> null,"mid"=> null
    ),
    "/exhibitions/exhibition_run/venue"=> array(
      "name"=> null,"mid"=> null
    ),
    "/exhibitions/exhibition_run/opened_on"=> null,
    "/exhibitions/exhibition_run/closed_on"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();
	
	foreach($resultarray["result"][0]["/exhibitions/exhibition/venues"] as $result) {
		
		$output[$result["mid"]]["activity"] = "exhibition_run";
		$output[$result["mid"]]["/exhibitions/exhibition_run/opened_on"] = $result["/exhibitions/exhibition_run/opened_on"];
		$output[$result["mid"]]["/exhibitions/exhibition_run/closed_on"] = $result["/exhibitions/exhibition_run/closed_on"];		
// 		$output[$result["mid"]]["tags"] = array_merge(check_array_is_returned($result["/exhibitions/exhibition_run/exhibition"]["mid"]),
// 						check_array_is_returned($result["/exhibitions/exhibition_run/venue"]["mid"]));
		$output[$result["mid"]]["/exhibitions/exhibition_run/venue"] = check_array_is_returned($result["/exhibitions/exhibition_run/venue"]["mid"]);
		$output[$result["mid"]]["/exhibitions/exhibition_run/exhibition"] = check_array_is_returned($result["/exhibitions/exhibition_run/exhibition"]["mid"]);
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition_run/exhibition","/exhibitions/exhibition_run/venue"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Exhibition runs', $result["mid"]);
	}
	

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_exhibition_creation_of_object($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/exhibitions/exhibition/exhibits"=> array(array(
				      "name"=> null,
				      "mid"=> null,
				    "/visual_art/artwork/artist"=> array(array(
				      "name"=> null,
				      "mid"=> null,
				 //     "optional"=> "optional"
				    )),
				    "/visual_art/artwork/art_subject"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "mid"=> null,
				    "/visual_art/artwork/date_begun"=> null,
				    "/visual_art/artwork/date_completed"=> null,
				    "/visual_art/artwork/art_form"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/art_genre"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/media"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/support"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/period_or_movement"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/locations"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/owners"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/editions"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/edition_of"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/belongs_to_series"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    ))
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition/exhibits"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
		// 				get_values($result["/visual_art/artwork/art_genre"]),
		// 				get_values($result["/visual_art/artwork/media"]),
		// 				get_values($result["/visual_art/artwork/support"]),
		// 				get_values($result["/visual_art/artwork/period_or_movement"]),
		// // 		removed because a pointer to a connecting node
		// // 				get_values($result["/visual_art/artwork/locations"]),
		// // 				get_values($result["/visual_art/artwork/owners"]),
		// 				get_values($result["/visual_art/artwork/editions"]),
		// 				get_values($result["/visual_art/artwork/edition_of"]),
		// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
		// 				check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/media","/visual_art/artwork/support","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Exhibited objects', $result["mid"]);
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_venue_of_exhibitions($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,"name"=>null,
			"/exhibitions/exhibition_venue/exhibitions_at_this_venue"=> array(array(
					"mid"=> null,
					"/exhibitions/exhibition_run/exhibition"=> array(
							"name"=> null,"mid"=> null
					),
					"/exhibitions/exhibition_run/venue"=> array(
							"name"=> null,"mid"=> null
					),
					"/exhibitions/exhibition_run/opened_on"=> null,
					"/exhibitions/exhibition_run/closed_on"=> null
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_venue/exhibitions_at_this_venue"] as $result) {
	
		$output[$result["mid"]]["activity"] = "exhibition_run";
		$output[$result["mid"]]["/exhibitions/exhibition_run/opened_on"] = $result["/exhibitions/exhibition_run/opened_on"];
		$output[$result["mid"]]["/exhibitions/exhibition_run/closed_on"] = $result["/exhibitions/exhibition_run/closed_on"];		
// 		$output[$result["mid"]]["tags"] = array_merge(check_array_is_returned($result["/exhibitions/exhibition_run/exhibition"]["mid"]),
// 						check_array_is_returned($result["/exhibitions/exhibition_run/venue"]["mid"]));
		$output[$result["mid"]]["/exhibitions/exhibition_run/venue"] = check_array_is_returned($result["/exhibitions/exhibition_run/venue"]["mid"]);
		$output[$result["mid"]]["/exhibitions/exhibition_run/exhibition"] = check_array_is_returned($result["/exhibitions/exhibition_run/exhibition"]["mid"]);
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition_run/exhibition","/exhibitions/exhibition_run/venue"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'exhibitions held', $result["mid"]);
	}


	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_award_having_prize_winner($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/award/award_category/winners"=> array(array(
					"mid"=> null,
					"/award/award_honor/year"=> null,
					"/award/award_honor/award"=> array(
							"name"=> null,"mid"=> null
					),
					"/award/award_honor/honored_for"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/award/award_honor/award_winner"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_honor/ceremony"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					),
					"/award/award_honor/achievement_level"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)
			))
	));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_category/winners"] as $result) {
		$output[$result["mid"]]["activity"] = "award_won";
		$output[$result["mid"]]["/award/award_honor/award_winner"] = get_values($result["/award/award_honor/award_winner"]);
		$output[$result["mid"]]["/award/award_honor/year"] = $result["/award/award_honor/year"];
		
		$output[$result["mid"]]["/award/award_honor/award"] = check_array_is_returned($result["/award/award_honor/award"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/honored_for"] = get_values($result["/award/award_honor/honored_for"]);
		$output[$result["mid"]]["/award/award_honor/ceremony"] = check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/achievement_level"] = check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]);
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(check_array_is_returned($result["/award/award_honor/award"]["mid"]),
		// 				get_values($result["/award/award_honor/honored_for"]),
		// 				check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]),
		// 				check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]));
		
		$topic_name_pairs = get_topic_name_pairs(array("/award/award_honor/award","/award/award_honor/honored_for","/award/award_honor/award_winner","/award/award_honor/ceremony","/award/award_honor/achievement_level"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Award winners', $result["mid"]);
	
	}

	
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_award_having_nominee($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/award/award_category/nominees"=> array(array(
					"mid"=> null,
					"/award/award_nomination/year"=> array(
							"value"=> null
					),
					"/award/award_nomination/award"=> array(
							"name"=> null,"mid"=> null
					),
					"/award/award_nomination/nominated_for"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_nomination/award_nominee"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_nomination/ceremony"=> array(array(
							"name"=> null,"mid"=> null
					))
			))
	));
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_category/nominees"] as $result) {
		$output[$result["mid"]]["activity"] = "award_nomination";
		$output[$result["mid"]]["/award/award_nomination/award_nominee"] = get_values($result["/award/award_nomination/award_nominee"]);
		$output[$result["mid"]]["/award/award_nomination/year"] = $result["/award/award_nomination/year"]["value"];
		
		$output[$result["mid"]]["/award/award_nomination/award"] = check_array_is_returned($result["/award/award_nomination/award"]["mid"]);
		$output[$result["mid"]]["/award/award_nomination/nominated_for"] = get_values($result["/award/award_nomination/nominated_for"]);
		$output[$result["mid"]]["/award/award_nomination/ceremony"] = get_values($result["/award/award_nomination/ceremony"]);
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(check_array_is_returned($result["/award/award_nomination/award"]["mid"]),
		// 				get_values($result["/award/award_nomination/nominated_for"]),
		// 				get_values($result["/award/award_nomination/ceremony"]));
		

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_nomination/award","/award/award_nomination/nominated_for","/award/award_nomination/award_nominee","/award/award_nomination/ceremony"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Award nominees', $result["mid"]);
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_institution_having_graduates($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/education/educational_institution/students_graduates"=> array(array(
					"mid"=> null,
					"/education/education/student"=> array(
							"name"=> null,"mid"=> null
					),
					"/education/education/institution"=> array(
							"name"=> null,"mid"=> null
					),
					"/education/education/start_date"=> array(
							"value"=> null,
							"optional"=> "optional"
					),
					"/education/education/end_date"=> array(
							"value"=> null,
							"optional"=> "optional"
					),
					"/education/education/degree"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					),
					"/education/education/major_field_of_study"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/education/education/specialization"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/education/education/minor"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					))
			))
	));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/education/educational_institution/students_graduates"] as $result) {
		$output[$result["mid"]]["activity"] = "education";
		$output[$result["mid"]]["/education/education/student"] = $result["/education/education/student"]["mid"];
		$output[$result["mid"]]["/education/education/institution"] = $result["/education/education/institution"]["mid"];
		$output[$result["mid"]]["/education/education/start_date"] = $result["/education/education/start_date"]["value"];
		$output[$result["mid"]]["/education/education/end_date"] = $result["/education/education/end_date"]["value"];
		
		$output[$result["mid"]]["/education/education/degree"] = check_array_is_returned($result["/education/education/degree"]["mid"]);
		$output[$result["mid"]]["/education/education/specialization"] = get_values($result["/education/education/specialization"]);
		$output[$result["mid"]]["/education/education/minor"] = get_values($result["/education/education/minor"]);
		
		// 		$output[$result["mid"]]["tags"] = array_merge(check_array_is_returned($result["/education/education/degree"]["mid"]),
		// 			get_values($result["/education/education/specialization"]),
		// 			get_values($result["/education/education/minor"]));
	
	$topic_name_pairs = get_topic_name_pairs(array('/education/education/student','/education/education/institution','/education/education/degree','/education/education/specialization','/education/education/minor'),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	$topic_event_links[] = array($topic, 'Students', $result["mid"]);
	
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
	
}

function fb_organisation_having_members($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/organization/membership_organization/members"=> array(array(
    "mid"=> null,
    "/organization/organization_membership/member"=> array(
      "name"=> null,"mid"=> null
    ),
    "/organization/organization_membership/organization"=> array(
      "name"=> null,"mid"=> null
    ),
    "/organization/organization_membership/from"=> array(
      "value"=> null
    ),
    "/organization/organization_membership/to"=> array(
      "value"=> null
    )
  ))
));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/organization/membership_organization/members"] as $result) {

		$output[$result["mid"]]["activity"] = "organization_membership";
		$output[$result["mid"]]["/organization/organization_membership/member"] = check_array_is_returned($result["/organization/organization_membership/member"]["mid"]);
		$output[$result["mid"]]["/organization/organization_membership/organization"] = check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]);
// 		array_merge(check_array_is_returned($result["/organization/organization_membership/member"]["mid"]),
// 				check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]));
		$output[$result["mid"]]["/organization/organization_membership/from"] = $result["/organization/organization_membership/from"];
		$output[$result["mid"]]["/organization/organization_membership/to"] = $result["/organization/organization_membership/to"];
			
	$topic_name_pairs = get_topic_name_pairs(array("/organization/organization_membership/member","/organization/organization_membership/organization"),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	$topic_event_links[] = array($topic, 'Members', $result["mid"]);
	}
	

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
	
}

function fb_topic_artwork_subject($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/visual_art/art_subject/artwork_on_the_subject"=> array(array(
					"name"=> null,
					"mid"=> null,
					"/visual_art/artwork/artist"=> array(array(
							"name"=> null,
							"mid"=> null,
							//     "optional"=> "optional"
					)),
					"/visual_art/artwork/art_subject"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"mid"=> null,
					"/visual_art/artwork/date_begun"=> null,
					"/visual_art/artwork/date_completed"=> null,
					"/visual_art/artwork/art_form"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/art_genre"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/media"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/support"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/period_or_movement"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/locations"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/owners"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/editions"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/edition_of"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/belongs_to_series"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					))
			))
	));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/visual_art/art_subject/artwork_on_the_subject"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
			
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 				get_values($result["/visual_art/artwork/art_genre"]),
// 				get_values($result["/visual_art/artwork/media"]),
// 				get_values($result["/visual_art/artwork/support"]),
// 				get_values($result["/visual_art/artwork/period_or_movement"]),
// // 				get_values($result["/visual_art/artwork/locations"]),
// // 				get_values($result["/visual_art/artwork/owners"]),
// 				get_values($result["/visual_art/artwork/editions"]),
// 				get_values($result["/visual_art/artwork/edition_of"]),
// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
// 				check_array_is_returned($result["mid"]));
	
		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/media","/visual_art/artwork/support","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Subject of works', $result["mid"]);
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));
}

function fb_period_movement_creating_object($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/visual_art/art_period_movement/associated_artworks"=> array(array(
					"name"=> null,
					"mid"=> null,
					"/visual_art/artwork/artist"=> array(array(
							"name"=> null,
							"mid"=> null,
							//     "optional"=> "optional"
					)),
					"/visual_art/artwork/art_subject"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"mid"=> null,
					"/visual_art/artwork/date_begun"=> null,
					"/visual_art/artwork/date_completed"=> null,
					"/visual_art/artwork/art_form"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/art_genre"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/media"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/support"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/period_or_movement"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/locations"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/owners"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/editions"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/edition_of"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/belongs_to_series"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					))
			))
	));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();
	
	foreach($resultarray["result"][0]["/visual_art/art_period_movement/associated_artworks"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 				get_values($result["/visual_art/artwork/art_genre"]),
// 				get_values($result["/visual_art/artwork/media"]),
// 				get_values($result["/visual_art/artwork/support"]),
// 				get_values($result["/visual_art/artwork/period_or_movement"]),
// 				// 				get_values($result["/visual_art/artwork/locations"]),
// 		// 				get_values($result["/visual_art/artwork/owners"]),
// 				get_values($result["/visual_art/artwork/editions"]),
// 				get_values($result["/visual_art/artwork/edition_of"]),
// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
// 				check_array_is_returned($result["mid"]));
	
		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/media","/visual_art/artwork/support","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Period or movement of works', $result["mid"]);
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
			"links"=>array_merge($topic_event_links, $previous_output["links"]));	
}

function fb_event_happening_of_the_event($topic = '/m/03fyn', $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null,
  "/time/event/locations"=> array(array(
    "mid"=> null,
    "name"=> null,
    "optional"=> "optional"
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_event_links = array();
	$topic_name_pairs = array();

	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] = $notable_types["0"];
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);
		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/people_involved","/time/event/locations"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'event', $result["mid"]);

	}

return array("events"=>array_merge($output, $previous_output["events"]),
		"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
		"links"=>array_merge($topic_event_links, $previous_output["links"]));	
}

function check_array_is_returned($item) {
	if(is_null($item)) {
		return array();
	}
	elseif(!is_array($item)) {
		return array($item);
	}
	else {
		return $item;
	}
}



function new_event_space_of_a_topic($topic = "/m/01qwfk", $reload = FALSE) {
	check_for_topic_name($topic);
	check_for_topic_description($topic);
	check_for_notable_types($topic);

	if(check_for_calculated_tag($topic) && !$reload) {
		$types = check_for_tag_types($topic);
		return $types;
	}

// 	//person
// 	$topic = "/m/060_7"; //pablo picasso
// 	$topic = "/m/01qwfk"; //damien hirst (author)
// 	$topic = "/m/09_xn"; //salvador dali
// 	$topic = "/m/0kc6"; //warhol
// 	$topic = "/m/0265rzk"; //Pierre de Fermat
// 	$topic = "/m/0f896_"; //Les XX (exhibition producer)
// 	$topic = "/m/055rd2"; //Michael Craig-Martin (org member)
// 	$topic = "/m/0c9h4"; //robert peel (art owner)
// 	//object
// 	$topic = "/m/050_704"; //mother and child divided (nom)
// 	$topic = "/m/0jbg2"; //mona lisa
// 	$topic = "/m/06l_7n"; //fountain
// 	$topic = "/m/0hc9x6h"; //The Bodmer Oak (location, own)
// 	$topic = "/m/04xswj"; //ophelia (created, location)
// 	//exhibition
// 	$topic = "/m/052tvg1"; //figure studies
// 	$topic = "/m/04d11nr"; //turner prize retrospective
// 	//gallery	
// 	$topic = "/m/0136mc"; //Tate
// 	//prize	
// 	$topic = "/m/0133rf"; //Turner prize
// 	//educational institution	
// 	$topic = "/m/015wy_"; //goldsmiths college
// 	//membership organisation				
// 	$topic = "/m/015g1w"; //royal academy					
// 	//art subject			
// 	$topic = "/m/034rd"; //George Washington
	
	$res = array();
	$result = array("events"=>array(),"names"=>array(), "links"=>array());
	$types = check_for_tag_types($topic, TRUE);

	//**type: /people/person
	if(in_array("/people/person", $types)) {
		$res[] = "/people/person";
		//person studying
		$result = fb_person_studying($topic, $result);
		
		//person living at location
		$result = fb_person_living_at_location($topic, $result);
	}

	//**type: /visual_art/visual_artist
	if(in_array("/visual_art/visual_artist", $types)) {
		$res[] = "/visual_art/visual_artist";
	
		//object created
		$result = fb_topic_creating_object($topic, $result);
	}

	
	//**type: /book/author
	if(in_array("/book/author", $types)) {
		$res[] = "/book/author";
		//publishing
		$result = fb_topic_publishing($topic, $result);
	}
	
	//**type: /organization/organization_member
	if(in_array("/organization/organization_member", $types)) {
		$res[] = "/organization/organization_member";
		//member of organisation
		$result = fb_topic_organization_member($topic, $result);
		
	}
	
	
	//**type: /exhibitions/exhibition_producer
	if(in_array("/exhibitions/exhibition_producer", $types)) {
		$res[] = "/exhibitions/exhibition_producer";
		//producer of exhibition
		$result = fb_topic_exhibition_producer($topic, $result);
	}
	
	//**type: /exhibitions/exhibition_curator
	if(in_array("/exhibitions/exhibition_curator", $types)) {
		$res[] = "/exhibitions/exhibition_curator";
		//exhibition curator
		$result = fb_topic_exhibition_curator($topic, $result);
		
	}
	
	//**type: /exhibitions/exhibition_subject
	if(in_array("/exhibitions/exhibition_subject", $types)) {
		$res[] = "/exhibitions/exhibition_subject";
		//exhibition subject
		$result = fb_topic_exhibition_subject($topic, $result);
		
	}
	
	
	//**type: /visual_art/art_owner
	if(in_array("/visual_art/art_owner", $types)) {
		$res[] = "/visual_art/art_owner";
		//owner of artwork
		$result = fb_topic_art_owner($topic, $result);
		
	}
	
	//**type: /award/award_winner
	if(in_array("/award/award_winner", $types)) {
		$res[] = "/award/award_winner";
		//winner of award
		$result = fb_topic_award_winner($topic, $result);
		
	}
	
	//**type: /award/award_nominee
	if(in_array("/award/award_nominee", $types)) {
		$res[] = "/award/award_nominee";
		//nominee of award
		$result = fb_topic_award_nominee($topic, $result);
	
	}
	
	//**type: /visual_art/artwork
	if(in_array("/visual_art/artwork", $types)) {
		$res[] = "/visual_art/artwork";
		//object created
		$result = fb_artwork_created($topic, $result);
	
		//object location
		$result = fb_artwork_located($topic, $result);
	
		//object owner
		$result = fb_object_owned($topic, $result);
	}
	
	//**type: /award/award_nominated_work
	if(in_array("/award/award_nominated_work", $types)) {
		$res[] = "/award/award_nominated_work";
		//work nominated
		$result = fb_object_award_nominated_work($topic, $result);
		
	}
	
	//**type: /award/award_winning_work
	if(in_array("/award/award_winning_work", $types)) {
		$res[] = "/award/award_winning_work";
		//work winning award
		$result = fb_object_award_winning_work($topic, $result);
		
	}
	
	//**type: /exhibitions/exhibit
	if(in_array("/exhibitions/exhibit", $types)) {
		$res[] = "/exhibitions/exhibit";
		//object exhibited
		$result = fb_object_exhibited($topic, $result);
	}
	
	//**type: /exhibitions/exhibition
	if(in_array("/exhibitions/exhibition", $types)) {
		$res[] = "/exhibitions/exhibition";
		
		//production of the exhibition
		$result = fb_exhibition_production_of_the_exhibition($topic, $result);
		
		//exhibition held at venue
		$result = fb_exhibition_held_at_venue($topic, $result);
	
		//creation of exhibited objects
		$result = fb_exhibition_creation_of_object($topic, $result);
	}
	
	//**type: /exhibitions/exhibition_venue
	if(in_array("/exhibitions/exhibition_venue", $types)) {
		$res[] = "/exhibitions/exhibition_venue";
		//venue of exhibition
		$result = fb_venue_of_exhibitions($topic, $result);
	}
	
	//**type: /award/award_category
	if(in_array("/award/award_category", $types)) {
		$res[] = "/award/award_category";
		//award prize winner
		$result = fb_award_having_prize_winner($topic, $result);
	
		//award nominee
		$result = fb_award_having_nominee($topic, $result);
		
	}
	
	//**type: /education/educational_institution
	if(in_array("/education/educational_institution", $types)) {
		$res[] = "/education/educational_institution";
		//institution having graduates
		$result = fb_institution_having_graduates($topic, $result);
	
	}
	
	
	//**type: organization/membership_organization
	if(in_array("/organization/membership_organization", $types)) {
		$res[] = "/organization/membership_organization";
		//organization having members
		$result = fb_organisation_having_members($topic, $result);
	
	}
	
	//**type: /visual_art/art_subject
	if(in_array("/visual_art/art_subject", $types)) {
		$res[] = "/visual_art/art_subject";
		//subject of created artwork
		$result = fb_topic_artwork_subject($topic, $result);
	
	}

	//**type: /visual_art/art_period_movement
	if(in_array("/visual_art/art_period_movement", $types)) {
		$res[] = "/visual_art/art_period_movement";
		//subject of created artwork
		$result = fb_period_movement_creating_object($topic, $result);
	
	}	

	//**type: /visual_art/art_period_movement
	if(in_array("/visual_art/art_period_movement", $types)) {
		$res[] = "/visual_art/art_period_movement";
		//subject of created artwork
		$result = fb_period_movement_creating_object($topic, $result);
	
	}

	//**type: /time/event
	if(in_array("/time/event", $types)) {
		$res[] = "/time/event";
		//subject of created artwork
		$result = fb_event_happening_of_the_event($topic, $result);

	}

	save_events_to_db($result["events"]);
	save_tag_names_to_db($result["names"]);
	save_event_links_to_db($result["links"]);
	save_calculated_tag($topic);
	
	return $types;
// 	dpm($res);
// 	dpm($result);
}

//get topic name
function get_topic_name($topic = "/m/0hc9x6h") {
	$query = "SELECT name FROM tag_name WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$object = $result->fetchObject();
	if(isset($object->name)) {
		return $object->name;
	}
	else {
		return FALSE;
	}
}

//get topic description
function get_topic_description($topic = "/m/0hc9x6h", $limit = FALSE) {
	$query = "SELECT description FROM tag_description WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$object = $result->fetchObject();
	if(isset($object->description)) {
		if($limit && is_int($limit)) {
			$description =  preg_replace('/\s+?(\S+)?$/', '', substr($object->description, 0, $limit));
			if($limit < strlen($object->description)) {
				$description .= '...';
			}
			return $description;
		}
		return $object->description;
	}
	else {
		return FALSE;
	}
}

//check for topic name
//retrieve if not already stored
function check_for_topic_name($topic = "/m/08tqtj") {
	//check for topic name in db
	$query = "SELECT name FROM tag_name WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$found = $result->fetchObject();
	if(isset($found->name)) {
		return $found->name;
	}
	//get topic name
	$query = array(array(
			"mid"=> $topic,
			"name"=> null,
	));
	
	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"][0]["name"])) {
		$name = $resultarray["result"][0]["name"];
// 		$name = preg_replace('/[^A-Za-z0-9\/\- ]/', '', $name);
//		$name = my_escape_string($name);

		$values_list = "VALUES ('".$topic."', '".my_escape_string($name)."')";
		$query = "INSERT INTO tag_name (tag, name) ".$values_list." ON DUPLICATE KEY UPDATE name = VALUES(name);";
		$result = db_query($query, array(':tag'=>$topic));

	}
}

//check for topic description
//retrieve if not already stored
function check_for_topic_description($topic = "/m/055rd2", $limit = FALSE) {
	$query = "SELECT description FROM tag_description WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$found = $result->fetchObject();
	if(isset($found->description)) {
		if($limit && is_int($limit)) {
			$description =  preg_replace('/\s+?(\S+)?$/', '', substr($found->description, 0, $limit));
			if($limit < strlen($found->description)) {
				$description .= '...';
			}
			return $description;
		}
		return $found->description;
	}

	//get topic description
	$service_url = 'https://www.googleapis.com/freebase/v1/topic';
	$url = $service_url . $topic . '?filter=/common/topic/description'.'&key='.GOOGLEAPIKEY;
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$result = json_decode(curl_exec($ch), true);
	curl_close($ch);

	$descriptions = array();
	if(isset($result["property"]["/common/topic/description"]["values"])) {
		foreach($result["property"]["/common/topic/description"]["values"] as $value) {

			if(isset($value["dataset"]) && $value["dataset"] == "/m/0kj4zz_") {
				$descriptions[0] = $value["value"];
			}
			else {
				$descriptions[] = $value["value"];
			}
		}
	}
	//add to database
	if(isset($descriptions[0])) {	
		$description = $descriptions[0];//my_escape_string($descriptions[0]);
		$values_list = "VALUES ('".$topic."', '".my_escape_string($description)."')";
		$query = "INSERT INTO tag_description (tag, description) ".$values_list." ON DUPLICATE KEY UPDATE description = VALUES(description);";
		$result = db_query($query, array(':tag'=>$topic));

		if($limit && is_int($limit)) {
			$description =  preg_replace('/\s+?(\S+)?$/', '', substr($description, 0, $limit));
			if($limit < strlen($description)) {
				$description .= '...';
			}
		}
		
		return $description;
	}
}



// ALTER TABLE tag_notable_types
// ADD CONSTRAINT tnt UNIQUE (tag, notable_type);
function check_for_notable_types($topic = "/m/055rd2") {
	$notable_types = array();
	$notable_types = get_notable_tag_type_names($topic);
	if(!empty($notable_types)) {
		return $notable_types;
	}
// 	$query = "SELECT tag FROM tag_notable_types WHERE tag = :tag;";
// 	$result = db_query($query, array(':tag' => $topic));
// 	foreach ($result as $record) {
// 		return TRUE;
// 	}
	
	//get notable type
	$service_url = 'https://www.googleapis.com/freebase/v1/topic';
	$url = $service_url . $topic . '?filter=/common/topic/notable_types'.'&key='.GOOGLEAPIKEY;
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$result = json_decode(curl_exec($ch), true);
	curl_close($ch);
	
	$notable_types = array();
	$types = array();
	if(isset($result["property"]["/common/topic/notable_types"]["values"])) {
		foreach($result["property"]["/common/topic/notable_types"]["values"] as $value) {
				$types[$topic] = array($value["id"], $value["text"]);
				$notable_types[] = str_replace('_', ' ',$value["text"]);
		}
	}
	if(!empty($types)) {
	//add to database
		$values_list = '';
		foreach($types as $id=>$type) {
			$values_list .=", ('".$id."', '".$type["0"]."', '".$type["1"]."')";
		}
		if($values_list == "") {
			return array();
		}
		$values_list = "VALUES".substr($values_list, 1)." ";
		
		$query = "INSERT INTO tag_notable_types (tag, notable_type, notable_type_name) ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag), notable_type = VALUES(notable_type), notable_type_name = VALUES(notable_type_name);";
		
		$result = db_query($query);
	}
	return $notable_types;
}

function my_escape_string2($string) {
	$string = utf8_encode($string);
	return $string;
}
function my_escape_string($string) {
	global $databases;
	$con=mysqli_connect($databases["default"]["default"]["host"],$databases["default"]["default"]["username"],$databases["default"]["default"]["password"],$databases["default"]["default"]["database"]);
	$description = mysqli_real_escape_string($con, $string);
	return $description;
}

function my_escape_string3($string) {
	$string = preg_replace('/[^A-Za-z0-9_\/\-\';.\[\]{} ()*&^%$�@+=\"?\>\<]/', '', $string);
	return $string;
}

// ALTER TABLE tag_link_event_id
// ADD CONSTRAINT tle UNIQUE (location,year);
function save_calculated_setting($location, $year) {	
	$query = "INSERT INTO calculated_settings (location, year) VALUES(:location, :year) ON DUPLICATE KEY UPDATE location = VALUES(location), year = VALUES(year);";
	$result = db_query($query, array(':location'=>$location, ':year'=>$year));
}


function check_for_calculated_setting($location, $year) {
	$query = "SELECT * FROM calculated_settings WHERE location = :location AND year = :year;";
	$result = db_query($query, array(':location'=>$location, ':year'=>$year));
	$found = $result->fetchObject();
	if($found) {
		return TRUE;
	}
	else {
		return FALSE;
	}	
}


//have to use db_query in order to avoid duplicate enties for key
function save_calculated_tag($topic) {
	$query = "INSERT INTO calculated_tags (tag) VALUES(:tag) ON DUPLICATE KEY UPDATE tag = VALUES(tag);";
	$result = db_query($query, array(':tag'=>$topic));

}

function save_fb_image_tag($topic) {
	$query = "INSERT INTO fb_saved_images (tag) VALUES(:tag) ON DUPLICATE KEY UPDATE tag = VALUES(tag);";
	$result = db_query($query, array(':tag'=>$topic));

}

function check_for_calculated_tag($topic) {
	$query = "SELECT tag FROM calculated_tags WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$found = $result->fetchObject();
	if($found) {
		return TRUE;
	}
	else {
		return FALSE;
	}
}

function save_tag_names_to_db($result) {

	$values_list = "";
	if(!empty($result)) {
		foreach($result as $id=>$name) {
	// 		$name = preg_replace('/[^A-Za-z0-9\/\- ]/', '', $name);
			$name = my_escape_string($name);
			$values_list .=", ('".$id."', '".$name."')";
		}
		if($values_list == "") {
			return array();
		}
		$values_list = "VALUES".substr($values_list, 1)." ";
	
		$query = "INSERT INTO tag_name (tag, name) ".$values_list." ON DUPLICATE KEY UPDATE name = VALUES(name);";
	
		$result = db_query($query);
	}
}

// ALTER TABLE setting_link_event_id
// ADD CONSTRAINT lye UNIQUE (location,year,event_id);
function save_setting_links_to_db($result) {
	$values_list = "";
	if(empty($result)) {
		return;
	}
	foreach($result as $triple) {
		if($triple[2]) {
			$values_list .=", ('".$triple[0]."', '".$triple[1]."-".$triple[2]."', '".$triple[3]."')";
		}
		else {
			$values_list .=", ('".$triple[0]."', '".$triple[1]."', '".$triple[3]."')";
		}
	}
	if($values_list == "") {
		return array();
	}
	$values_list = "VALUES".substr($values_list, 1)." ";

	$query = "INSERT INTO setting_link_event_id (location,year,event_id) ".$values_list." ON DUPLICATE KEY UPDATE location = VALUES(location), year = VALUES(year), event_id = VALUES(event_id);";

	$result = db_query($query);
}

// ALTER TABLE tag_link_event_id
// ADD CONSTRAINT tle UNIQUE (tag,link,event_id);
function save_event_links_to_db($result) {
	$values_list = "";

	foreach($result as $triple) {
		$values_list .=", ('".$triple[0]."', '".$triple[1]."', '".$triple[2]."')";
	}
	if($values_list == "") {
		return array();
	}
	$values_list = "VALUES".substr($values_list, 1)." ";

	$query = "INSERT INTO tag_link_event_id (tag,link,event_id) ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag), link = VALUES(link), event_id = VALUES(event_id);";

	$result = db_query($query);	
}

// ALTER TABLE event_attribute_value
// ADD CONSTRAINT triple UNIQUE (event,attribute,value);
function save_events_to_db($result) {
	if(empty($result)) {
		return array();
	}
		
	$values_list = "";

	foreach($result as $event_id=>$event_properties) {
		foreach($event_properties as $attribute=>$values) {
			if(is_array($values)) {
				foreach($values as $value) {
					if($value) {
// 						$value = preg_replace('/[^A-Za-z0-9\/\- ]/', '', $value);
						$value = my_escape_string($value);
						$values_list .=", ('".$event_id."', '".$attribute."', '".$value."')";
					}
				}
			}
			else {
				if($values) {
// 					$values = preg_replace('/[^A-Za-z0-9\/\- ]/', '', $values);
					$values = my_escape_string($values);
					$values_list .=", ('".$event_id."', '".$attribute."', '".$values."')";
				}
			}
		}
	}
	$values_list = "VALUES".substr($values_list, 1)." ";

	$query = "INSERT INTO event_attribute_value (event,attribute,value) ".$values_list." ON DUPLICATE KEY UPDATE event = VALUES(event), attribute = VALUES(attribute), value = VALUES(value);";

	$result = db_query($query);	
}

function event_space_of_a_topic() {
	$topic =  $_GET['entity'];
	$topic = urldecode($topic);
	$bracketed_topic = "<".$topic.">";
	require_once(ARC2FILEPATH);
	//find the type of the topic
	$query = 'PREFIX fb: <http://rdf.freebase.com/ns/> '
	. ' PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>'
	. ' SELECT * WHERE {'.$bracketed_topic.' rdf:type ?type . FILTER(REGEX(STR(?type), "^http://rdf.freebase.com/ns/")) }';
	$sparql_results = execute_sparql_event_query($query);
	$types = array();
	foreach($sparql_results as $type) {
		$types[] = $type['type'];
	}
	
	$entity_type = "misc";
	if(in_array("http://rdf.freebase.com/ns/people.person", $types)) {
		$entity_type = "person";
	}
	elseif(in_array("http://rdf.freebase.com/ns/visual_art.artwork", $types)) {
		$entity_type = "object";
	}	
	elseif(in_array("http://rdf.freebase.com/ns/exhibitions.exhibit", $types)) {
		$entity_type = "object";
	}	
	elseif(in_array("http://rdf.freebase.com/ns/exhibitions.exhibition", $types)) {
		$entity_type = "exhibition";
	}	
	elseif(in_array("http://rdf.freebase.com/ns/architecture.museum ", $types)) {
		$entity_type = "museum";
	}	
	elseif(in_array("http://rdf.freebase.com/ns/award.award ", $types)) {
		$entity_type = "award";
	}	
	elseif(in_array("http://rdf.freebase.com/ns/education.educational_institution", $types)) {
		$entity_type = "educational_institution";
	}	
	elseif(in_array("http://rdf.freebase.com/ns/organization.membership_organization ", $types)) {
		$entity_type = "membership_organization";
	}	
	

	//run the queries to retrieve the events
	
	
	//run the queries to retreive the facts
	
	
	
	//save the events in a db
	
	return $topic." hello ".$entity_type;
}



function map_to_event_freebase($event_id, $rows, $type, $mappings, $key_entity, $key_entity_label, $result_array = array()) {

	$result_array = array();
	foreach($rows as $row) {
		$used_values = array();
		$item_array = array();
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$row[$event_id]][$value]) || (isset($result_array[$row[$event_id]][$value]) && !in_array($row[$key], $result_array[$row[$event_id]][$value]))) {
					$result_array[$row[$event_id]][$value][] = $row[$key];
				}
				$used_values[] = $value;
			}
		}

		if($key_entity) {$result_array[$row[$event_id]][$key_entity_label] = array($key_entity);}
		if($type) {$result_array[$row[$event_id]]["type"] = $type;}
	}
	return $result_array;
}

function map_to_event_nomination($event_id, $rows, $type, $mappings, $prize = NULL, $result_array = array()) {
	dpm($mappings);
	dpm($rows);
	$result_array = array();
	foreach($rows as $row) {
		$used_values = array();
		$item_array = array();
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$row[$event_id]][$value]) || (isset($result_array[$row[$event_id]][$value]) && !in_array($row[$key], $result_array[$row[$event_id]][$value]))) {
					$result_array[$row[$event_id]][$value][] = $row[$key];
				}
				$used_values[] = $value;
			}
		}

		if($prize) {$result_array[$row[$event_id]]["nomination"] = array($prize);}
		if($type) {$result_array[$row[$event_id]]["type"] = $type;}
	}
	return $result_array;
}

function map_to_event_prize($event_id, $rows, $type, $mappings, $prize = NULL, $result_array = array()) {
	dpm($mappings);
	dpm($rows);
	$result_array = array();
	foreach($rows as $row) {
		$used_values = array();
		$item_array = array();
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$row[$event_id]][$value]) || (isset($result_array[$row[$event_id]][$value]) && !in_array($row[$key], $result_array[$row[$event_id]][$value]))) {
					$result_array[$row[$event_id]][$value][] = $row[$key];
				}
				$used_values[] = $value;
			}
		}

		if($prize) {$result_array[$row[$event_id]]["prize"] = array($prize);}
		if($type) {$result_array[$row[$event_id]]["type"] = $type;}
	}
	return $result_array;
}

function map_to_event_gallery($event_id, $rows, $type, $mappings, $gallery = NULL, $result_array = array()) {
	dpm($mappings);
	dpm($rows);
	$result_array = array();
	foreach($rows as $row) {
		$used_values = array();
		$item_array = array();
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$row[$event_id]][$value]) || (isset($result_array[$row[$event_id]][$value]) && !in_array($row[$key], $result_array[$row[$event_id]][$value]))) {
					$result_array[$row[$event_id]][$value][] = $row[$key];
				}
				$used_values[] = $value;
			}
		}

		if($gallery) {$result_array[$row[$event_id]]["owner"] = array($gallery);}
		if($type) {$result_array[$row[$event_id]]["type"] = $type;}
	}
	return $result_array;
}

function map_to_event_exhibition($event_id, $rows, $type, $mappings, $exhibition = NULL, $result_array = array()) {
	dpm($mappings);
	dpm($rows);
	$result_array = array();
	foreach($rows as $row) {
		$used_values = array();
		$item_array = array();
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$row[$event_id]][$value]) || (isset($result_array[$row[$event_id]][$value]) && !in_array($row[$key], $result_array[$row[$event_id]][$value]))) {
					$result_array[$row[$event_id]][$value][] = $row[$key];
				}
				$used_values[] = $value;
			}
		}

		if($exhibition) {$result_array[$row[$event_id]]["object"] = array($exhibition);}
		if($type) {$result_array[$row[$event_id]]["type"] = $type;}
	}
	return $result_array;
}

function map_to_event_object2($event_id, $rows, $type, $mappings, $agent = NULL, $result_array = array()) {
	foreach($rows as $row) {
		$used_values = array();
		$item_array = array();
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$row[$event_id]][$value]) || (isset($result_array[$row[$event_id]][$value]) && !in_array($row[$key], $result_array[$row[$event_id]][$value]))) {
					$result_array[$row[$event_id]][$value][] = $row[$key];
				}
				$used_values[] = $value;
				}
		}
		
		if($agent) {$result_array[$row[$event_id]]["agent"] = array($agent);}
		if($type) {$result_array[$row[$event_id]]["type"] = $type;}
	}
	return $result_array;
}

//map_to_event_object3($object, $rows, 'creation', array('start_date'=>'start_time', 'end_date'=>'end_time'));
function map_to_event_object3($object, $rows, $type, $mappings, $result_array = array()) {

	foreach($rows as $row) {
		$used_values = array();
		$item_array = array();
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$object][$value]) || (isset($result_array[$object][$value]) && !in_array($row[$key], $result_array[$object][$value]))) {
					$result_array[$object][$value][] = $row[$key];
				}
				$used_values[] = $value;
			}
		}
		if($object) {$result_array[$object]["object"] = array($object);}
		if($type) {$result_array[$object]["type"] = $type;}
	}
	return $result_array;
}


function map_to_event_object4($event_id, $rows, $type, $mappings, $object = NULL, $result_array = array()) {

	foreach($rows as $row) {
		if(!isset($result_array[$row[$event_id]])) {
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {
				if(!isset($result_array[$row[$event_id]][$value]) || (isset($result_array[$row[$event_id]][$value]) && !in_array($row[$key], $result_array[$row[$event_id]][$value]))) {
					$result_array[$row[$event_id]][$value][] = $row[$key];
				}
			}
		}

		if($object) {
			$result_array[$row[$event_id]]["object"][] = $object;
		}
		if($type) {$result_array[$row[$event_id]]["type"] = $type;}
		}
	}
	return $result_array;
}

function map_to_event_object($rows, $type, $mappings, $agent, $result_array = array()) {
	dpm($mappings);
	dpm($rows);
	$result_array = array();
	foreach($rows as $row) {
		$item = new stdClass();
		$item->type = $type;
		foreach($mappings as $key=>$value) {
			if(isset($row[$key])) {$item->$value = $row[$key];}
		}
		$item->agent = $agent;
		$result_array[] = $item;
	}
	return $result_array;	
}

//type = education/education (person at an educational institution)
function person_studying_event($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";
	
	//*****study
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "SELECT * WHERE {"
	. $bracketed_agent . " fb:people.person.education ?queryTerm ."
	. "	?queryTerm fb:education.education.institution ?location. "
	. "	OPTIONAL {?queryTerm fb:education.education.start_date ?start_date.}"
	. "	OPTIONAL {?queryTerm fb:education.education.end_date ?end_date.}"
	. "} ";
	dpm($query);
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('queryTerm', $rows, 'studying', array('location'=>'location', 'start_date'=>'start_time', 'end_date'=>'end_time'), $agent, $res);
	
	return $result_array;	
}

function person_creating_object($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";

	//*****create
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "SELECT * "
	. " WHERE {" . $bracketed_agent . " fb:visual_art.visual_artist.artworks ?queryTerm. "
	. " { {?queryTerm fb:visual_art.artwork.date_begun ?start_date .    ?queryTerm  fb:visual_art.artwork.date_completed ?end_date }"
	. " UNION    {?queryTerm  fb:visual_art.artwork.date_completed ?start_date . OPTIONAL {?queryTerm fb:visual_art.artwork.date_begun ?x}"
	. " . FILTER(!bound(?x)) }}"
	. "}";
	dpm($query);
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('queryTerm', $rows, 'creation', array('queryTerm'=>'object', 'start_date'=>'start_time', 'end_date'=>'end_time'), $agent, $res);
	return $result_array;
}

//type = book
function person_publishing_event($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";
	
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "PREFIX dbpedia: <http://dbpedia.org/resource/>"
	. "PREFIX dbp-ont: <http://dbpedia.org/ontology/>"
	. "SELECT * WHERE {"
	. $bracketed_agent . " fb:book.author.works_written ?queryTerm ."
	. " OPTIONAL{?queryTerm fb:book.written_work.date_of_first_publication ?start_date} "
	. "}";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('queryTerm', $rows, 'authored', array('queryTerm'=>'object', 'start_date'=>'start_time'), $agent, $res);
	
	return $result_array;	
}

//type = people/place_lived
function person_living_at_location_event($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";
		
	//*****lived
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> "
	. " SELECT * "
	. " WHERE {   ".$bracketed_agent." fb:people.person.places_lived ?queryTerm . "
	. " ?queryTerm fb:people.place_lived.location ?location . "
	. " OPTIONAL {?queryTerm fb:people.place_lived.start_date ?start_date} . "
	. " OPTIONAL {?queryTerm fb:people.place_lived.end_date ?end_date} . "
  	. " } ";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('queryTerm', $rows, 'places_lived', array('start_date'=>'start_time', 'end_date'=>'end_time', 'location'=>'location'), $agent, $res);
	
	return $result_array;
}

//type = organization membership
function person_being_member_of_organisation_event($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";

	//*****organization membership
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> "
	. " SELECT * "
	. " WHERE {".$bracketed_agent." fb:organization.organization_member.member_of ?queryTerm . "
	. " ?queryTerm fb:organization.organization_membership.organization ?org . "
	. " OPTIONAL {?queryTerm fb:organization.organization_membership.from ?start_date} . "
	. " OPTIONAL {?queryTerm fb:organization.organization_membership.to ?end_date} . "
	. " } ";
	
 	$rows = execute_sparql_event_query($query);
 	$result_array = map_to_event_object2('queryTerm', $rows, 'organisation_member', array('start_date'=>'start_time', 'end_date'=>'end_time', 'org'=>'object'), $agent, $res);
 	
 	return $result_array;
}



//type = Exhibition run
function person_subject_of_exhibition($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";

	//*****exhibition about
	$query = "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>"
	. "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. " SELECT * WHERE {"
	. $bracketed_agent . " fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?queryTerm ."
	. "	    ?queryTerm fb:exhibitions.exhibition.venues ?venue ."
	. "	    OPTIONAL {?venue fb:exhibitions.exhibition_run.opened_on ?start_date .}"
	. "	    OPTIONAL {?venue fb:exhibitions.exhibition_run.closed_on ?end_date .}"
	. "	    OPTIONAL {?venue fb:exhibitions.exhibition_run.venue ?location.} "
	. "}";
	

	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('venue', $rows, 'exhibition_about', array('queryTerm'=>'object', 'start_date'=>'start_time', 'end_date'=>'end_time', 'location'=>'location'), $agent, $res);
	
	return $result_array;
}	



function person_producing_exhibition($agent, $res) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";

	//*****exhibition by
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. " SELECT * WHERE {"
	. $bracketed_agent . " fb:exhibitions.exhibition_producer.exhibitions_produced ?queryTerm ."
	. "	?queryTerm fb:exhibitions.exhibition.venues ?venue."
	. " OPTIONAL {?venue fb:exhibitions.exhibition_run.opened_on ?start_date }."
	. " OPTIONAL {?venue fb:exhibitions.exhibition_run.closed_on ?end_date } ."
	. " OPTIONAL {?venue fb:exhibitions.exhibition_run.venue ?location.} "
	. "}";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('venue', $rows, 'exhibition_produced', array('queryTerm'=>'object', 'start_date'=>'start_time', 'end_date'=>'end_time', 'location'=>'location'), $agent, $res);
	
	return $result_array;
	
}


//type = Artwork/owner relationship
function person_acquiring_object_event($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";

	//owners
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT ?queryTerm ?object ?start_date ?end_date   WHERE { "
	. " ?queryTerm fb:visual_art.artwork_owner_relationship.owner ".$bracketed_agent." . "
	. " ?object fb:visual_art.artwork.owners ?queryTerm ."
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.date_acquired ?start_date} . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.last_date_owned ?end_date} . "
	. " } ";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('queryTerm', $rows, 'object_owned', array('start_date'=>'start_time', 'end_date'=>'end_time', 'object'=>'object'), $agent, $res);
	
	return $result_array;	
}



//type = Award honor
function person_receiving_award($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";

	//*****award
	$query = 	"PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "SELECT DISTINCT ?queryTerm ?start_date ?win ?work WHERE {"
	. $bracketed_agent . " fb:award.award_winner.awards_won ?win ."
	. " OPTIONAL{?win fb:award.award_honor.year ?start_date} ."
	. "	?win fb:award.award_honor.award ?queryTerm ."
	. "	?win fb:award.award_honor.honored_for ?work ."
	. "}";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('win', $rows, 'award', array('queryTerm'=>'object', 'start_date'=>'start_time', 'work'=>'object'), $agent, $res);
	
	return $result_array;	
}


function get_values($elements) {
	if(!is_array($elements)) {return array();}
	$output = array();
	foreach($elements as $element) {
		$output[] = $element["mid"];
	}
	return $output;
}

//type = Award nomination
function person_receiving_nomination($agent, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_agent = "<".$agent.">";

	//*****nomination
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "SELECT DISTINCT ?queryTerm ?start_date ?dob ?dod ?work ?nom WHERE {"
	. $bracketed_agent . " fb:award.award_nominee.award_nominations ?nom ."
	. "	OPTIONAL {?nom fb:award.award_nomination.year ?start_date} ."
	. "	?nom fb:award.award_nomination.award ?queryTerm ."
	. " OPTIONAL {?nom  fb:award.award_nomination.nominated_for ?work} "
	. "}";
	dpm($query);
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object2('nom', $rows, 'nomination', array('queryTerm'=>'object', 'start_date'=>'start_time', 'work'=>'object'), $agent, $res);
	
	return $result_array;
}

function people_queries($agent = "http://rdf.freebase.com/ns/m.0265rzk") {
	require_once(ARC2FILEPATH);
	$result_array = array();
	//$agent = "http://rdf.freebase.com/ns/m.060_7"; //pablo picasso
	$agent = "http://rdf.freebase.com/ns/m.01qwfk"; //damien hirst (author)
	//$agent = "http://rdf.freebase.com/ns/m.0265rzk"; //Pierre de Fermat
// 	$agent = "http://rdf.freebase.com/ns/m.0f896_"; //Les XX (exhibition producer)
// 	$agent = "http://rdf.freebase.com/ns/m.055rd2"; //Michael Craig-Martin (org member)
// 	$agent = "http://rdf.freebase.com/ns/m.0c9h4"; //robert peel (art owner)
	
	$bracketed_agent = "<".$agent.">";
	
	$result_array = array();
// 	fb_person_acquiring_object_event($agent, $result_array);
// 	$result_array = person_studying_event($agent, $result_array);
	
// 	$result_array = person_creating_object($agent, $result_array);
// 	fb_person_receiving_award($agent, $result_array);
// 	$result_array = person_receiving_award($agent, $result_array);
// 	fb_person_receiving_nomination($agent, $result_array);
// 	$result_array = person_receiving_nomination($agent, $result_array);
	
// 	$result_array = person_publishing_event($agent, $result_array);
	fb_person_producing_exhibition($agent, $result_array);
// 	$result_array = person_producing_exhibition($agent, $result_array);
	
// 	$result_array = person_subject_of_exhibition($agent, $result_array);
	
// 	$result_array = person_living_at_location_event($agent, $result_array);
	
// 	$result_array = person_being_member_of_organisation_event($agent, $result_array);
 	
// 	$result_array = person_acquiring_object_event($agent, $result_array);

//  	save_query_results($agent, $result_array);
 	
 	dpm($result_array);
}

function object_created($object, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_object = "<".$object.">";
	
	//created
	//*****create
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "SELECT *  "
	. " WHERE {  "
	. " { {". $bracketed_object . " fb:visual_art.artwork.date_begun ?start_date .  ". $bracketed_object . "  fb:visual_art.artwork.date_completed ?end_date }"
	. " UNION    {". $bracketed_object . "  fb:visual_art.artwork.date_completed ?start_date . OPTIONAL {". $bracketed_object . " fb:visual_art.artwork.date_begun ?x}"
	. " . FILTER(!bound(?x)) }} ."
	. $bracketed_object . "fb:visual_art.artwork.artist ?agent "
	. "}";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object3($object, $rows, 'creation', array('start_date'=>'start_time', 'end_date'=>'end_time', 'agent'=>'agent'), $res);
	
	return $result_array;	
}

//type = Artwork / Location relationship 
function object_location($object, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_object = "<".$object.">";
	
	//locations
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/>SELECT ?queryTerm ?location ?start_date ?end_date WHERE {". $bracketed_object . " fb:visual_art.artwork.locations ?queryTerm . "
	. "?queryTerm fb:visual_art.artwork_location_relationship.location ?location . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_location_relationship.from ?start_date} . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_location_relationship.to ?end_date} .} ";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object4('queryTerm', $rows, 'object_located', array('start_date'=>'start_time', 'end_date'=>'end_time', 'location'=>'location'), $object, $res);
	
	return $result_array;
}

//type = Artwork / owner relationship
function object_owner($object, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_object = "<".$object.">";

	//owners
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *  WHERE { "
	. " ". $bracketed_object . " fb:visual_art.artwork.owners ?queryTerm ."
	. " ?queryTerm fb:visual_art.artwork_owner_relationship.owner ?owner . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.date_acquired ?start_date} . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.last_date_owned ?end_date} . "
	. " } ";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object4('queryTerm', $rows, 'object_owners', array('start_date'=>'start_time', 'end_date'=>'end_time', 'owner'=>'agent'), $object, $res);
	dpm($query);
	return $result_array;	
}

//type = Award nomination
function object_nominations($object, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_object = "<".$object.">";

	//nominations
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT ?queryTerm ?award ?start_date ?agent   WHERE { "
	. " ". $bracketed_object . " fb:award.award_nominated_work.award_nominations ?queryTerm ."
	. " ?queryTerm fb:award.award_nomination.year ?start_date . "
	. " ?queryTerm fb:award.award_nomination.award ?award . "
	. " OPTIONAL {?queryTerm fb:award.award_nomination.award_nominee ?agent} . "
	. " } ";
	
	$rows = execute_sparql_event_query($query);

	$result_array = map_to_event_object4('queryTerm', $rows, 'nomination', array('start_date'=>'start_time', 'award'=>'object', 'agent'=>'agent'), $object, $res);
	return $result_array;
}

//type = Award honor
function object_awards($object, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_object = "<".$object.">";

	//awards
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT ?queryTerm ?award ?start_date ?agent   WHERE { "
	. " ". $bracketed_object . " fb:award.award_winning_work.awards_won ?queryTerm ."
	. " ?queryTerm fb:award.award_honor.year ?start_date . "
	. " ?queryTerm fb:award.award_honor.award ?award . "
	. " OPTIONAL {?queryTerm fb:award.award_honor.award_winner ?agent} . "
	. " } ";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object4('queryTerm', $rows, 'award', array('start_date'=>'start_time', 'award'=>'object', 'agent'=>'agent'), $object, $res);
	return $result_array;
}

//type = exhibition run
function object_exhibition($object, $res = array()) {
	require_once(ARC2FILEPATH);
	$bracketed_object = "<".$object.">";

	//exhibitions
	$query = " PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *   WHERE { "
	. " ". $bracketed_object . " fb:exhibitions.exhibit.exhibitions_displayed_in ?exhibition ."
	. " ?exhibition fb:exhibitions.exhibition.venues ?queryTerm . "
	. " ?queryTerm fb:exhibitions.exhibition_run.venue ?venue . "
	. " OPTIONAL {?queryTerm fb:exhibitions.exhibition_run.opened_on ?start_date} . "
	. " OPTIONAL {?queryTerm fb:exhibitions.exhibition_run.closed_on ?end_date } . "
	. " } ";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_object4('queryTerm', $rows, 'exhibited', array('start_date'=>'start_time', 'end_date'=>'end_time', 'venue'=>'location', 'exhibition'=>'object'), $object, $res);
	return $result_array;
}



function object_queries() {
	require_once(ARC2FILEPATH);
// 	$object = "http://rdf.freebase.com/ns/m.050_704"; //mother and child divided (nom)
// 	$object = "http://rdf.freebase.com/ns/m.0jbg2"; //mona lisa
// 	$object = "http://rdf.freebase.com/ns/m.06l_7n"; //fountain
// 	$object = "http://rdf.freebase.com/ns/m.0hc9x6h"; //The Bodmer Oak (location, own)
	$object = "http://rdf.freebase.com/ns/m.04xswj"; //ophelia (created, location)
	
	$bracketed_object = "<".$object.">";

	$result_array = array();
	
	$result_array = object_created($object, $result_array);

	$result_array = object_location($object, $result_array);

	$result_array = object_owner($object, $result_array);
	
	$result_array = object_nominations($object, $result_array);
	
	$result_array = object_awards($object, $result_array);

	$result_array = object_exhibition($object, $result_array); 
	
// 	save_query_results($agent, $result_array);
	
	dpm($result_array);
}
function exhibition_held_at_venue($exhibition) {
	require_once(ARC2FILEPATH);
	$exhibition = "http://rdf.freebase.com/ns/m.052tvg1";

	$bracketed_exhibition = "<".$exhibition.">";
	$query = " PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *  "
	. " WHERE {  ".$bracketed_exhibition." fb:exhibitions.exhibition.venues ?queryTerm . "
	. " ?queryTerm fb:exhibitions.exhibition_run.venue ?venue . "
	. " OPTIONAL {?queryTerm fb:exhibitions.exhibition_run.opened_on ?start_date} . "
	. " OPTIONAL {?queryTerm fb:exhibitions.exhibition_run.closed_on ?end_date .} } ";

	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_freebase('queryTerm', $rows, 'Exhibition run', array('start_date'=>'start_time', 'end_date'=>'end_time', 'venue'=>'location'), $exhibition, 'object');
	//$result_array = map_to_event_exhibition('queryTerm', $rows, 'exhibition_run', array('start_date'=>'start_time', 'end_date'=>'end_time', 'venue'=>'location'), $exhibition);
	dpm($result_array);
}
//
function exhibition_creation_of_exhibited_objects($exhibition) {
	require_once(ARC2FILEPATH);
	
	$bracketed_exhibition = "<".$exhibition.">";
	
	$query = " PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *  "
	. " WHERE {  ".$bracketed_exhibition." fb:exhibitions.exhibition.exhibits ?object . "
	. " ?agent fb:visual_art.visual_artist.artworks ?object "
	. " { {?object fb:visual_art.artwork.date_begun ?start_date .  ?object  fb:visual_art.artwork.date_completed ?end_date }"
			. " UNION    {?object  fb:visual_art.artwork.date_completed ?start_date . OPTIONAL {?object fb:visual_art.artwork.date_begun ?x}"
					. " . FILTER(!bound(?x)) }}}";

	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_freebase('object', $rows, 'created_object', array('start_date'=>'start_time', 'end_date'=>'end_time', 'agent'=>'agent', 'object'=>'object'), $exhibition, 'exhibition');
	//$result_array = map_to_event_exhibition('object', $rows, 'created_object', array('start_date'=>'start_time', 'end_date'=>'end_time', 'agent'=>'agent'), $exhibition);
	dpm($result_array);
}

function exhibition_queries() {
	$exhibition = "http://rdf.freebase.com/ns/m.052tvg1"; //figure studies
	$exhibition = "http://rdf.freebase.com/ns/m.04d11nr"; //turner prize retrospective

// 	exhibition_held_at_venue($exhibition);
	
// 	exhibition_creation_of_exhibited_objects($exhibition);
}

function gallery_object_owned($gallery) {
	require_once(ARC2FILEPATH);
	
	$bracketed_gallery = "<".$gallery.">";
	
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *   WHERE { "
	. $bracketed_gallery . " fb:visual_art.art_owner.artworks_owned ?queryTerm . "
	. " ?queryTerm fb:visual_art.artwork_owner_relationship.artwork ?object . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.date_acquired ?start_date} . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.purchase_currency ?currency} . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.purchase_price ?price} . "
	. " OPTIONAL {?queryTerm fb:visual_art.artwork_owner_relationship.method_of_acquisition ?method} . "
	. " } ";

	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_freebase('queryTerm', $rows, 'gallery_ownership', array('start_date'=>'start_time', 'object'=>'object'), $gallery, 'owner');
	//$result_array = map_to_event_gallery('queryTerm', $rows, 'gallery_ownership', array('start_date'=>'start_time', 'object'=>'object'), $gallery);
	dpm($result_array);	
}

function gallery_exhibition_held($gallery) {
	require_once(ARC2FILEPATH);
	
	$bracketed_gallery = "<".$gallery.">";
	
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *   WHERE { "
	. $bracketed_gallery . " fb:exhibitions.exhibition_venue.exhibitions_at_this_venue ?queryTerm . "
	. " ?queryTerm fb:exhibitions.exhibition_run.exhibition ?exhibition . "
//	. " ?queryTerm fb:exhibitions.exhibition_run.venue ?location . "
	. " OPTIONAL {?queryTerm fb:exhibitions.exhibition_run.opened_on ?start_date . } "
	. " OPTIONAL {?queryTerm fb:exhibitions.exhibition_run.closed_on ?end_date . } "
	. "}";
	
	$rows = execute_sparql_event_query($query);
	//no need to include the gallery as it is included as the location
	$result_array = map_to_event_freebase('queryTerm', $rows, 'gallery_exhibition', array('start_date'=>'start_time', 'end_date'=>'end_time', 'exhibition'=>'object'), $gallery, 'location');
	//$result_array = map_to_event_gallery('queryTerm', $rows, 'gallery_exhibition', array('start_date'=>'start_time', 'object'=>'object', 'end_date'=>'end_time', 'location'=>'location', 'exhibition'=>'exhibition'), $gallery);
	dpm($result_array);
}

function gallery_queries() {
	$gallery = "http://rdf.freebase.com/ns/m.0136mc"; //Tate
			
// 	gallery_exhibition_held($gallery);
	
	gallery_object_owned($gallery);
}

//type = award honor
function prize_awards($prize) {
	require_once(ARC2FILEPATH);
	$bracketed_prize = "<".$prize.">";	
	
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *   WHERE { "
 	. $bracketed_prize . " fb:award.award_category.winners ?win . "
	. " ?win fb:award.award_honor.award_winner ?agent . "
	. " ?win fb:award.award_honor.year ?start_date . "
	. " OPTIONAL {?win fb:award.award_honor.honored_for ?work }.}";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_freebase('win', $rows, 'prize_awarded', array('start_date'=>'start_time', 'work'=>'object',  'agent'=>'agent'), $prize, 'object');
	//$result_array = map_to_event_prize('win', $rows, 'prize_awarded', array('start_date'=>'start_time', 'work'=>'object',  'agent'=>'agent'), $prize);
	dpm($result_array);
}

function prize_nominations($prize) {
	require_once(ARC2FILEPATH);
	$bracketed_prize = "<".$prize.">";

	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT *   WHERE { "
	. $bracketed_prize . " fb:award.award_category.nominees ?win . "
	. " ?win fb:award.award_nomination.award_nominee ?agent . "
	. " ?win fb:award.award_nomination.year ?start_date . "
	. " OPTIONAL {?win fb:award.award_nomination.nominated_for ?work }.}";

	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_freebase('win', $rows, 'nomination_received', array('start_date'=>'start_time', 'work'=>'object',  'agent'=>'agent'), $prize, 'object');
	//$result_array = map_to_event_nomination('win', $rows, 'nomination_received', array('start_date'=>'start_time', 'work'=>'object',  'agent'=>'agent'), $prize);
	dpm($result_array);
}




function prize_queries() {
	$prize = "http://rdf.freebase.com/ns/m.0133rf"; //Turner prize

// 	prize_awards($prize);
	
	prize_nominations($prize);
	
	
}

function educational_institution_people_studying($educational_institution) {
	require_once(ARC2FILEPATH);
	$bracketed_educational_institution = "<".$educational_institution.">";
	
	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT * WHERE "
	. "  { ".$bracketed_educational_institution." fb:education.educational_institution.students_graduates ?queryTerm . "
    . "  ?queryTerm fb:education.education.student ?agent . "
    . " OPTIONAL {?queryTerm fb:education.education.start_date ?start_date} . "
    . " OPTIONAL {?queryTerm fb:education.education.end_date ?end_date} . "
	. "}";

	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_freebase('queryTerm', $rows, 'studying', array('start_date'=>'start_time', 'end_date'=>'end_time', 'agent'=>'agent'), $educational_institution, 'location');
	//$result_array = map_to_event_nomination('win', $rows, 'nomination_received', array('start_date'=>'start_time', 'work'=>'object',  'agent'=>'agent'), $prize);
	dpm($result_array);	
}

function educational_institution_queries() {
	$educational_institution = "http://rdf.freebase.com/ns/m.015wy_"; //goldsmiths college
	
	educational_institution_people_studying($educational_institution);
}

function organisation_membership($organisation) {
	require_once(ARC2FILEPATH);
	$bracketed_organisation = "<".$organisation.">";

	$query = "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT * WHERE { " 
	. $bracketed_organisation . " fb:organization.membership_organization.members ?queryTerm . "
	. " ?queryTerm fb:organization.organization_membership.member ?agent . "
	. " OPTIONAL {?queryTerm fb:organization.organization_membership.from ?from} . "
	. " OPTIONAL {?queryTerm fb:organization.organization_membership.to ?to} . "
	. " }";
	
	$rows = execute_sparql_event_query($query);
	$result_array = map_to_event_freebase('queryTerm', $rows, 'membership', array('from'=>'start_time', 'to'=>'end_time', 'agent'=>'agent'), $organisation, 'location');
	//$result_array = map_to_event_nomination('win', $rows, 'nomination_received', array('start_date'=>'start_time', 'work'=>'object',  'agent'=>'agent'), $prize);
	dpm($result_array);	
}

function organisation_queries() {
	$organisation = "http://rdf.freebase.com/ns/m.015g1w"; //royal academy
	organisation_membership($organisation);
	
}

function setting_queries() {
// need $time and $place
	$time = "1900";
	$place = "http://rdf.freebase.com/ns/m.04jpl";
	$bracketed_place = "<".$place.">";
	$birth = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "SELECT DISTINCT ?person WHERE {"
	. "  ?person rdf:type fb:visual_art.visual_artist . "
	. " ?person fb:people.person.date_of_birth ?dob.  "
	. "		FILTER regex(?dob, \"^" . $time . "\") "
	. "    ?person fb:type.object.name ?name. FILTER langMatches(lang(?name), \"EN\" )"
	. "    ?person fb:people.person.place_of_birth ".$bracketed_place
	. "}";
	dpm($birth);
	
	$death = "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "SELECT DISTINCT ?person WHERE {"
	. "  ?person rdf:type fb:visual_art.visual_artist . "
	. "    ?person fb:people.deceased_person.date_of_death ?dod."
	. "		FILTER regex(?dod, \"^" . $time . "\") "
	. "    ?person fb:type.object.name ?name. FILTER langMatches(lang(?name), \"EN\" )"
	. "    ?person fb:people.deceased_person.place_of_death ".$bracketed_place
	. "}";
	dpm($death);	

	
	$artwork = "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>"
	. "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "PREFIX dbpedia: <http://dbpedia.org/resource/>"
	. "PREFIX dbp-ont: <http://dbpedia.org/ontology/>"
	. "SELECT DISTINCT ?person ?dob ?dod ?object ?date ?complete ?name WHERE {"
	. "   ?person fb:visual_art.visual_artist.artworks ?object."
	. "	  optional {?person fb:people.person.date_of_birth ?dob.}"
	. "	  optional {?person fb:people.deceased_person.date_of_death ?dod.}"
	. "   ?object fb:type.object.name ?name. FILTER(langMatches(lang(?name), 'EN'))"
	. "   {{?person dbp-ont:wikiPageWikiLink " . $bracketed_place . "} UNION {?object dbp-ont:wikiPageWikiLink <".$place.">}}"
	. "   {{?object fb:visual_art.artwork.date_begun ?date_begun."
	. "         FILTER (regex(?date_begun, \"^" . $time . "\")). } UNION"
	. "    {?object fb:visual_art.artwork.date_completed ?date_complete."
	. "         FILTER (regex(?date_complete, \"^" . $time . "\")).}}"
	. "optional {?object fb:visual_art.artwork.date_begun ?date.}"
	. "optional {?object fb:visual_art.artwork.date_completed ?complete.}"
	. "}";
	dpm($artwork);
	
	
	$acquisitioin = "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>"
	. "PREFIX fb: <http://rdf.freebase.com/ns/>"
	. "PREFIX dbp-ont: <http://dbpedia.org/ontology/>"
	. "PREFIX dbpedia: <http://dbpedia.org/resource/>"
	. "SELECT DISTINCT ?person ?dob ?dod ?object ?date ?name WHERE {"
	. "?person fb:visual_art.visual_artist.artworks ?object."
	. "	optional {?person fb:people.person.date_of_birth ?dob.}"
	. "	optional {?person fb:people.deceased_person.date_of_death ?dod.}"
	. "?object fb:visual_art.artwork.owners ?relationship."
	. "?object fb:type.object.name ?name. FILTER(langMatches(lang(?name), 'EN'))"
	. "?relationship fb:visual_art.artwork_owner_relationship.date_acquired  ?date."
	. "  FILTER (regex(?date, \"^" . $time . "\"))."
	. "?relationship  fb:visual_art.artwork_owner_relationship.owner ?owner."
	. "  {{?object dbp-ont:wikiPageWikiLink <" . $place .">} UNION {?owner dbp-ont:wikiPageWikiLink <". $place .">}}"
	. " }";
	
}



/**
 * function dec_rec_form_config
 */

function dec_rec_form_config(){
    $form['dec_semrecommender_address'] = array(
        '#type' => 'textfield',
        '#title' => t('SemRecommender Address'),
        '#default_value' => variable_get('dec_semrecommender_address'),
        '#description' => t('This recommender provides various subservices via an API.'),
        '#required' => TRUE,
    );   

    return system_settings_form($form);
}

/**
 * function: dec_rec_node_update
 *
 * @param $node
 *   A node
 *
 * Implements hook_node_update
 *
 * Call recommender service when a node is updated, updating the associated recommendations.
 * These calls are to be processed in the background.
 */

function dec_rec_node_update($node){
  background_process_http_request("http://knot09.fit.vutbr.cz:8080/SemRecommender/story/".$node->nid."/recommendEvents/recalculate");
  background_process_http_request("http://knot09.fit.vutbr.cz:8080/SemRecommender/story".$node->nid."recommendBinaryPlots/recalculate");
  background_process_http_request("http://knot09.fit.vutbr.cz:8080/SemRecommender/story".$node->nid."recommendRelatedPlots/recalculate");
}

  /* * **************************************arc2 store configuration*************************************** */
  
  /**
   * arc2 configuration for remote endpoint
   * Remote repository name supplied
   */
  function dec_sesame_endpoint_config($repository) {
  	$config = array(
  			//remote endpoint
  			'remote_store_endpoint' => OPENRDFHOST . 'openrdf-sesame/repositories/' . $repository,
  	);
  	return $config;
  }
  
  function dec_lod_endpoint_config($repository) {
  	$config = array(
  			//remote endpoint
  			'remote_store_endpoint' => 'http://lod.openlinksw.com/sparql',
  	);
  	return $config;
  }

 
  /* * ********************querying the sesame triple store******************************* */
  
  /**
   * Sparql query a sesame repository and get back an array of triples.
   */
  function dec_sparql_query_sesame_store($repository, $query, $param = NULL) {
  	include_once(ARC2FILEPATH);
  	/* configuration */
  	$config = dec_sesame_endpoint_config($repository);
  
  	/* instantiation */
  	$store = ARC2::getRemoteStore($config);
  	//$param might be 'row', 'rows' or 'raw'
  	if (in_array($param, array('row', 'rows', 'raw'))) {
  		$result = $store->query($query, $param);
  	} else {
  		$result = $store->query($query);
  	}
  	return $result;
  }
  
  /* * *********************************translating arc2 triples to different formats********************************* */
  
  /**
   * Translate arc2 triple array into rdfxml
   */
  function dec_triples_to_rdfxml($triples) {
  	include_once(ARC2FILEPATH);
  	$parser = ARC2::getRDFParser();
  	$rdfxml_doc = $parser->toRDFXML($triples);
  	return $rdfxml_doc;
  }
  
  /**
   * Translate arc2 triple array into N-Triples
   */
  function dec_triples_to_ntriple($triples) {
  	include_once(ARC2FILEPATH);
  	$parser = ARC2::getRDFParser();
  	$ntriple_doc = $parser->toNTriples($triples);
  	return $ntriple_doc;
  }
  
  /**
   * Translate arc2 triple array into JSON
   */
  function dec_triples_to_json($triples) {
  	include_once(ARC2FILEPATH);
  	$parser = ARC2::getRDFParser();
  	$json_doc = $parser->toRDFJSON($triples);
  	return $json_doc;
  }
  
  /**
   * Translate arc2 triple array into Turtle
   */
  function dec_triples_to_turtle($triples) {
  	include_once(ARC2FILEPATH);
  	$parser = ARC2::getRDFParser();
  	$turtle_doc = $parser->toTurtle($triples);
  	return $turtle_doc;
  }
  
  
  /* * **************************************sesame API functions*************************************** */
  
  /**
   * Fetch list of all sesame repositories
   */
  function dec_fetch_repository_list() {
  	$url = OPENRDFHOST . 'openrdf-sesame/repositories';
  	$headers = array('Accept' => 'application/sparql-results+xml, */*;q=0.5');
  	$method = 'GET';
  
  	$request = drupal_http_request($url, $headers, $method);
  	$data = $request->data;
  	$xml_array = xml2array($data);
  	dec_debug_message($xml_array["sparql"]["results"]["result"]);
  	foreach ($xml_array["sparql"]["results"]["result"] as $repository_array) {
  		$repositories[] = $repository_array["binding"]["0"]["literal"];
  	}
  	return $repositories;
  }
  
  /**
   * Returns a triple array of all statments in the $repository
   * Use example: dec_fetch_all_statments_from_repository('Celebs')
   */
  function dec_fetch_all_statments_from_repository($repository) {
  	include_once(ARC2FILEPATH);
  	$url = OPENRDFHOST . 'openrdf-sesame/repositories/' . $repository . '/statements';
  	$parser = ARC2::getRDFParser();
  	$parser->parse($url);
  	$triples = $parser->getTriples();
  	return $triples;
  }
  
  /**
   * Returns a triple array of all statments in the $repository for a given $context
   * Use example: dec_fetch_all_statments_from_repository_and_context('joblistings', '<file://job_listings.rdf>');
   */
  function dec_fetch_all_statments_from_repository_and_context($repository, $context) {
  	include_once(ARC2FILEPATH);
  	$url = OPENRDFHOST . 'openrdf-sesame/repositories/' . $repository . '/statements?context=' . $context;
  	$parser = ARC2::getRDFParser();
  	$parser->parse($url);
  	$triples = $parser->getTriples();
  	return $triples;
  }
  
  /**
   * Remove all statments in the repository.
   */
  function dec_reset_sesame_store($repository) {
  	$method = "DELETE";
  	$url = OPENRDFHOST . "openrdf-sesame/repositories/" . $repository . "/statements";
  	$headers = array();
  	$res = drupal_http_request($url, $headers, $method);
  	return $res;
  }
  
  /* An alternative way of resetting the repository by replacing with an emtpy set of triples */
  
  function dec_reset_sesame_store_v2($repository) {
  	$data = "<?xml version=\"1.0\"?><rdf></rdf>";
  	dec_replace_rdf_data_in_repository($repository, $data);
  }
  
  /**
   * Add triples to a sesame repository
   */
  function dec_add_triples_to_sesame_store($repository, $triples) {
  	$data = dec_triples_to_rdfxml($triples);
  	$res = dec_add_rdf_data_to_repository($repository, $data);
  	return $res;
  }
  
  /**
   * Replace triples in a sesame repository (i.e. reset repository then add new triples)
   */
  function dec_replace_triples_in_sesame_store($repository, $triples) {
  	$data = dec_triples_to_rdfxml($triples);
  	$res = dec_replace_rdf_data_in_repository($repository, $data);
  	return $res;
  }
  
  /**
   * Method for deleting triples from sesame repository
   * Requires one http request for each triple so not preferred
   */
  function dec_delete_triples_from_sesame_store($repository, $triples) {
  	foreach ($triples as $triple) {
  		dec_remove_specific_triple_from_repository($repository, "<" . $triple["s"] . ">", "<" . $triple["p"] . ">", "<" . $triple["o"] . ">");
  	}
  }
  
  /**
   * Puts a uri or literal tag around objects for inclusion in a sesame transaction document
   * @param $object
   */
  function dec_tag_object($object) {
  	if (dec_is_uri($object)) {
  		return "<uri>" . $object . "</uri>";
  	} else {
  		return "<literal>" . $object . "</literal>";
  	}
  }
  
  /**
   * Used for adding or removing triples from a sesame repository using a transaction document
   * $action can be 'remove' or 'add'
   * @param $repository
   * @param $triples
   * @param $action
   */
  function dec_send_transaction_document($repository, $triples, $action, $context = NULL, $context_type = NULL) {
  	$data = dec_triples_to_transaction_document($triples, $action, $context, $context_type);
  	$method = "POST";
  	$url = OPENRDFHOST . "openrdf-sesame/repositories/" . $repository . "/statements";
  	$headers = array('Content-Type' => 'application/x-rdftransaction');
  	$res = drupal_http_request($url, $headers, $method, $data);
  	return $res;
  }
  
  function dec_clear_context($repository, $context, $context_type) {
  	$data = "<transaction><clear><contexts><" . $context_type . ">" . $context . "</" . $context_type . "></contexts></clear></transaction>";
  	$method = "POST";
  	$url = OPENRDFHOST . "openrdf-sesame/repositories/" . $repository . "/statements";
  	$headers = array('Content-Type' => 'application/x-rdftransaction');
  	$res = drupal_http_request($url, $headers, $method, $data);
  	return $res;
  }
  
  /**
   * Produce XML data for sesame transaction document from triples
   * @param unknown_type $triples
   * @param unknown_type $action
   */
  function dec_triples_to_transaction_document($triples, $action, $context = NULL, $context_type = NULL) {
  	$output = "<transaction>";
  	if ($context && $context_type) {
  		foreach ($triples as $triple) {
  			if ($triple["p_type"] != 'bnode' && $triple["s_type"] != 'bnode' && $triple["o_type"] != 'bnode') {
  				$ptype = (isset($triple["p_type"])) ? $triple["p_type"] : 'uri';
  				$output .= "<" . $action . ">" . dec_item_and_type_to_xml($triple["s"], $triple["s_type"]) . dec_item_and_type_to_xml($triple["p"], $ptype) . dec_item_and_type_to_xml($triple["o"], $triple["o_type"]) . "<contexts><" . $context_type . ">" . $context . "</" . $context_type . "></contexts>" . "</" . $action . ">";
  			}
  		}
  	} else {
  		foreach ($triples as $triple) {
  			$output .= "<" . $action . ">" . dec_item_and_type_to_xml($triple["s"], $triple["s_type"]) . dec_item_and_type_to_xml($triple["p"], $triple["p_type"]) . dec_item_and_type_to_xml($triple["o"], $triple["o_type"]) . "</" . $action . ">";
  		}
  	}
  	$output .= "</transaction>";
  	return $output;
  }
  
  /**
   * Make an XML transaction document entry from an item (i.e. s, p. o) and its type
   * Fills in a type if not supplied
   * @param unknown_type $item
   * @param unknown_type $type
   */
  function dec_item_and_type_to_xml($item, $type) {
  	if ($type) {
  		$output = '<' . $type . '>' . $item . '</' . $type . '>';
  	} else {
  		$output = dec_tag_object($object);
  	}
  	return $output;
  }
  
  /**
   * Example of how to remove specific statments in a repository.
   * Use subj pred and obj parameters to restrict what is deleted
   * This example deletes statements that have a specific subj
   * It is the same as remove all except for the addition parameter(s)
   */
  function dec_remove_specific_triple_from_repository($repository, $subj, $pred, $obj) {
  	$method = "DELETE";
  	$url = OPENRDFHOST . "openrdf-sesame/repositories/" . $repository . "/statements?subj=" . urlencode($subj) . "&pred=" . urlencode($pred) . "&obj=" . urlencode($obj);
  	$headers = array();
  	$res = drupal_http_request($url, $headers, $method);
  	dec_debug_message($res);
  }
  
  /* Use example
   $data = "<?xml version=\"1.0\"?><rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">
  <rdf:Description about=\"http://www.videodetective.com/titledetails.aspx?publishedid=41210\">
  <dc:title>ADAM AND EVE 17</dc:title>
  </rdf:Description></rdf:RDF>";
  $repository = "Movies";
  dec_add_rdf_data_to_repository($repository, $data);
  */
  
  /**
   * Add rdf $data to $repository
   */
  function dec_add_rdf_data_to_repository($repository, $data) {
  	$method = "POST";
  	$url = OPENRDFHOST . "openrdf-sesame/repositories/" . $repository . "/statements";
  	$headers = array('Content-Type' => 'application/rdf+xml');
  	$res = drupal_http_request($url, $headers, $method, $data);
  	return $res;
  }
  
  /**
   * Add rdf $data to $repository replacing current statments in the repository
   */
  function dec_replace_rdf_data_in_repository($repository, $data) {
  	$method = "PUT";
  	$url = OPENRDFHOST . "openrdf-sesame/repositories/" . $repository . "/statements";
  	$headers = array('Content-Type' => 'application/rdf+xml');
  	$res = drupal_http_request($url, $headers, $method, $data);
  	return $res;
  }
  
  /* Use example
   $data = "<?xml version=\"1.0\"?><rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">
  <rdf:Description about=\"http://semprog.com/schemas/jobboard#san_francisco_ca\">
  <dc:title>San Fran 2</dc:title>
  </rdf:Description></rdf:RDF>";
  replace_rdf_data_in_repository_and_context('joblistings', '<file://job_listings.rdf>', $data);
  */
  
  /**
   * Add rdf $data to $context in $repository
   */
  function dec_replace_rdf_data_in_repository_and_context($repository, $context, $data) {
  	$method = "PUT";
  	$url = OPENRDFHOST . "openrdf-sesame/repositories/" . $repository . "/statements?context=" . $context;
  	$headers = array('Content-Type' => 'application/rdf+xml');
  	$res = drupal_http_request($url, $headers, $method, $data);
  	dec_debug_message($res);
  }
  
  /* * **************************************Utility functions*************************************** */
  
  
  /* Use example
   $namespaces = array(array('prefix'=>'dc', 'path'=>'http://purl.org/dc/elements/1.1/'),
   		array('prefix'=>'rdfs', 'path'=>'http://www.w3.org/2000/01/rdf-schema#'),
   		array('prefix'=>'jobs', 'path'=>'http://www.medev.ac.uk/interoperability/rss/1.0/modules/jobs/rss1.0jobsmodule#'),
   		array('prefix'=>'foaf', 'path'=>'http://xmlns.com/foaf/0.1/'),
   		array('prefix'=>'jobboard', 'path'=>'http://semprog.com/schemas/jobboard#'),
   		array('prefix'=>'company', 'path'=>'http://purl.org/rss/1.0/modules/company/'),
   		array('prefix'=>'rdf', 'path'=>'http://www.w3.org/1999/02/22-rdf-syntax-ns#')
   );
  dec_generate_prefixes($namespaces);
  */
  
  /**
   * Return prefixes as a string given an array of namespaces and their abbreviations
   */
  function dec_generate_prefixes($namespaces) {
  	$prefixes = '';
  	foreach ($namespaces as $namespace) {
  		$prefixes .= 'PREFIX ' . $namespace['prefix'] . ':<' . $namespace['path'] . '> ';
  	}
  	return $prefixes;
  }
  
  /**
   * Create hyperlink for use in the RDF browser
   */
  function dec_rdf_link($object) {
  	$output = '';
  	if (dec_is_uri($object)) {
  		$output .= l($object, 'rdfbrowser/' . compress_string('<' . $object . '>'));
  	} else {
  		$output = $object;
  	}
  	return $output;
  }
  
  /**
   * Test for uri/link (i.e. non literal). Used with RDF browser
   */
  function dec_is_uri($string) {
  	$pos = strpos($string, "http:/");
  	if ($pos !== false && $pos == 0) {
  		return true;
  	} else {
  		$pos = strpos($string, "file:/");
  		if ($pos !== false && $pos == 0) {
  			return true;
  		} else {
  			return false;
  		}
  	}
  }
  
  /**
   * Update an object with its title if known
   * Used with the RDF browser
   */
  function dec_update_title_check($pred, $obj) {
  	//if($pred === "http://purl.org/dc/elements/1.1/title" || $pred === "http://purl.org/rss/1.0/modules/company/name") {
  	//    drupal_set_title($obj);
  	//}
  }
  
  /**
   * This is a debug function that prints a given variable to drupal message area
   * It uses output buffers (ob_start, ob_get_clean) and var_dump
   */
  function dec_debug_message($var_to_dump) {
  	ob_start();
  	var_dump($var_to_dump);
  	drupal_set_message('<pre>' . check_plain(ob_get_clean()) . '</pre>');
  }
  
  /**
   * Takes an array of triples and returns a subject-predicate-object table
   */
  function dec_triples_to_table($triples) {
  	$headers = array("Subject", "Predicate", "Object");
  	$rows = array();
  	foreach ($triples as $triple) {
  		$row = array($triple["s"], $triple["p"], $triple["o"]);
  		$rows[] = $row;
  	}
  
  	return theme_table(headers, rows);
  	//return theme_table(array("header"=>$headers, "rows"=>$rows, 'attributes' => array(), 'empty' => array(), 'caption' => '', 'colgroups' => array(), 'sticky' => TRUE));
  }
  
  /**
   * Functions to compress and decompress a string
   * Used to pass a uri as an arg in the Drupal path
   */
  function compress_string($string) {
  	return urlsafe_base64_encode(gzcompress($string, 9));
  }
  
  function decompress_string($string) {
  	return gzuncompress(urlsafe_base64_decode($string));
  }
  
  function urlsafe_base64_encode($string) {
  	$data = base64_encode($string);
  	$data = str_replace(array('+', '/', '='), array('-', '_', ''), $data);
  	return $data;
  }
  
  function urlsafe_base64_decode($string) {
  	$data = str_replace(array('-', '_'), array('+', '/'), $string);
  	$mod4 = strlen($data) % 4;
  	if ($mod4) {
  		$data .= substr('====', $mod4);
  	}
  	return base64_decode($data);
  }
  
  /**
   * xml2array() will convert the given XML text to an array in the XML structure.
   * Link: http://www.bin-co.com/php/scripts/xml2array/
   * Arguments : $contents - The XML text
   *                $get_attributes - 1 or 0. If this is 1 the function will get the attributes as well as the tag values - this results in a different array structure in the return value.
   *                $priority - Can be 'tag' or 'attribute'. This will change the way the resulting array sturcture. For 'tag', the tags are given more importance.
   * Return: The parsed XML in an array form. Use print_r() to see the resulting array structure.
   * Examples: $array =  xml2array(file_get_contents('feed.xml'));
   *              $array =  xml2array(file_get_contents('feed.xml', 1, 'attribute'));
   */
  function xml2array($contents, $get_attributes = 1, $priority = 'tag') {
  	if (!$contents)
  		return array();
  
  	if (!function_exists('xml_parser_create')) {
  		//print "'xml_parser_create()' function not found!";
  		return array();
  	}
  
  	//Get the XML parser of PHP - PHP must have this module for the parser to work
  	$parser = xml_parser_create('');
  	xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, "UTF-8"); # http://minutillo.com/steve/weblog/2004/6/17/php-xml-and-character-encodings-a-tale-of-sadness-rage-and-data-loss
  	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
  	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  	xml_parse_into_struct($parser, trim($contents), $xml_values);
  	xml_parser_free($parser);
  
  	if (!$xml_values)
  		return; //Hmm...
  
  
  
  	//Initializations
  	$xml_array = array();
  	$parents = array();
  	$opened_tags = array();
  	$arr = array();
  
  	$current = &$xml_array; //Refference
  	//Go through the tags.
  	$repeated_tag_index = array(); //Multiple tags with same name will be turned into an array
  	foreach ($xml_values as $data) {
  		unset($attributes, $value); //Remove existing values, or there will be trouble
  		//This command will extract these variables into the foreach scope
  		// tag(string), type(string), level(int), attributes(array).
  		extract($data); //We could use the array by itself, but this cooler.
  
  		$result = array();
  		$attributes_data = array();
  
  		if (isset($value)) {
  			if ($priority == 'tag')
  				$result = $value;
  			else
  				$result['value'] = $value; //Put the value in a assoc array if we are in the 'Attribute' mode
  		}
  
  		//Set the attributes too.
  		if (isset($attributes) and $get_attributes) {
  			foreach ($attributes as $attr => $val) {
  				if ($priority == 'tag')
  					$attributes_data[$attr] = $val;
  				else
  					$result['attr'][$attr] = $val; //Set all the attributes in a array called 'attr'
  			}
  		}
  
  		//See tag status and do the needed.
  		if ($type == "open") {//The starting of the tag '<tag>'
  			$parent[$level - 1] = &$current;
  			if (!is_array($current) or (!in_array($tag, array_keys($current)))) { //Insert New tag
  				$current[$tag] = $result;
  				if ($attributes_data)
  					$current[$tag . '_attr'] = $attributes_data;
  				$repeated_tag_index[$tag . '_' . $level] = 1;
  
  				$current = &$current[$tag];
  			} else { //There was another element with the same tag name
  				if (isset($current[$tag][0])) {//If there is a 0th element it is already an array
  					$current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;
  					$repeated_tag_index[$tag . '_' . $level]++;
  				} else {//This section will make the value an array if multiple tags with the same name appear together
  					$current[$tag] = array($current[$tag], $result); //This will combine the existing item and the new item together to make an array
  					$repeated_tag_index[$tag . '_' . $level] = 2;
  
  					if (isset($current[$tag . '_attr'])) { //The attribute of the last(0th) tag must be moved as well
  						$current[$tag]['0_attr'] = $current[$tag . '_attr'];
  						unset($current[$tag . '_attr']);
  					}
  				}
  				$last_item_index = $repeated_tag_index[$tag . '_' . $level] - 1;
  				$current = &$current[$tag][$last_item_index];
  			}
  		} elseif ($type == "complete") { //Tags that ends in 1 line '<tag />'
  			//See if the key is already taken.
  			if (!isset($current[$tag])) { //New Key
  				$current[$tag] = $result;
  				$repeated_tag_index[$tag . '_' . $level] = 1;
  				if ($priority == 'tag' and $attributes_data)
  					$current[$tag . '_attr'] = $attributes_data;
  			} else { //If taken, put all things inside a list(array)
  				if (isset($current[$tag][0]) and is_array($current[$tag])) {//If it is already an array...
  					// ...push the new element into that array.
  					$current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;
  
  					if ($priority == 'tag' and $get_attributes and $attributes_data) {
  						$current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
  					}
  					$repeated_tag_index[$tag . '_' . $level]++;
  				} else { //If it is not an array...
  					$current[$tag] = array($current[$tag], $result); //...Make it an array using using the existing value and the new value
  					$repeated_tag_index[$tag . '_' . $level] = 1;
  					if ($priority == 'tag' and $get_attributes) {
  						if (isset($current[$tag . '_attr'])) { //The attribute of the last(0th) tag must be moved as well
  							$current[$tag]['0_attr'] = $current[$tag . '_attr'];
  							unset($current[$tag . '_attr']);
  						}
  
  						if ($attributes_data) {
  							$current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
  						}
  					}
  					$repeated_tag_index[$tag . '_' . $level]++; //0 and 1 index is already taken
  				}
  			}
  		} elseif ($type == 'close') { //End of tag '</tag>'
  			$current = &$parent[$level - 1];
  		}
  	}
  
  	return($xml_array);
  }

  
  function dec_mql_test6() {
  	 
  	$service_url = 'https://www.googleapis.com/freebase/v1/topic';
  	$topic_id = "/m/01qwfk";
  	$topic_id = "/m/06j6l";
//   	$freebase_api_key = 'AIzaSyBYyj76m4jLMbI1ZQH06-OiSmfUwfwKz8k';
//   	$params = array('key'=>$freebase_api_key);
  	$url = $service_url . $topic_id . '?filter=/common/topic/description'.'&key='.GOOGLEAPIKEY;// . http_build_query($params);
  	$ch = curl_init();
  	curl_setopt($ch, CURLOPT_URL, $url);
  	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  	$topic = json_decode(curl_exec($ch), true);
  	curl_close($ch);
  	dpm($topic);
  	//   	echo $topic['property']['/type/object/name']['values'][0]['value'];
  }
  
  
  function dec_mql_test5() {
  	$simplequery = array('id'=>'/topic/en/philip_k_dick', '/film/film_story_contributor/film_story_credits'=>array());
  	$jsonquerystr = json_encode($simplequery);
  	// The Freebase API requires a query envelope (which allows you to run multiple queries simultaneously) so we need to wrap our original, simplequery structure in two more arrays before we can pass it to the API:
  	$queryarray = array('q1'=>array('query'=>$simplequery));
  	$jsonquerystr = json_encode($queryarray);
  	// To send the JSON formatted MQL query to the Freebase API use cURL:
  	#run the query
  	$apiendpoint = "http://api.freebase.com/api/service/mqlread?queries";
  	$ch = curl_init();
  	curl_setopt($ch, CURLOPT_URL, "$apiendpoint=$jsonquerystr");
  	curl_setopt($ch, CURLOPT_HEADER, 0);
  	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  	$jsonresultstr = curl_exec($ch);
  	curl_close($ch);
  	// Decoding the JSON structure back into arrays is performed using json_decode as in:
  	$resultarray = json_decode($jsonresultstr, true); #true:give us the json struct as an associative array
  	// Iterating over the pieces of the resultarray containing films gives us the films Philip K. Dick wrote:
  	
  	if($resultarray['code'] == '/api/status/ok'){
  		$films = $resultarray['q1']['result']['/film/film_story_contributor/film_story_credits'];
  		foreach ($films as $film){
  			print "$film</br>";
  		}
  		}
  		dpm($apiendpoint);
  		dpm($resultarray);
  		dpm($films);
  }

function dec_mql_test4() {
  	$simplequery = array(array(
  "mid"=> "/m/050_704",
  "/award/award_nominated_work/award_nominations"=> (array(
    "year"=> null,
    "award"=> array(
      "mid"=> array()
    ),
    "award_nominee"=> array(array(
      "mid"=> null
    ))
  ))
));
  	$simplequery = array(array(
  			"mid"=> "/m/050_704",
  			"type"=> (array(
  			))
  	));
//   	$simplequery = array(array(
//   "mid"=> "/m/0hc9x6h",
//   "/visual_art/artwork.owners"=> (array(
//     "year"=> null,
//     "award"=> array(
//       "mid"=> array()
//     ),
//     "award_nominee"=> array(array(
//       "mid"=> null
//     ))
//   ))
// ));
//   	$simplequery = array("type" => "/music/artist",
//   			"id" => "/en/the_police",
//   			"album" => array());  	
  	$jsonquerystr = urlencode(json_encode($simplequery));
  	#run the query
  	$queryurl='https://www.googleapis.com/freebase/v1/mqlread?query='.$jsonquerystr.'&key='.GOOGLEAPIKEY;
//   	$apiendpoint = "https://www.googleapis.com/freebase/v1/mqlread?query";

  	$ch = curl_init();
  	curl_setopt($ch, CURLOPT_URL, $queryurl);
  	curl_setopt($ch, CURLOPT_HEADER, 0);
  	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  	$jsonresultstr = curl_exec($ch);
  	curl_close($ch);
  	$resultarray = json_decode($jsonresultstr, true); #true:give us the json struct as an array
  	
  	$res = array();

  	dec_debug_message($resultarray);
  }
  
//   function dec_mql_test3() {
  	
//   	$service_url = 'https://www.googleapis.com/freebase/v1/topic';
//   	$topic_id = '/en/bob_dylan';
// 	$topic_id = "/m/01qwfk";

//   	$params = array('key'=>$freebase_api_key);
//   	$url = $service_url . $topic_id . '?' . http_build_query($params);
//   	$ch = curl_init();
//   	curl_setopt($ch, CURLOPT_URL, $url);
//   	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
//   	$topic = json_decode(curl_exec($ch), true);
//   	curl_close($ch);
//   	dpm($topic);
// //   	echo $topic['property']['/type/object/name']['values'][0]['value'];
//   }  
  
  function dec_mql_test2() {
//   	$simplequery = array('id' => '/topic/en/philip_k_dick', '/book/author/works_written' => array());
   	$simplequery = array("type" => "/music/artist",
  			"id" => "/en/the_police",
  			"album" => array()); 

   	$jsonquerystr = urlencode(json_encode($simplequery));
  	$freebase_api_key = 'AIzaSyBYyj76m4jLMbI1ZQH06-OiSmfUwfwKz8k';
//   	$queryarray = array('q0' => array('query' => $simplequery));
//   	$jsonquerystr = urlencode(json_encode($queryarray));
  	#run the query
  	$bar='https://www.googleapis.com/freebase/v1/mqlread?query='.$jsonquerystr;
  	$apiendpoint = "https://www.googleapis.com/freebase/v1/mqlread?query";
//   	$apiendpoint = "http://api.freebase.com/api/service/mqlread?queries";
  	$ch = curl_init();
  	curl_setopt($ch, CURLOPT_URL, $bar);
//   	curl_setopt($ch, CURLOPT_URL, "$apiendpoint=$jsonquerystr");
  	curl_setopt($ch, CURLOPT_HEADER, 0);
  	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  	$jsonresultstr = curl_exec($ch);
  	curl_close($ch);
  	$resultarray = json_decode($jsonresultstr, true); #true:give us the json struct as an array
  	dec_debug_message($resultarray);
  }
  
  function dec_mql_test() {
  	$metaweb = new Metaweb();
  	//$query = array(array('id' => NULL, 'name' => NULL, 'type' => '/astronomy/planet'));
  	//$query = array(array('id' => NULL, 'name' => NULL, 'type' => '/astronomy/planet'));
  
  	$query = array("id" => "/en/gabriel_metsu",
  			"/visual_art/visual_artist/artworks" => array(array("name" => NULL, "date_begun" => NULL, "date_completed" => NULL)));
  
  	//$query = array(array("id" => NULL, "type" => array(array('name' => NULL)), "name" => "Jimi Hendrix"));
  	
  	$query = array("type" => "/music/artist",
  			"id" => "/en/the_police",
  			"album" => array()); 
  	//$query = array("id" => "/en/gabriel_metsu",
  	//              "/visual_art/visual_artist/artworks" => array(array("name" => NULL, "date_begun" => NULL, "date_completed" => NULL)));
  
//   	$query = array("id" => "/en/harrison_ford", "/people/person/date_of_birth" => NULL);
  
//     $query = array("id" => "/en/harrison_ford", "type" => "/film/actor", "film" => array(array("film" => array())));
  
      		$query = array("id" => "/en/harrison_ford", "type" => "/film/actor", "film" => array(array("film" => array(array("name" => null, "directed_by" => array())))));
  
//       				$query = array("id" => "/en/harrison_ford", "type" => "/film/actor", "film" => array(array("film" => array(array("name" => null, "directed_by" => array("name" => null, "/people/person/gender" => "Female"))))));
  
//     $query = array(array("name" => null, "type" => "/film/film", "directed_by" => array(array("name" => null, "/people/person/gender" => "Female"))));
  
//     $query = array("id" => "/en/gabriel_metsu",
//         "/visual_art/visual_artist/artworks" => array(array("id" => NULL, "date_begun" => NULL, "date_completed" => NULL, "/common/image/appears_in_topic_gallery" => null)));
  
//           		$query = array("id" => "/en/lady_reading_a_letter", "/common/topic/image" => array(array("id" => null, "optional" => TRUE, "limit" => 3)));

     dpm($query);   		
     $result = $metaweb->read($query);
   		dpm($result);
  }
  
  ///////
  //require "/Applications/MAMP/htdocs/drupal-6.19/sites/all/modules/custom/dec_api/JSON/JSON.php"; // A JSON encoder/decoder from http://pear.php.net
  require "JSON/JSON.php"; // A JSON encoder/decoder from http://pear.php.net
  
  class Metaweb {
  
  	var $json;  // Holds the JSON encoder/decoder object
  	var $URL = "http://api.freebase.com/api/service/mqlread";
 
  	// Our constructor function sets up the JSON encoder/decoder
  	function Metaweb() {
  		// Set up our JSON encoder and decoder object
  		$this->json = new Services_JSON(SERVICES_JSON_LOOSE_TYPE);
  	}
  
  	// This method submits a query and synchronously returns its result.
  	function read($queryobj) {
  		// Put the query into an envelope object
  		$envelope = array("query" => $queryobj);
  
  		// Serialize the envelope object to JSON text
  		$serialized = $this->json->encode($envelope);
  
  		// Then URL encode the serialized text
  		$encoded = urlencode($serialized);
  
  		// Now build the URL that represents the query
  		//$url = $this->URL . "?query=" . $encoded;
  		$url = $this->URL . "?query=" . $encoded;
  		//dec_debug_message($url);
  		// Use the curl library to send the query and get response text
  		$request = curl_init($url);
  
  		// Return the result instead of printing it out.
          		curl_setopt($request, CURLOPT_RETURNTRANSFER, TRUE);
  
          		// Now fetch the URL
          		$responsetext = curl_exec($request);
          		curl_close($request);
  
          		// Parse the server's response from JSON text into a PHP array
          		$response = $this->json->decode($responsetext);
  
          		// Return null if the query was not successful
          		if ($response["code"] !== "/api/status/ok")
              return null;
  
              // Otherwise, return the query result from the envelope
              return $response["result"];
  	}
  
  	}
  
  	function dec_get_image_url_from_freebase_id($id) {
  	$metaweb = new Metaweb();
  	$query = array("id" => $id, "/common/topic/image" => array(array("id" => null, "optional" => TRUE, "limit" => 3)));
  			$result = $metaweb->read($query);
  			dec_debug_message($result);
  			$image_id = $result["/common/topic/image"][0]["id"];
  					$image_url = "http://img.freebase.com/api/trans/raw/" . $image_id;
  							return $image_url;
  	}
 
  	function dec_get_image_url_from_freebase_id2($id) {
  		
  	}

  	function dec_translate_freebase_id_to_dereferenceable_uri($fb_id) {
  		//remove first slash
  		$string = substr($fb_id, 1);
  		//replace slahes with dots
  		$string = str_replace("/", ".", $string);
  		//append to base uri http://rdf.freebase.com/ns/
  		$string = "http://rdf.freebase.com/ns/" . $string;
  		return $string;
  	}
  	
  	function dec_is_freebase_id($uri_key) {
  		return preg_match("/^\/(en|m)\//", $uri_key);
  	}
  	 
  
  
  
  
  
  
  
 