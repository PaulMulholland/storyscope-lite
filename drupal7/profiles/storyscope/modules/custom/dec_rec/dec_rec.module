
<?php
/**
 * file: dec_rec.module
 *
 * New DECIPHER SemRecommender service. 
 *
 * Paul Mulholland <p.mulholland@open.ac.uk>
 *
 */

function timeline_path_key() {
	if(isset($_GET['storytag'])) {
		return '/'.current_path().$_GET['storytag'];
	}
	else {
		if(request_path()) {
			return '/'.request_path();
		}
		else {
			return '/front';
		}
	}
}

/*
 * Add required parameters when tag or setting space is returned for a story search
 */
function story_search_link_check($title,$link,$args) {
	$link_array = explode('/',$link);
	$link_end = end($link_array);
	$params = drupal_get_query_parameters();
	//is last param stories
	if($link_end == 'stories') {
		//add storytag to $query
		$args['query']['storytag'] = $params['storytag'];
		
	}
	
	//is last param settingstories
	if($link_end == 'settingstories') {
		//add storylocation storytime storyend to $query
		$args['query']['storylocation'] = $params['storylocation'];
		$args['query']['storytime'] = $params['storytime'];
		$args['query']['storyend'] = $params['storyend'];
	}
	return l($title,$link,$args);
}

function add_story_search_parameters() {
	$params = drupal_get_query_parameters();
	$path_array = explode('/',request_path());
	if(end($path_array) == 'stories') {
		return '&storytag='.$params['storytag'];
	}
	elseif(end($path_array) == 'settingstories') {
		return '&storylocation='.$params['storylocation'].'&storytime='.$params['storytime'].'&storyend='.$params['storyend'];
	}
	return '';
}

function storysettinglink($label, $link, $args = array()) {
	$link_args = array_merge($args, array('query'=>array('tag'=>$link)));
	return l($label,request_path(), $link_args);
}

function storytaglink($label, $link, $args = array()) {
	$link_args = array_merge($args, array('query'=>array('tag'=>$link)));
	return l($label,request_path(), $link_args);
}

/**
 * Admin settings for the module
 */
function dec_rec_admin() {
	$form = array();
	$form['dec_rec_key'] = array(
			'#type' => 'textfield',
			'#title' => t('Google API Key'),
			'#default_value' => variable_get('dec_rec_key', ''),
			'#size' => 60,
			'#maxlength' => 100,
			'#description' => t("Google API key to be used to retrieve Freebase data."),
			'#required' => TRUE,
	);
	$form['dec_rec_alchemy'] = array(
			'#type' => 'textfield',
			'#title' => t('AlchemyAPI Key'),
			'#default_value' => variable_get('dec_rec_alchemy', ''),
			'#size' => 60,
			'#maxlength' => 100,
			'#description' => t("AlchemyAPI key to be used to identify Freebase terms from story text."),
			'#required' => TRUE,
	);
	$form['dec_rec_timeline'] = array(
			'#type' => 'textfield',
			'#title' => t('Location of timeline.js code'),
			'#default_value' => variable_get('dec_rec_timeline', ''),
			'#size' => 60,
			'#maxlength' => 100,
			'#description' => t("Location of timeline file. If you have not installed it elsewhere then use http://cdn.knightlab.com/libs/timeline/latest/js/storyjs-embed.js"),
			'#required' => TRUE,
	);
	return system_settings_form($form);
}

/**
 * Retrieve API key from configuration variable and build URL variable
 */
function get_google_api_key_path($connector = '&') {
	$googleapikey = variable_get("dec_rec_key", "");
	if($googleapikey == "") {
		return "";
	}
	else {
		return $connector."key=".$googleapikey;
	}
}

/**
 * Retrieve AlchemyAPI key
 */
function get_alchemy_api_key_path() {
	$key = variable_get("dec_rec_alchemy", "");
	if($key == "") {
		return "";
	}
	else {
		return $key;
	}
}

/**
 * Retrieve location of timeline code
 */
function get_timeline_path() {
	$timelinepath = variable_get("dec_rec_timeline", "");
	if($timelinepath == "") {
		return "http://cdn.knightlab.com/libs/timeline/latest/js/storyjs-embed.js";
	}
	else {
		return $timelinepath;
	}
}

/**
 * Add FooTable JS 
 *
 * Implements hook_preprocess_node().
 */
function dec_rec_preprocess_page() { 
  // Locate the FooTables JS library.
  drupal_add_library('footable', 'footable');
  drupal_add_js(drupal_get_path('module', 'footable') . '/js/caller.js');
  drupal_add_js('profiles/storyscope/libraries/FooTable/js/footable.sort.js');
  drupal_add_js('profiles/storyscope/libraries/FooTable/js/footable.filter.js');
}


/**
 * Menu items for the recommender
 */
function dec_rec_menu(){
   $items['admin/settings/dec_rec'] = array(
    'title' => 'Recommender module settings',
    'description' => 'Description of Recommender module settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dec_rec_admin'),
    'access arguments' => array('administer dec_rec settings'),
    'type' => MENU_NORMAL_ITEM,
   );
//     $items['timeline_for_tags/%'] = array(
// 	 'title' => 'Story timeline',
// 	 'description' => 'Timeline for a list of tags.',
// 	 'page callback' => 'dec_timeline_for_tags',
//      'page arguments' => array(1),
// 	'access callback' => TRUE,
//      );
//       $items['storyid/%'] = array(
// 	 'title' => 'Story',
// 	 'description' => 'Display information for a story.',
// 	 'page callback' => 'dec_story',
//      'page arguments' => array(1),
// 	'access callback' => TRUE,
//      );
//    	$items['timeline_for_setting'] = array(
// 	 'title' => 'Timeline',
// 	 'description' => 'Display timeline for a setting.',
// 	 'page callback' => 'dec_timeline_for_setting',
// 	'access callback' => TRUE,
//      );
//       $items['timeline/%/%'] = array(
// 	 'title' => 'Timeline',
// 	 'description' => 'Display timeline for a single freebase topic.',
// 	 'page callback' => 'dec_timeline',
//      'page arguments' => array(1,2),
// 	'access callback' => TRUE,
//      );
//       $items['timeline/%'] = array(
// 	 'title' => 'Timeline',
// 	 'description' => 'Display timeline for a single tag that is not freebase topic, i.e. a timestamp.',
// 	 'page callback' => 'dec_timeline',
//      'page arguments' => array(1),
// 	'access callback' => TRUE,
//      );
      $items['reset'] = array(
	 'title' => 'Reset',
	 'description' => 'Used for resetting the cached database of freebase data.',
	 'page callback' => 'dec_reset',
	'access callback' => TRUE,
     );
//      $items['tag/%/%'] = array(
// 	 'title' => 'Tag',
// 	 'description' => 'Display data for a story tag.',
// 	 'page callback' => 'dec_tag',
//      'page arguments' => array(1,2),
// 	'access callback' => TRUE,
//      );
//      $items['tag/%'] = array(
//      'title' => 'Tag',
//      'description' => 'Display data for a story tag that is not freebase topic, i.e. a timestamp.',
//      'page callback' => 'dec_tag',
//      'page arguments' => array(1),
//      'access callback' => TRUE,
//      );
     $items['tagtimelinedata/%/%'] = array(
	 'title' => 'Tag',
	 'description' => 'Return JSON feed for timeline associated with a freebase topic.',
	 'page callback' => 'tagtimelinedata',
     'page arguments' => array(1,2),
	'access callback' => TRUE,
     );
     $items['tagtimelinedata/%'] = array(
	 'title' => 'Tag',
	 'description' => 'Return JSON feed for timeline associated with a tag that is not freebase topic, i.e. a timestamp.',
	 'page callback' => 'tagtimelinedata',
     'page arguments' => array(1),
	'access callback' => TRUE,
     );
//      $items['tags'] = array(
// 	 'title' => 'Tags',
// 	 'description' => 'Display data for a set of tags.',
// 	 'page callback' => 'dec_tags',
// 	'access callback' => TRUE,
//      );
     $items['tagstimelinedata/%'] = array(
	 'title' => 'Tags',
	 'description' => 'Return JSON feed for timeline associated with a set of tags.',
	 'page callback' => 'tagstimelinedata',
     'page arguments' => array(1),
	'access callback' => TRUE,
     );
     $items['settingtimelinedata'] = array(
	 'title' => 'Setting',
	 'description' => 'Return JSON feed for timeline associated with a setting.',
	 'page callback' => 'settingtimelinedata',
	'access callback' => TRUE,
     );
//       $items['setting'] = array(
// 	 'title' => 'Setting',
// 	 'description' => 'Display data for a setting.',
// 	 'page callback' => 'dec_setting',
// 	'access callback' => TRUE,
//      );
     return $items;
}

/**
 * Ctools plugin directory
 */
function dec_rec_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Admin for story event space
 */
function dec_rec_story_event_space_admin_info($subtype, $conf, $contexts) {
	if (!empty($conf)) {
		$block = new stdClass;
		$block->title = $conf['override_title'] ? $conf['override_title_text'] : '';
		$block->content = t('Showing event space for a story.');
		return $block;
	}
}

/**
 * Placeholder configuration form for the story event space
 */
function dec_rec_story_event_space_edit_form($form, &$form_state) {
	$conf = $form_state['conf'];

	$form['username'] = array(
			'#title' => t('Configuration option'),
			'#description' => t('Configuration options e.g. what to show can be added here if required. This is a placeholder.'),
			'#type' => 'textfield',
			'#default_value' => $conf['username'],
			'#required' => TRUE,
	);

	return $form;
}

/**
 * Form submit for the placeholder configuration form for the story event space
 */
function dec_rec_story_event_space_edit_form_submit($form, &$form_state) {
	foreach (array_keys($form_state['plugin']['defaults']) as $key) {
		if (isset($form_state['values'][$key])) {
			$form_state['conf'][$key] = $form_state['values'][$key];
		}
	}
}

/**
 * Constructs event space block from arguments passed from the view/ctools
 */
function story_event_space_block($type, $subtype, $args) {
	$block = new stdClass();
	$block->id = 'story_event_space_block';
	if(isset($args['space'])) {
		if($args['space'] == 'tag') {
	 		$block->title = '';
	 		$data['concept_space'] = dec_tag($args['focus']);
	 		$data['title'] = 'Tag concept space';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=>$data);
		}
		elseif($args['space'] == 'story') {
			$block->title = '';
			$data['concept_space'] = dec_story($args['focus']);
			$data['title'] = 'Story concept space';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
		elseif($args['space'] == 'setting') {
			$block->title = '';
			$data['concept_space'] = dec_setting($args['location'], $args['time'], $args['end']);
			$data['title'] = 'Setting concept space';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
		elseif($args['space'] == 'tags') {
			$block->title = '';
			$data['concept_space'] = dec_tags($args['focus']);
			$data['title'] = 'Tags concept space';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
		elseif($args['space'] == 'timeline') {
			$block->title = '';
			$data['concept_space'] = dec_timeline($args['focus']);
			$data['title'] = 'Tag timeline';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
		elseif($args['space'] == 'timeline_for_tags') {
			$block->title = '';
			$data['concept_space'] = dec_timeline_for_tags($args['focus']);
			$data['title'] = 'Tags timeline';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
		elseif($args['space'] == 'timeline_for_setting') {
			$block->title = '';
			$data['concept_space'] = dec_timeline_for_setting($args['focus'],$args['time'],$args['end']);
			$data['title'] = 'Setting timeline';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
		elseif($args['space'] == 'dossier_theme') {
			$block->title = '';
			$data['concept_space'] = dec_dossier_themes($args['focus']);
			$data['title'] = 'Setting timeline';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
		elseif($args['space'] == 'storyscope_theme') {
			$block->title = '';
			$data['concept_space'] = dec_installation_themes();
			$data['title'] = 'Setting timeline';
			$block->content = array('#theme'=>'story_event_space_block',
					'#content'=> $data);
		}
	}
	return $block;
}

/**
 * Theme for the event space block
 */
function dec_rec_theme() {
	return array(
			'story_event_space_block' => array(
					'render element' => 'data',
					'template' => 'plugins/templates/story_event_space'
			),
	);
}

/**
 * Information for the event space block
 */
function dec_rec_block_info() {
	$blocks = array();
	$blocks['story_event_space_block'] = array(
			'info' => t('Story event space block'),
			'region' => 'footer',
			'status' => 1,
			'visibility' => BLOCK_VISIBILITY_NOTLISTED,
			'pages' => 'front',
	);
	return $blocks;
}

/**
 * View for the event space block.
 */
function dec_rec_block_view($delta = '') {
	ctools_include('content');
	$block = array();
	switch ($delta) {
		case 'story_event_space_block':
			// assemble the params for ctools_content_render()
			$type = 'story_event_space';
			$subtype = 'story_event_space';
			$conf = NULL;
			$keywords = $contexts = array();
			if(isset($_GET['tag'])) {
				$tag = $_GET['tag'];
				$args = array('space'=>'tag',
						'focus'=>$tag);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['location']) && isset($_GET['time'])) {
				$location = $_GET['location'];
				$time = $_GET['time'];
				if(isset($_GET['end'])) {
					$end = $_GET['end'];
				}
				else {
					$end = 0;
				}
				$args = array('space'=>'setting',
						'location'=>$location, 'time'=>$time, 'end'=>$end);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				// pass the plugin content to our .tpl.php file via hook_theme()
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['story'])) {
				$story = $_GET['story'];
				$args = array('space'=>'story',
						'focus'=>$story);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				// pass the plugin content to our .tpl.php file via hook_theme()
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['list'])) {
				$taglist = $_GET['list'];
				$args = array('space'=>'tags',
						'focus'=>$taglist);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				// pass the plugin content to our .tpl.php file via hook_theme()
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['timeline'])) {
				$timeline = $_GET['timeline'];
				$args = array('space'=>'timeline',
						'focus'=>$timeline);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				// pass the plugin content to our .tpl.php file via hook_theme()
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['timeline_for_tags'])) {
				$timeline = $_GET['timeline_for_tags'];
				$args = array('space'=>'timeline_for_tags',
						'focus'=>$timeline);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				// pass the plugin content to our .tpl.php file via hook_theme()
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['timeline_for_setting']) && isset($_GET['time'])) {
				$location = $_GET['timeline_for_setting'];
				$time = $_GET['time'];
				if(isset($_GET['end'])) {
					$end = $_GET['end'];
				}
				else {
					$end = 0;
				}
				$args = array('space'=>'timeline_for_setting',
						'focus'=>$location, 'time'=>$time, 'end'=>$end);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				// pass the plugin content to our .tpl.php file via hook_theme()
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['dossier_theme'])) {
				$dossier_id = $_GET['dossier_theme'];
				$args = array('space'=>'dossier_theme',
						'focus'=>$dossier_id);
				$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
				$content = theme('story_event_space_block', $data->content);
				$block['subject'] = '';
				$block['content'] = array('#markup' => $content);
			}
			elseif(isset($_GET['storyscope_theme'])) {
				$storyscope = $_GET['storyscope_theme'];
				if($storyscope) {
					$args = array('space'=>'storyscope_theme');
					$data = ctools_content_render($type, $subtype, $conf, $keywords, $args, $contexts);
					$content = theme('story_event_space_block', $data->content);
					$block['subject'] = '';
					$block['content'] = array('#markup' => $content);
				}
			}
			break;
	}
	// voila!
	return($block);
}


/**
 * Update query_tag table on story node update
 */
function dec_rec_node_insert($node) {
	if($node->type == 'story') {
		update_query_tags_for_story_node($node);
	}
	
}

/**
 * Update query_tag table on story node update
 */
function dec_rec_node_update($node) {
	if($node->type == 'story') {
		update_query_tags_for_story_node($node);
	}
}

/**
 * Read mids from the field collection of the story node
 */
function read_mids_from_story_node($story_node) {
	$output = array();
	$field_fb_tags = $story_node->field_fb_tags;
	if(isset($field_fb_tags['und'][0])) {
		foreach($field_fb_tags['und'] as $fb_value) {
			if(isset($fb_value['value'])) {
				$output[] = $fb_value['value'];
			}
		}
	}
	$fc_items = entity_load('field_collection_item',$output);

	$mids = array();
	foreach($fc_items as $fc_item) {
		$fm = $fc_item->field_mid;
		if(isset($fm['und'][0]['safe_value'])) {
			$uri = $fm['und'][0]['safe_value'];
// 			if($mid = extract_mid_from_freebase_uri($uri)) {
				$mids[] = '/m/'.$uri;
// 			}
		}
	}
	return $mids;
}

function update_query_tags_for_story_node($node) {
	$mid_array = read_mids_from_story_node($node);
	//delete previous entry in query_tag table
	$nid = $node->nid;
	db_delete('query_tag')
	->condition('id', $nid)
	->execute();
	
	//update query_tag table 
	$values_list = "";
	foreach($mid_array as $tag) {
		$values_list .=", ('".$nid."', '".$tag."')";
	}
	if($values_list == "") {
		return;
	}
	$values_list = "VALUES".substr($values_list, 1)." ";
	
	$query = "INSERT INTO query_tag (id, tag) ".$values_list." ON DUPLICATE KEY UPDATE id = VALUES(id), tag = VALUES(tag);";
	db_query($query);
}

/**
 * Asynchronously check for freebase topic in cache and retrieve if not found (new story tag)
 */
function dec_rec_entity_insert($entity, $type) {
  // Insert the new entity into a fictional table of all entities.
	if($type == 'field_collection_item') {
		if(isset($entity->field_mid['und'][0]['value'])) {
			$mid = '/m/'.$entity->field_mid['und'][0]['value'];
			$handle = background_process_start('update_tag_event_mapping', $mid);
		}
	}
}

/**
 * Asynchronously check for freebase topic in cache and retrieve if not found (edited story tag)
 */
function dec_rec_entity_update($entity, $type) {
	// Insert the new entity into a fictional table of all entities.
	if($type == 'field_collection_item') {
		if(isset($entity->field_mid['und'][0]['value'])) {
			$mid = '/m/'.$entity->field_mid['und'][0]['value'];
			$handle = background_process_start('update_tag_event_mapping', $mid);
		}
	}
}

/**
 * 
 */
function async_check_for_name_description_image($event_list) {
	foreach($event_list as $event_id) {
		$handle = background_process_start('check_topic_name_image_description', $event_id);
	}
}

/**
 * Check for the name, description and image of a topic
 * Retrieve if not stored in the database
*/
function check_topic_name_image_description($topic) {
	check_freebase_saved_image($topic);
	check_for_topic_description($topic);
	check_for_topic_name($topic);
}

/**
 * Retrieve and store locations that contain the current location either directly or via one other location
 */
function containing_locations_of_a_location($location_topic = "/m/0389fd") {

	$contained_locations = contained_locations($location_topic);

	if(!empty($contained_locations)) {
		$contained_contained_locations = contained_contained_locations($location_topic);
	}
	else {
		$contained_contained_locations = array();
	}
	$location_array = array_unique(array_merge(array($location_topic), $contained_locations, $contained_contained_locations));
	$location_topic = my_escape_string($location_topic);
	$value_array = array();
	foreach($location_array as $container) {
		$value_array[] = "('".$location_topic."', '".$container."')";
	}

	//save to database (including a location containing itself)
	$values = 'VALUES '.implode(', ',$value_array);
	$query = "INSERT INTO location_container (location, container) ".$values." ON DUPLICATE KEY UPDATE location = VALUES(location), container = VALUES(container);";
	db_query($query);
}

/**
 * Retrieve locations one level of containment up from the topic
 */
function contained_locations($topic = "/m/0389fd") {
	$query = array(array(
			"mid"=> $topic,
			"type"=> "/location/location",
			"name"=> null,
			"/location/location/containedby"=> array(array(
					"mid"=> null
			))
	));
	$output = array();
	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray['result']['0']['/location/location/containedby'])) {
		$contain_list = $resultarray['result']['0']['/location/location/containedby'];
		foreach($contain_list as $container) {
			$output[] = $container['mid'];
		}
	}
	return $output;
}

/**
 * Retrieve locations two levels of containment up from the topic
 */
function contained_contained_locations($topic = "/m/0389fd") {
	$query = array(array(
			"mid"=> $topic,
			"type"=> "/location/location",
			"name"=> null,
			"/location/location/containedby"=> array(array(
					"/location/location/containedby"=> array(array(
							"mid"=> null
					))
			))
	));
	$output = array();
	$resultarray = execute_mql_event_query($query);

	if(is_array($resultarray['result']['0']['/location/location/containedby'])) {
		foreach($resultarray['result']['0']['/location/location/containedby'] as $container_array) {
			$locations = $container_array['/location/location/containedby'];
			foreach($locations as $location) {
				$output[] = $location['mid'];
			}
		}
	}
	$output = array_unique($output);
	return $output;
}

/**
 * JSON data feed for the timeline of a single tag
*/
function tagtimelinedata($m, $id = FALSE) {
	if($m == "m") {
		$topic = "/".$m."/".$id;
	}
	elseif($m and !$id) {
		$topic = $m;
	}
	else {
		return drupal_json_output(array(array('timeline'=>array())));
	}

	if(isset($_GET['attribute'])) {
		$attribute = $_GET['attribute'];
	}
	else {
		$attribute = FALSE;
	}
	
	if(isset($_GET['path'])) {
		$path = $_GET['path'];
	}
	else {
		global $base_url;
		$path = $base_url;
	}

	//check for cached version of the timeline data 
 	$cached_data = check_for_cached_topic_timeline($topic, $attribute, $path);

 	if($cached_data) {
 		return drupal_json_output(json_decode(stripslashes($cached_data)));
 	}
	else {
		return drupal_json_output(array(array('timeline'=>array())));
	}
// 	//generate new timeline data	
// 	$timeline_data = drupal_json_encode(array('timeline'=>dec_tag_timeline($topic, $attribute, $path)));
// 	//save new timeline data
//  	save_topic_timelime($topic, $attribute, $timeline_data);
	
//  	return drupal_json_output(json_decode($timeline_data));
}

/**
 * Check for cached timeline for a single tag
*/
function check_for_cached_topic_timeline($topic, $attribute = FALSE, $path) {
	if(!$attribute) {
		$attribute = 'no_attribute';
	}

	$query = "SELECT tag_timeline_data.timeline_data
	FROM tag_timeline_data
	WHERE tag_timeline_data.tag = '".$topic."' AND tag_timeline_data.attribute = '".$attribute."' AND request_path = '".$path."';";
	$result = db_query($query);
	$object = $result->fetchObject();		

	if(isset($object->timeline_data)) {
		return $object->timeline_data;
	}
	return FALSE;
}

/**
 * Save timeline for a single tag
 */
function save_topic_timelime($topic, $attribute = FALSE, $timeline_data) {
	
	$timeline_data = my_escape_string($timeline_data);
	
	if($attribute) {
		$query = "INSERT INTO tag_timeline_data (tag, attribute, timeline_data, request_path) VALUES (:tag, :attribute, :data, :path) ON DUPLICATE KEY UPDATE tag = VALUES(tag), attribute = VALUES(attribute), timeline_data = VALUES(timeline_data), request_path = VALUES(request_path);";
		db_query($query, array(':tag' => $topic, ':attribute' => $attribute, ':data' => $timeline_data, ':path'=>timeline_path_key()));
	}
	else {
		$query = "INSERT INTO tag_timeline_data (tag, attribute, timeline_data, request_path) VALUES (:tag, 'no_attribute', :data, :path) ON DUPLICATE KEY UPDATE tag = VALUES(tag), attribute = VALUES(attribute), timeline_data = VALUES(timeline_data), request_path = VALUES(request_path);";
		db_query($query, array(':tag' => $topic, ':data' => $timeline_data, ':path'=>timeline_path_key()));
	}
}

/**
 * Check for cached timeline for a story
*/
function check_for_cached_story_timeline($story, $event_type = FALSE, $path) {
	if($event_type) {
		$query = "SELECT story_timeline_data.timeline_data
		FROM story_timeline_data
		WHERE story_timeline_data.story = '".$story."' AND story_timeline_data.event_type = '".$event_type."' AND request_path = '".$path."';";
		$result = db_query($query);		
	}
	else {
		$query = "SELECT story_timeline_data.timeline_data
		FROM story_timeline_data
		WHERE story_timeline_data.story = '".$story."' AND story_timeline_data.event_type = 'no_event_type' AND request_path = '".$path."';";
		$result = db_query($query);	
	}
	$object = $result->fetchObject();
	if(isset($object->timeline_data) && $object->timeline_data) {
		return $object->timeline_data;
	}
	return FALSE;	
}

/**
 * Check for cached timeline for a setting
 */
function check_for_cached_setting_timeline($location, $start, $end, $event_type = FALSE, $path) {
	if($event_type) {
		$query = "SELECT setting_timeline_data.timeline_data
		FROM setting_timeline_data
		WHERE setting_timeline_data.location = '".$location."' AND setting_timeline_data.start = '".$start."' AND setting_timeline_data.end = '".$end."' AND setting_timeline_data.event_type = '".$event_type." AND request_path = '".$path."';";
		$result = db_query($query);		
	}
	else {
		$query = "SELECT setting_timeline_data.timeline_data
		FROM setting_timeline_data
		WHERE setting_timeline_data.location = '".$location."' AND setting_timeline_data.start = '".$start."' AND setting_timeline_data.end = '".$end."' AND setting_timeline_data.event_type = 'no_event_type' AND request_path = '".$path."';";
		$result = db_query($query);		
	}

	$object = $result->fetchObject();
	if(isset($object->timeline_data)) {
		return $object->timeline_data;
	}
	return FALSE;
}

/**
 * Cache the data for a setting timeline
*/
function save_setting_timelime($location, $start, $end, $event_type, $timeline_data) {
	$timeline_data = my_escape_string($timeline_data);
	if($event_type) {
		$query = "INSERT INTO setting_timeline_data (location, start, end, event_type, timeline_data, request_path) VALUES (:location, :start, :end, :event_type, :data, :path) ON DUPLICATE KEY UPDATE location = VALUES(location), start = VALUES(start), end = VALUES(end), event_type = VALUES(event_type), timeline_data = VALUES(timeline_data), request_path = VALUES(request_path);";
		db_query($query, array(':location' => $location, ':start' => $start, ':end' => $end, ':event_type' => $event_type, ':data' => $timeline_data, ':path'=>timeline_path_key()));
	}
	else {
		$query = "INSERT INTO setting_timeline_data (location, start, end, event_type, timeline_data, request_path) VALUES (:location, :start, :end, 'no_event_type', :data, :path) ON DUPLICATE KEY UPDATE location = VALUES(location), start = VALUES(start), end = VALUES(end), event_type = VALUES(event_type), timeline_data = VALUES(timeline_data), request_path = VALUES(request_path);";
		db_query($query, array(':location' => $location, ':start' => $start, ':end' => $end, ':data' => $timeline_data, ':path'=>timeline_path_key()));
	}
}

/**
 * Cache the data for a story timeline
 */
function save_story_timeline($story, $event_type = FALSE, $timeline_data) {
	$timeline_data = my_escape_string($timeline_data);
	
	if($event_type) {
		$query = "INSERT INTO story_timeline_data (story, event_type, timeline_data, request_path) VALUES (:story, :event_type, :data, :path) ON DUPLICATE KEY UPDATE story = VALUES(story), event_type = VALUES(event_type), timeline_data = VALUES(timeline_data), request_path = VALUES(request_path);";
		db_query($query, array(':story' => $story, ':event_type' => $event_type, ':data' => $timeline_data, ':path'=>timeline_path_key()));
	}
	else {
		$query = "INSERT INTO story_timeline_data (story, event_type, timeline_data, request_path) VALUES (:story, 'no_event_type', :data, :path) ON DUPLICATE KEY UPDATE story = VALUES(story), event_type = VALUES(event_type), timeline_data = VALUES(timeline_data), request_path = VALUES(request_path);";
		db_query($query, array(':story' => $story, ':data' => $timeline_data, ':path'=>timeline_path_key()));
	}
}

/**
 * JSON data feed for the timeline of a setting
*/
function settingtimelinedata() {
	if(isset($_GET['path'])) {
		$path = $_GET['path'];
	}
	else {
		global $base_url;
		$path = $base_url;
	}
	
	$output = "";
	if(isset($_GET['settinglocation']) && isset($_GET['time'])) {
		$location = $_GET['settinglocation'];
		$time = $_GET['time'];
	}
	else {
		return drupal_json_output(array(array('timeline'=>array())));
	}
	$year = substr($time, 0, 4);

	if(isset($_GET['end'])) {
		$end = $_GET['end'];
		$full_start_time = complete_time_stamp($time, 'start');
		$full_end_time = complete_time_stamp($end, 'end');
	}
	else {
		$end = 0;
		$full_start_time = complete_time_stamp($time, 'start');
		$full_end_time = complete_time_stamp($time, 'end');
	}
	
	if(isset($_GET['event_type'])) {
		$event_type = $_GET['event_type'];
	}
	else {
		$event_type = FALSE;
	}

	//check for cached version of setting timeline data
	$cached_data = check_for_cached_setting_timeline($location, $time, $end, $event_type, $path);

	if($cached_data) {
		return drupal_json_output(json_decode(stripslashes($cached_data)));
	}
	else {
		return drupal_json_output(array(array('timeline'=>array())));;
	}
	
	
// 	$timeline_data = drupal_json_encode(array('timeline'=>dec_setting_timeline($location, $full_start_time, $full_end_time, $time, $end, $event_type, $path)));

// 	//save setting timeline data
// 	save_setting_timelime($location, $time, $end, $event_type, $timeline_data);

//  	return drupal_json_output(json_decode($timeline_data));
}

/**
 * JSON data feed for the timeline of a story (i.e. set of tags)
 */
function tagstimelinedata($story_id) {
	if(isset($_GET['path'])) {
		$path = $_GET['path'];
	}
	else {
		global $base_url;
		$path = $base_url;
	}
	
	$story_id = (int) $story_id;

	if(isset($_GET['event_type'])) {
		$event_type = $_GET['event_type'];
	}
	else {
		$event_type = FALSE;
	}

	//check for cached version of the timeline data
 	$cached_data = check_for_cached_story_timeline($story_id, $event_type, $path);
	
 	if($cached_data) {
 		return drupal_json_output(json_decode(stripslashes($cached_data)));
 	}
 	else {
 		return drupal_json_output(array(array('timeline'=>array())));;
 	}
 	
 	
//  	$timeline_data = drupal_json_encode(array('timeline'=>dec_tags_timeline($story_id, $event_type, $path)));

// 	//save new timeline data
// 	save_story_timeline($story_id, $event_type, $timeline_data);
	
// 	return drupal_json_output(json_decode($timeline_data));
}

/**
 * Display name for a freebase attribute
*/
function get_attribute_reverse_title($attribute = '/visual_art/artwork/artist') {
	$query = "SELECT reverse_name FROM attribute_name WHERE attribute = :attribute;";
	$result = db_query($query, array(':attribute' => $attribute));
	$object = $result->fetchObject();
	if(isset($object->reverse_name)) {
		return $object->reverse_name;
	}
	else {
		return FALSE;
	}	
}

/**
 * Timeline page for setting
*/
function dec_timeline_for_setting($location, $time, $end) {
	global $base_url;
	$output = "";
	$name = get_topic_name($location);
	if($name) {
		$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i><span class="topic-title">' . t('About : ').$name.", ".$time." to ".$end.'&nbsp;&nbsp;</span>';
	}
	
	if(!$location && !$time) {
		return "No setting found";
	}

	//check the event space of the location has been calculated
	new_event_space_of_a_topic($location);
	
	//timeline title
// 	$name = get_topic_name($location);
	if(isset($_GET['event_type'])) {
		$event_type = $_GET['event_type'];
	}
	else {
		$event_type = FALSE;
	}

	//check for reload 
	if(isset($_GET['reload'])) {
		$reload = $_GET['reload'];
		if($reload) {
			//clear cache
			if($event_type) {
				$query = "delete from setting_timeline_data where location = '".$location."' AND start = '".$time."' AND end = '".$end."' AND event_type = '".$event_type."' AND request_path = '".timeline_path_key()."';";
				db_query($query);
			}
			else {
				$query = "delete from setting_timeline_data where location = '".$location."' AND start = '".$time."' AND end = '".$end."' AND event_type = 'no_event_type' AND request_path = '".timeline_path_key()."';";
				db_query($query);
			}
		}
	}
	
	if($end) {
		$full_start_time = complete_time_stamp($time, 'start');
		$full_end_time = complete_time_stamp($end, 'end');
	}
	else {
		$full_start_time = complete_time_stamp($time, 'start');
		$full_end_time = complete_time_stamp($time, 'end');
	}
	
	$cached_data = check_for_cached_setting_timeline($location, $time, $end, $event_type, timeline_path_key());

	if(!$cached_data) {
		//calculate
		//get events for a setting
		$all_events = get_all_events_for_setting($location, $full_start_time, $full_end_time);
		$event_array = flat_list_of_events($all_events);
		if($event_type) {
			$event_list = temporal_event_list_for_event_array_and_activity($event_type, $event_array);
		}
		else {
			$event_list = temporal_event_list_for_event_array($event_array);
		}
		
		//event table and timeline links
		$a = create_timeline_setting_header($location, $time, $end, request_path());
		$a['date'] = event_timeline_for_event_list($event_list);
		$timeline_data = drupal_json_encode(array('timeline'=>$a));
		
		save_setting_timelime($location, $time, $end, $event_type, $timeline_data);
	}
	
	
	//timeline
	$output .= '<div id="timeline-embed"></div>
    <script type="text/javascript">
        var timeline_config = {
            width:              "100%",
            height:             "600",';
	if($event_type) {
		if($end) {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?settinglocation='.$location.'&time='.$time.'&event_type='.$event_type.'&end='.$end.'&path='.timeline_path_key().'"';
		}
		else {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?settinglocation='.$location.'&time='.$time.'&event_type='.$event_type.'&path='.timeline_path_key().'"';
		}
	}
	else {
		if($end) {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?settinglocation='.$location.'&time='.$time.'&end='.$end.'&path='.timeline_path_key().'"';
		}
		else {
			$output .= 'source:             "'.$base_url.'/settingtimelinedata?settinglocation='.$location.'&time='.$time.'&path='.timeline_path_key().'"';
		}
	}
	
	$output .= '    }
    </script>
    <script type="text/javascript" src="'.get_timeline_path().'"></script>';
	
	$output .= '<div style="clear:both; margin-top:1em">If the timeline sticks at LOADING TIMELINE... then use your browser reload button.</div>';
	$output .= '<div style="clear:both; margin-bottom:1em">If the information displayed seems incomplete (e.g. events of a story tag with time information are not included) then use the Recalcuate button.</div>';
	if($event_type) {
		if($end) {
			$output .= l("Recalcuate", request_path(), array('query'=>array('timeline_for_setting'=>$location, 'time'=>$time, 'end'=>$end, 'event_type'=>$event_type, 'reload'=>'1')));
		}
		else {
			$output .= l("Recalcuate", request_path(), array('query'=>array('timeline_for_setting'=>$location, 'time'=>$time, 'event_type'=>$event_type, 'reload'=>'1')));
		}
	}
	else {
		if($end) {
			$output .= l("Recalcuate", request_path(), array('query'=>array('timeline_for_setting'=>$location, 'time'=>$time, 'end'=>$end, 'reload'=>'1')));
		}
		else {
			//request_path(), array('query'=>array('timeline_for_tags'=>$story_id, 'reload'=>'1')));
			$output .= l("Recalcuate", request_path(),  array('query'=>array('timeline_for_setting'=>$location, 'time'=>$time, 'reload'=>'1')));
		}
	}
	
	return $output;
}

/**
 * Timeline page for story
*/
function dec_timeline_for_tags($story_id) {
	global $base_url;
	$story_id = (int) $story_id;
	if(!$story_id) {
		return "No topic list found";
	}
	$output = "";
	
	//tags title
	$query = "SELECT query_tag.tag, tag_name.name FROM query_tag
LEFT JOIN tag_name ON query_tag.tag = tag_name.tag
WHERE query_tag.id = '".$story_id."';";
	$result = db_query($query);
	
	$tag_array = array();
	foreach ($result as $record) {
		$tag_array[] = $record->tag;
	}
	$tag_name_array = array();
	foreach($tag_array as $tag) {
		$name = get_topic_name($tag);
		if($name) {
			$tag_name_array[] = $name;
		}
		else {
			$tag_name_array[] = $tag;
		}
	}
	
	$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i>' . t('About : ') .implode(", ",$tag_name_array).'</h2>';
	

	if(isset($_GET['event_type'])) {
		$event_type = $_GET['event_type'];
	}
	else {
		$event_type = FALSE;
	}

	//check for reload 
	if(isset($_GET['reload'])) {
		$reload = $_GET['reload'];
		if($reload) {
			//clear cache
			if($event_type) {
				$query = "delete from story_timeline_data where story = '".$story_id."' AND event_type = '".$event_type."' AND request_path = '".timeline_path_key()."';";
				db_query($query);
			}
			else {
				$query = "delete from story_timeline_data where story = '".$story_id."'AND event_type = 'no_event_type' AND request_path = '".timeline_path_key()."';";
				db_query($query);
			}
		}
	}

	//check for cached version of the timeline data
	$cached_data = check_for_cached_story_timeline($story_id, $event_type, timeline_path_key());

	if(!$cached_data) {
		//calculate timeline
		//get event list
		$a = event_timeline_header_for_story($story_id);
		$event_list = event_list_for_story_id($story_id);
		if($event_type) {
			$event_list = temporal_event_list_for_event_array_and_activity($event_type, $event_list);
		}
		else {
			$event_list = temporal_event_list_for_event_array($event_list);
		}
		$a['date'] = event_timeline_for_event_list($event_list);
		$timeline_data = drupal_json_encode(array('timeline'=>$a));
		save_story_timeline($story_id, $event_type, $timeline_data);
	}
	
	//timeline
	$output .= '<div id="timeline-embed"></div>
    <script type="text/javascript">
        var timeline_config = {
            width:              "100%",
            height:             "600",';
	
// 		$output .= 'source:             "'.'http://localhost/my-data2.json'.'"';
	if($event_type) {
		$output .= 'source:             "'.$base_url.'/tagstimelinedata/'.$story_id.'?event_type='.$event_type.'&path='.timeline_path_key().'"';
	}
	else {
		$output .= 'source:             "'.$base_url.'/tagstimelinedata/'.$story_id.'?path='.timeline_path_key().'"';
	}
	
	$output .= '    }
    </script>
    <script type="text/javascript" src="'.get_timeline_path().'"></script>';

	$output .= '<div style="clear:both; margin-top:1em">If the timeline sticks at LOADING TIMELINE... then use your browser reload button.</div>';
	$output .= '<div style="clear:both; margin-bottom:1em">If the information displayed seems incomplete (e.g. events of a story tag with time information are not included) then use the Recalcuate button.</div>';
	if($event_type) {
		$output .= l("Recalcuate", request_path(), array('query'=>array('timeline_for_tags'=>$story_id, 'event_type'=>$event_type, 'reload'=>'1')));
	}
	else {
		$output .= l("Recalcuate", request_path(), array('query'=>array('timeline_for_tags'=>$story_id, 'reload'=>'1')));
	}
	
	return $output;	
}

/**
 * Timeline page for single tag
 */
function dec_timeline($topic) {
	global $base_url;
// 	if($m == "m") {
// 		$topic = "/".$m."/".$id;
// 	}
// 	elseif($m && !$id) {
// 		$topic = $m;
// 	}
// 	else {
// 		return "No topic found";
// 	}

	//attribute
	if(isset($_GET['attribute'])) {
		$attribute = $_GET['attribute'];
	}
	else {
		$attribute = FALSE;
	}
	//check for reload
	if(isset($_GET['reload'])) {
		$reload = $_GET['reload'];
		if($reload) {
			//clear cache
			if($attribute) {
				$query = "delete from tag_timeline_data where tag = '".$topic."' AND attribute = '".$attribute."' AND request_path = '".timeline_path_key()."';";
				db_query($query);
			}
			else {
				$query = "delete from tag_timeline_data where tag = '".$topic."'AND attribute = 'no_attribute' AND request_path = '".timeline_path_key()."';";
				db_query($query);
			}
		}
	}
	
	//check for timeline data
	$cached_data = check_for_cached_topic_timeline($topic, $attribute, timeline_path_key());
	
	if(!$cached_data) {
		//generate new timeline data
		
		$a = event_timeline_header_for_topic($topic);
		$all_events = get_all_events_for_tag($topic);
		$event_list = flat_list_of_single_tag_events($all_events);

		if($attribute) {
			$event_list = temporal_event_list_for_event_array_and_activity($attribute, $event_list);
		}
		else {
			$event_list = temporal_event_list_for_event_array($event_list);
		}

		$a['date'] = event_timeline_for_event_list($event_list);

		$timeline_data = drupal_json_encode(array('timeline'=>$a));
		
		
// 		$timeline_data = drupal_json_encode(array('timeline'=>dec_tag_timeline($topic, $attribute, request_path())));
		//save new timeline data
		save_topic_timelime($topic, $attribute, $timeline_data);
	}
	
	$output = "";
	//title
	//tag type
	$notable_tag_types = get_notable_tag_type_names($topic);
	if(!empty($notable_tag_types)) {
		$topic_types = ' (' . implode(', ', $notable_tag_types) . ')';
	}
	else {
		$topic_types = '';
	}
	//tag name
	$name = get_topic_name($topic);
	if($name) {
		$output .= '<div class="topic-block"><h2><i class="fa fa-info-circle fa-lg">&nbsp;</i><span class="topic-title">' . t('About : '). $name . $topic_types . '&nbsp;&nbsp;</span>' . '</h2>';
	}
	
// 	if($attribute) {
// 		if($attribute_title = get_attribute_reverse_title($attribute)) {
// 			$name = get_topic_name($topic);
// 			if($name) {
// 				$output .= '<h2>'.$name.': '.$attribute_title.'</h2>';
// // 				drupal_set_title($name.': '.$attribute_title);
// 			}
// 			else {
// 				$output .= '<h2>'.$topic.': '.$attribute_title.'</h2>';
// // 				drupal_set_title($topic.': '.$attribute_title);
// 			}
// 		}
// 		else {
// 			$name = get_topic_name($topic);
// 			if($name) {
// 				$output .= '<h2>'.$name.': '.$attribute.'</h2>';
// // 				drupal_set_title($name.': '.$attribute);
// 			}
// 			else {
// 				$output .= '<h2>'.$topic.': '.$attribute.'</h2>';
// // 				drupal_set_title($topic.': '.$attribute);
// 			}
// 		}
// 	}
// 	else {
// 		$name = get_topic_name($topic);
// 		if($name) {
// 			$output .= '<h2>'.$name.'</h2>';
// // 			drupal_set_title($name);
// 		}
// 		else {
// 			$output .= '<h2>'.$topic.'</h2>';
// // 			drupal_set_title($topic);
// 		}
// 	}
	
	$output .= '<div id="timeline-embed"></div>
    <script type="text/javascript">
        var timeline_config = {
            width:              "100%",
            height:             "600",';

    if(is_freebase_topic_id($topic)) {
    	$topic_path = $topic;
    }
    else {
    	$topic_path = '/'.$topic;
    }

	if($attribute) {
		$output .= 'source:             "'.$base_url.'/tagtimelinedata'.$topic_path.'?attribute='.$attribute.'&path='.timeline_path_key().'"';
	}
    else {
    	$output .= 'source:             "'.$base_url.'/tagtimelinedata'.$topic_path.'?path='.timeline_path_key().'"';
    }

    $output .= '    }
    </script>
    <script type="text/javascript" src="'.get_timeline_path().'"></script>';
    
    $output .= '<div style="clear:both; margin-top:1em">If the timeline sticks at LOADING TIMELINE... then use your browser reload button.</div>';
    $output .= '<div style="clear:both; margin-bottom:1em">If the information displayed seems incomplete (e.g. events of a story tag with time information are not included) then use the Recalcuate button.</div>';
    if($attribute) {
    	$output .= story_search_link_check("Recalculate", request_path(), array('query'=>array('timeline'=>$topic, 'attribute'=>$attribute, 'reload'=>'1')));
    }
    else {
    	$output .= story_search_link_check("Recalculate", request_path(), array('query'=>array('timeline'=>$topic, 'reload'=>'1')));
    }
	return $output;
}

/**
 * Calculate timeline data for setting
*/
function dec_setting_timeline($location, $full_year, $full_end = 0, $year, $end = 0, $event_type = FALSE, $path) {
	$output = array();
	if($event_type) {
		$events = get_all_events_for_setting_event_type($location, $full_year, $event_type, $full_end);
	}
	else {
		$events = get_all_events_for_setting($location, $full_year, $full_end);
	}

	if(!empty($events)) {
		foreach($events as $label=>$events) {
			foreach($events as $event) {
				$output[] = load_art_event_without_title_addition($event, TRUE);
			}
		}
	}
	//header
	$header = create_timeline_setting_header($location, $year, $end, $path);

	//timeline array

	$timeline_array = translate_story_events_for_timeline($output, $header, $path);
	
	return $timeline_array;
}

/**
 * Calculate timeline data for list of tags
*/
function dec_tags_timeline($story_id, $event_type = FALSE, $path) {

	$output = array();	
	if($event_type) {
		$events = get_all_temporal_events_for_story2($story_id, $event_type);
	}
	else {
		$events = get_all_temporal_events_for_story2($story_id);
	}

	if(!empty($events)) {
		foreach($events as $label=>$events) {
			foreach($events as $event) {
				$output[] = load_art_event_without_title_addition($event, TRUE);
			}
		}
	}

	//header
	$header = create_timeline_story_header($story_id, $path);

	//timeline array
	$timeline_array = translate_story_events_for_timeline($output, $header, $path);
	
	return $timeline_array;
}

/**
 * Calculate timeline data for single tag
 */
function dec_tag_timeline($topic = '/m/01qwfk', $attribute = FALSE, $path) {
	$output = array();
	$types = check_for_tag_types($topic);
	$all_events = get_all_events_for_tag($topic);
	$event_list = flat_list_of_single_tag_events($all_events);
	if($attribute) {
// 		$events = temporal_events_for_tag_attribute($topic, $attribute);
		$events = temporal_event_list_for_event_array_and_activity($attribute, $event_list);
	}
	else {
// 		$events = temporal_events_for_tag($topic);
		$events = temporal_event_list_for_event_array($event_list);
	}

	foreach($events as $event) {
		$output[] = load_art_event_dec_tag($event, $types, TRUE);
	}
	$header = create_timeline_header($topic, $path);

	$timeline_array = translate_events_for_timeline($output, $header, $path);

	return $timeline_array;
}

/**
 * Translate time data for timeline display
 */
function translate_time_for_timeline($time) {
	return str_replace('-',',',$time['0']);
}
function translate_time_for_timeline2($time) {
	return str_replace('-',',',$time);
}

/**
 * Create header for setting timeline
*/
function create_timeline_setting_header($location, $year, $end = 0, $path) {
	global $base_url;

	$header = array();
	if($end) {
		$header['headline'] = l(get_topic_name($location).', '.$year.' to '.$end, $path, array('query'=>array('location'=>$location, 'time'=>$year, 'end'=>$end)));
	}
	else {
		$header['headline'] = l(get_topic_name($location).', '.$year, $path, array('query'=>array('location'=>$location, 'time'=>$year)));
	}
	$header['text'] = get_topic_description($location, 150);
	$header['type'] = 'default';
	if($image = check_freebase_saved_image($location)) {
		$header['asset']['media'] = $image;
		$header['asset']['caption'] = '<div style="clear:both">Setting location: '.l(get_topic_name($location), $path, array('query'=>array('tag'=>$location))).' (pictured above)</div>'.
				'<div style="clear:both">Setting year: '.$year.'</div>';
	}
	if(!$header['text']) {
		$header['text'] = 'timeline';
	}
	return $header;
}

/**
 * Create header for story timeline
 */
function create_timeline_story_header($story, $path) {

	$tag_array = get_tags_names_for_a_story($story);
	$headline = array();
	foreach($tag_array as $tag) {
		if($tag['1']) {
			$headline[] = $tag['1'];
		}
		else {
			$headline[] = $tag['0'];
		}
	}
	$text = '';
	foreach($tag_array as $tag) {
		if($tag['1']) {
			$text .=  '<div style="clear:both"><b>'.$tag['1'].':</b> '.check_for_topic_description($tag['0'],100).'</div>';
		}
		else {
			$text .= '<div style="clear:both"><b>'.$tag['0'].'</b></div>';
		}
	}
	
	$header = array();
	
	$image_result = get_image_from_tag_list($tag_array);
	if($image_result) {
		$header['asset']['media'] = $image_result['image'];
		$caption = '';
		foreach($tag_array as $tag) {
			if($tag['1']) {
				$caption .= '<div style="clear:both">'. l($tag['1'], $path, array('query'=>array('tag'=>$tag['0'])));
				if($tag['0'] == $image_result['tag']['0']) {
					$caption .= ' (pictured above)';
				}
				$caption .= '</div>';
			}
			else {
				$caption .= '<div style="clear:both">'.$tag['0'].'</div>';
			}
		}
		$header['asset']['caption'] = $caption;
	}
	
	$header['headline'] = l(implode(', ',$headline), $path, array('query'=>array('story'=>$story)));
	$header['text'] = '&nbsp;';//$text;
	$header['type'] = 'default';
	return $header;
}

/**
 * Get image to display with a story tag list
 */
function get_image_from_tag_list($tag_array) {
	foreach($tag_array as $tag) {
		if($tag['1']) {
			if($image = check_freebase_saved_image($tag['0'])) {
				return array('image'=>$image, 'tag'=>$tag);
			}
		}
	}
	return array();
}

/**
 * Create header (i.e. intro page) for the timeline
 */
function create_timeline_header($topic, $path) {
	$header = array();
	if(!get_topic_name($topic)) {
		$header['headline'] = story_search_link_check($topic, $path, array('query'=>array('tag'=>$topic)));
		$header['type'] = 'default';
		$header['text'] = 'Events connected to '.$topic;
		return $header;
	}
	$header['headline'] = story_search_link_check(get_topic_name($topic), $path, array('query'=>array('tag'=>$topic)));
	$description = get_topic_description($topic, 150);
	if($description) {
		$header['text'] = $description;
	}
	else {
		$header['text'] = ' ';
	}
	$header['type'] = 'default';
	if($image = check_freebase_saved_image($topic)) {
		$header['asset']['media'] = $image;
	}
	//tag triples
	$output = '';
	$tag_attributes = get_triple_ids_of_a_tag($topic);
	foreach($tag_attributes as $tag_attribute) {
		$values = get_tag_attribute_id_values($tag_attribute->id);
		$output .= '<div style="clear:both">'.$tag_attribute->attribute.": ";
		$output_values = array();
		foreach($values as $value) {
	
			$name = get_topic_name($value);
			if(!$name) {
				$name = $value;
			}
			if($tag_attribute->link) {
				$output_values[] = story_search_link_check($name, $path, array('query'=>array('tag'=>$value)));
			}
			else {
				$output_values[] = $name;
			}
		}
		$output .= implode(', ',$output_values)."</div>";
	}
	$header['asset']['caption'] = $output;
	return $header;
}

/**
 * Translate story event data for timeline display
*/
function translate_story_events_for_timeline($events, $header, $path) {
	$output = $header;
	if(empty($events)) {
		$output['date'] = array(array("startDate"=>"0000,00,00", "headline"=>"No dates available"));
		return $output;
	}
	$list = array();
	foreach($events as $event) {
		$entry = array();
		
// 		$entry['text'] = produce_event_table_for_timeline($event);
		if(isset($event['start_time'])) {
			$entry['startDate'] = translate_time_for_timeline($event['start_time']);
		}
		if(isset($event['end_time'])) {
			$entry['endDate'] = translate_time_for_timeline($event['end_time']);
		}
		if(isset($event['activity'])) {
			$entry['tag'] = $event['activity']['0'];
		}
		if(is_array($event['title']['0'])) {
			$entry['headline'] = l($event['title']['0']['1'], $path, array('query'=>array('tag'=>$event['title']['0']['0'])));
			if($image = check_freebase_saved_image($event['title']['0']['0'])) {
				$entry['asset'] = array('media'=> $image, 
				'caption'=> produce_event_table_for_timeline($event, $path),
				'thumbnail'=> check_freebase_saved_image($event['title']['0']['0'],TRUE));
				$entry['text'] = check_for_topic_description($event['title']['0']['0'], 70);
			}
			else {
				$entry['text'] = '<div style="clear:both">'.produce_event_table_for_timeline($event, $path).'</div>'.
				'<div style="clear:both">'.check_for_topic_description($event['title']['0']['0'], 70).'</div>';
			}
		}
		elseif(is_array($event['title'])) {
			$entry['headline'] = $event['title']['0'];
			$entry['text'] = produce_event_table_for_timeline($event, $path);
		}
		$list[] = $entry;
	}
	$output['date'] = $list;
	return $output;
}

/**
 * Translate event data for timeline display
 */
function translate_events_for_timeline($events, $header, $path) {

	$output = $header;
	if(empty($events)) {
		$output['date'] = array(array("startDate"=>"0000,00,00", "headline"=>"No dates available"));
		return $output;
	}
	$list = array();

	foreach($events as $event) {
		$entry = array();
// 		$entry['text'] = produce_event_table_for_timeline($event);
		$entry['text'] = check_for_topic_description($event['title']['0']['0'], 150);
		if(isset($event['start_time'])) {
			$entry['startDate'] = translate_time_for_timeline($event['start_time']);
		}
		if(isset($event['end_time'])) {
			$entry['endDate'] = translate_time_for_timeline($event['end_time']);
		}
		if(isset($event['activity'])) {
			$entry['tag'] = $event['activity']['0'];
		}
		if(is_array($event['title'])) {
			if(is_array($event['title']['0'])) {
				$entry['headline'] = story_search_link_check($event['title']['0']['1'], $path, array('query'=>array('tag'=>$event['title']['0']['0'])));
			}
			else {
				$entry['headline'] = $event['title']['0'];
			}
			if($image = check_freebase_saved_image($event['title']['0']['0'])) {
				$entry['asset'] = array('media'=> $image, 
					'caption'=> produce_event_table_for_timeline($event, $path),
					'thumbnail'=> check_freebase_saved_image($event['title']['0']['0'],TRUE));
			}
			else {
				$entry['text'] .= produce_event_table_for_timeline($event, $path);
			}
		}
		$list[] = $entry;
	}
	$output['date'] = $list;
	return $output;
}

/**
 * Get events for a tag that can be displayed on a timeline
*/
function temporal_events_for_tag($topic) {
	if(is_time_stamp($topic)) {
		$query = "SELECT events_start_end_time_table.event
FROM event_attribute_value, 
(SELECT events_start_time_table.event, events_start_time_table.start_time, end_time_table.end_time
FROM 
(SELECT events_table.event, start_time_table.start_time
FROM
(SELECT DISTINCT events.event
FROM event_attribute_value as events, attribute_name
WHERE events.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')) as events_table
LEFT JOIN
(SELECT event_start_time.event, event_start_time.value as start_time
FROM event_attribute_value as event_start_time, attribute_name
WHERE event_start_time.attribute = attribute_name.attribute AND
attribute_name.name = 'start_time') as start_time_table ON start_time_table.event = events_table.event) as events_start_time_table
LEFT JOIN 
(SELECT event_end_time.event, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, attribute_name
WHERE event_end_time.attribute = attribute_name.attribute AND
attribute_name.name = 'end_time') as end_time_table ON end_time_table.event = events_start_time_table.event) as events_start_end_time_table
WHERE
((events_start_end_time_table.start_time = '".$topic."' and events_start_end_time_table.end_time IS NULL) OR
(events_start_end_time_table.end_time = '".$topic."' and events_start_end_time_table.start_time IS NULL) OR
(events_start_end_time_table.start_time <= '".$topic."' and events_start_end_time_table.end_time >= '".$topic."')) AND
events_start_end_time_table.event = event_attribute_value.event AND 
event_attribute_value.attribute = 'activity';";
	}
	else {
		$query = "SELECT DISTINCT event_table.event
FROM event_attribute_value as time_table, event_attribute_value as event_table, attribute_name
WHERE event_table.value = '".$topic."' AND
event_table.event = time_table.event AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	}
	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	//if tag is itself an event
	if(!in_array($topic, $output)) {
		$query = "SELECT event_attribute_value.event
	FROM event_attribute_value, attribute_name
	WHERE event_attribute_value.event = '".$topic."' AND
	event_attribute_value.attribute = attribute_name.attribute AND
	attribute_name.name = 'start_time';";
		$result = db_query($query);
		$object = $result->fetchObject();
		if(isset($object->event)) {
			$output[] = $topic;
		}
	}
	return $output;
}


/**
 * Get events for a tag and attribute that can be displayed on a timeline
 */
function temporal_events_for_tag_attribute($topic, $attribute = '/visual_art/artwork') {
	if(is_time_stamp($topic)) {
		$query = "SELECT events_start_end_time_table.event
FROM event_attribute_value, 
(SELECT events_start_time_table.event, events_start_time_table.start_time, end_time_table.end_time
FROM 
(SELECT events_table.event, start_time_table.start_time
FROM
(SELECT DISTINCT events.event
FROM event_attribute_value as events, attribute_name
WHERE events.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')) as events_table
LEFT JOIN
(SELECT event_start_time.event, event_start_time.value as start_time
FROM event_attribute_value as event_start_time, attribute_name
WHERE event_start_time.attribute = attribute_name.attribute AND
attribute_name.name = 'start_time') as start_time_table ON start_time_table.event = events_table.event) as events_start_time_table
LEFT JOIN 
(SELECT event_end_time.event, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, attribute_name
WHERE event_end_time.attribute = attribute_name.attribute AND
attribute_name.name = 'end_time') as end_time_table ON end_time_table.event = events_start_time_table.event) as events_start_end_time_table
WHERE
((events_start_end_time_table.start_time = '".$topic."' and events_start_end_time_table.end_time IS NULL) OR
(events_start_end_time_table.end_time = '".$topic."' and events_start_end_time_table.start_time IS NULL) OR
(events_start_end_time_table.start_time <= '".$topic."' and events_start_end_time_table.end_time >= '".$topic."')) AND
events_start_end_time_table.event = event_attribute_value.event AND 
event_attribute_value.attribute = 'activity' AND
event_attribute_value.value = '".$attribute."';";
	}
	else {
		$query = "SELECT DISTINCT event_table.event
FROM event_attribute_value as time_table, event_attribute_value as event_table, attribute_name, event_attribute_value as attribute_table, attribute_name as attribute_attribute_name
WHERE event_table.value = '".$topic."' AND
event_table.event = time_table.event AND
time_table.attribute = attribute_name.attribute AND
event_table.event = attribute_table.event AND
attribute_table.attribute = '".$attribute."' AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	}

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->event;
	}

	//if tag is itself an event
	$query = "SELECT event_attribute_value.event
FROM event_attribute_value, attribute_name
WHERE event_attribute_value.event = '".$topic."' AND
event_attribute_value.attribute = attribute_name.attribute AND
attribute_name.name = 'start_time';";
	$result = db_query($query);
	$object = $result->fetchObject();
	if(isset($object->event)) {
		$output[] = $topic;
	}
	
	return $output;
}

/**
 * Save image using Drupal system_retrieve_file
 */
function dec_save_image($url, $filename) {
	system_retrieve_file($url,'public://'.$filename, TRUE, $replace = FILE_EXISTS_REPLACE);
}

/**
 * Save image file
 */
function dec_save_image_curl($url, $filename) {
	$ch = curl_init($url);

	$fp = fopen($filename, 'wb');

	curl_setopt($ch, CURLOPT_FILE, $fp);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	$response = curl_exec($ch);

	$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

	curl_close($ch);
	fclose($fp);	
}

/**
 * Retrieve and save freebase image of a topic
 */
function save_fb_image($topic, $thumbnail_url = FALSE) {

	$imageUrl = 'https://usercontent.googleapis.com/freebase/v1/image'.$topic.'?maxwidth=200&maxheight=200'.get_google_api_key_path();
	$imageUrlthumbnail = 'https://usercontent.googleapis.com/freebase/v1/image'.$topic.get_google_api_key_path('?');;
	
	$id = substr($topic,3);
	$filename = 'fbimages/'.$id.'.jpeg';
	$filenamethunbnail = 'fbimages/'.$id.'_sm.jpeg';
	
	dec_save_image($imageUrl, $filename);
	dec_save_image($imageUrlthumbnail, $filenamethunbnail);
	
	return $id;
}

/**
 * For reseting cached freebase data
 */
function dec_reset() {
	//if the line below is uncommented then this function can reset local cached databases of freebase data
	reset_recommender_database();
	return "database reset";
}


/**
 * Produces event timeline header for story
 */
function event_timeline_header_for_story($story) {
	$tag_array = get_tags_names_for_a_story($story);
	$headline = array();
	foreach($tag_array as $tag) {
		if($tag['1']) {
			$headline[] = $tag['1'];
		}
		else {
			$headline[] = $tag['0'];
		}
	}
	
	$header = array();
	$header['headline'] = l(implode(', ',$headline), request_path(), array('query'=>array('story'=>$story)));
	$header['text'] = "&nbsp;";
	$header['type'] = 'default';
	
	$image_result = get_image_from_tag_list($tag_array);
	if($image_result) {
		$header['asset']['media'] = $image_result['image'];
		$header['asset']['caption'] = $image_result['tag']['1'];
		$header['asset']['credit'] = "";
	}
	else {
		$header['asset']['media'] = "";
		$header['asset']['caption'] = "";
		$header['asset']['credit'] = "";		
	}
	return $header;
}

/**
 * Produces event timeline header for topic
 */
function event_timeline_header_for_topic($topic) {
	$name = get_topic_name($topic);
	if($name) {
		$header['headline'] = story_search_link_check($name, request_path(), array('query'=>array('tag'=>$topic)));
	}
	else {
		$header['headline'] = $topic;
	}
	$header['text'] = get_topic_description($topic, 150);
	$header['type'] = 'default';
	$image = check_freebase_saved_image($topic);
	$header['asset'] = array('media'=>$image,'credit'=>"",'caption'=>$name);
	return $header;
}

/**
 * Produces event timeline for a list of events
 */
function event_timeline_for_event_list($event_list) {
	$event_string = "('".implode("','", $event_list)."')";
	$query = "SELECT event_value_table.event, event_value_table.position, event_value_table.value, tag_name.name  FROM
(SELECT event_attribute_value.event, attribute_name.name, event_attribute_position.position, event_attribute_value.value FROM event_attribute_value, attribute_name, event_attribute_position
WHERE event_attribute_value.event IN ".$event_string." AND
event_attribute_value.attribute = attribute_name.attribute AND
attribute_name.name = event_attribute_position.event_attribute) as event_value_table
LEFT JOIN tag_name ON tag_name.tag = event_value_table.value;";
	$output = array();
	$result = db_query($query);
	foreach($result as $record) {
		if(!isset($output[$record->event])) {
			$output[$record->event] = array(array(),array(),array(),array(),array(),array(),array());
		}
		if($record->name) {
			$output[$record->event][$record->position][] = story_search_link_check($record->name, request_path(), array("query"=>array("tag"=>$record->value)));
		}
		elseif(!is_freebase_topic_id($record->value)) {
			if($record->position == '1') {
				$output[$record->event][$record->position][] = str_replace("_"," ",$record->value);
			}
			else {
				$output[$record->event][$record->position][] = $record->value;
			}
		}
	}

	$output_with_titles = array();
	foreach($output as $event_id=>$event_row) {
		$row = array();
		foreach($event_row as $event_cell) {
			$row[] = implode(', ', $event_cell);
		}
		$output_with_titles[$event_id] = $row;

		//add title to the event array
		$event_type = get_type_of_stored_event($event_id);

		if($event_name = get_topic_name($event_id)) {
			$output_with_titles[$event_id][0] = story_search_link_check($event_name, request_path(), array("query"=>array("tag"=>$event_id)));
				
			// 			$output['title'][] = array($event_id,$event_name);
			//cache topic info
// 			$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $event_id);

		}
		elseif($event_type == 'exhibition_creation') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/exhibitions/exhibition').' at '
					.get_event_label($event_id, '/exhibitions/exhibition_run/venue');
		}
		elseif($event_type == 'award_won') {
			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' won '
					.get_event_label($event_id, '/award/award_honor/award');
		}
		elseif($event_type == 'award_nomination') {
			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' nominated for '
					.get_event_label($event_id, '/award/award_nomination/award');
		}
		// 		elseif($event_type == 'education') {
		// 			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' educated at '
		// 					.get_event_label_with_event_attribute_name($event_id, 'location');
		// 		}
		elseif($event_type == 'education') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/education/education/student').' educated at '
					.get_event_label($event_id, '/education/education/institution');
		}
		elseif($event_type == 'place_lived') {
			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' lived in '
					.get_event_label_with_event_attribute_name($event_id, 'location');
		}
		elseif($event_type == 'exhibition_run') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/exhibitions/exhibition_run/venue').' exhibited '
					.$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition_run/exhibition');
		}
		elseif($event_type == 'object_location') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/visual_art/artwork_location_relationship/artwork').' in '
					.get_event_label($event_id, '/visual_art/artwork_location_relationship/location');
		}
		elseif($event_type == 'object_ownership') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/visual_art/artwork_owner_relationship/artwork').' owned by '
					.get_event_label($event_id, '/visual_art/artwork_owner_relationship/owner');
		}
		elseif($event_type == 'organization_membership') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/organization/organization_membership/member').' member of '
					.get_event_label($event_id, '/organization/organization_membership/organization');
		}

	}
	
	$timeline_output = array();

	foreach($output_with_titles as $key=>$output_with_title) {
		$row = array();
		$row['headline'] = $output_with_title[0];
		$row['tag'] = $output_with_title[1];
		if($output_with_title[4] && !$output_with_title[3]) {
			$row['startDate'] = translate_time_for_timeline2($output_with_title[4]);
			$row['endDate'] = translate_time_for_timeline2($output_with_title[3]);			
		}
		else {
			$row['startDate'] = translate_time_for_timeline2($output_with_title[3]);
			$row['endDate'] = translate_time_for_timeline2($output_with_title[4]);
		}
		$row['text'] = 'Agent: '.$output_with_title[2].'<br/>'.'Location: '.$output_with_title[5].'<br/>'.'Tag: '.$output_with_title[6];
		$image = check_freebase_saved_image($key);
		if($image) {
			$thumbnail = check_freebase_saved_image($key,TRUE);
			$name = get_topic_name($key);
			if($name) {
				$row['asset'] = array('media'=>$image,'credit'=>"",'caption'=>$name, 'thumbnail'=>$thumbnail);
			}
			else {
				$row['asset'] = array('media'=>$image,'credit'=>"",'caption'=>"", 'thumbnail'=>$thumbnail);
			}		
		}
		else {
			$row['asset'] = array('media'=>"",'credit'=>"",'caption'=>"");			
		}
		$timeline_output[] = $row;	
	}
	return $timeline_output;
}


/**
 * Produces event table for a list of events
 */
function event_table_for_event_list($event_list) {
	$event_string = "('".implode("','", $event_list)."')";
	$query = "SELECT event_value_table.event, event_value_table.position, event_value_table.value, tag_name.name  FROM
(SELECT event_attribute_value.event, attribute_name.name, event_attribute_position.position, event_attribute_value.value FROM event_attribute_value, attribute_name, event_attribute_position
WHERE event_attribute_value.event IN ".$event_string." AND
event_attribute_value.attribute = attribute_name.attribute AND
attribute_name.name = event_attribute_position.event_attribute) as event_value_table
LEFT JOIN tag_name ON tag_name.tag = event_value_table.value;";
	$output = array();
	$result = db_query($query);
	foreach($result as $record) {
		if(!isset($output[$record->event])) {
			$output[$record->event] = array(array(),array(),array(),array(),array(),array(),array());
		}
		if($record->name) {
			$output[$record->event][$record->position][] = story_search_link_check($record->name, request_path(), array("query"=>array("tag"=>$record->value)));
		}
		elseif(!is_freebase_topic_id($record->value)) {
			if($record->position == '1') {
				$output[$record->event][$record->position][] = str_replace("_"," ",$record->value);
			}
			else {
				$output[$record->event][$record->position][] = $record->value;
				}
			}
	}

	$output_with_titles = array();
	foreach($output as $event_id=>$event_row) {
		$row = array();
		foreach($event_row as $event_cell) {
			$row[] = implode(', ', $event_cell);
		}
		$output_with_titles[$event_id] = $row;
		
		//add title to the event array
		$event_type = get_type_of_stored_event($event_id);
		
		if($event_name = get_topic_name($event_id)) {
			$output_with_titles[$event_id][0] = story_search_link_check($event_name, request_path(), array("query"=>array("tag"=>$event_id)));
			
// 			$output['title'][] = array($event_id,$event_name);
			//cache topic info
// 			$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $event_id);
		
		}
		elseif($event_type == 'exhibition_creation') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/exhibitions/exhibition').' at '
					.get_event_label($event_id, '/exhibitions/exhibition_run/venue');
		}
		elseif($event_type == 'award_won') {
			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' won '
					.get_event_label($event_id, '/award/award_honor/award');
		}
		elseif($event_type == 'award_nomination') {
			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' nominated for '
					.get_event_label($event_id, '/award/award_nomination/award');
		}
// 		elseif($event_type == 'education') {
// 			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' educated at '
// 					.get_event_label_with_event_attribute_name($event_id, 'location');
// 		}
		elseif($event_type == 'education') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/education/education/student').' educated at '
					.get_event_label($event_id, '/education/education/institution');
		}
		elseif($event_type == 'place_lived') {
			$output_with_titles[$event_id][0] = get_event_label_with_event_attribute_name($event_id, 'agent').' lived in '
					.get_event_label_with_event_attribute_name($event_id, 'location');
		}
		elseif($event_type == 'exhibition_run') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/exhibitions/exhibition_run/venue').' exhibited '
					.$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition_run/exhibition');
		}
		elseif($event_type == 'object_location') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/visual_art/artwork_location_relationship/artwork').' in '
					.get_event_label($event_id, '/visual_art/artwork_location_relationship/location');
		}
		elseif($event_type == 'object_ownership') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/visual_art/artwork_owner_relationship/artwork').' owned by '
					.get_event_label($event_id, '/visual_art/artwork_owner_relationship/owner');
		}
		elseif($event_type == 'organization_membership') {
			$output_with_titles[$event_id][0] = get_event_label($event_id, '/organization/organization_membership/member').' member of '
					.get_event_label($event_id, '/organization/organization_membership/organization');
		}

	}
	
	$table = theme(
				'table', 
				array(	'rows' => $output_with_titles, 
						'header' => array(	
										array( 	'data'=>'title', 
												'data-class'=>'expand'), 
										'activity', 
										'agent', 
										'start time',
										'end time',
										'location',
										array(	'data'=>'tags', 
												'data-sort-initial'=>'descending', 
												'data-class'=>'expand')
										),
						'attributes' => array('data-filter'=> '#event-space-filter')
					)
				);
	return '<div class="event-space-table">' . $table . '</div>';
}

/**
 * Produces event table for a single tag
 */
function event_table_for_tag($topic = '/m/01qwfk') {
	$topic_types = check_for_tag_types($topic);
	$query = "SELECT event_value_table.event, event_value_table.position, event_value_table.value, tag_name.name  FROM
(SELECT event_table.event, attribute_name.name, event_attribute_position.position, value_table.value
FROM event_attribute_value as event_table, event_attribute_value as value_table, attribute_name, event_attribute_position
WHERE event_table.value = '".$topic."' AND
event_table.event =  value_table.event AND
value_table.attribute = attribute_name.attribute AND
attribute_name.name = event_attribute_position.event_attribute) as event_value_table
LEFT JOIN tag_name ON tag_name.tag = event_value_table.value;";

	$result = db_query($query);
	
	$output = array();
	foreach($result as $record) {
		if(!isset($output[$record->event])) {
			$output[$record->event] = array(array(),array(),array(),array(),array(),array(),array());
		}
		if($record->name) {
			$output[$record->event][$record->position][] = storytaglink($record->name, $record->value);
		}
		else {
			$output[$record->event][$record->position][] = $record->value;
		}
	}
	
	$output_with_titles = array();
	foreach($output as $event_id=>$event_row) {
		$row = array();
		foreach($event_row as $event_cell) {
			$row[] = implode(', ', $event_cell);
		}
		$output_with_titles[$event_id] = $row;
	
		//add title to the event array
		$event_type = get_type_of_stored_event($event_id);
	
		if($event_name = get_topic_name($event_id)) {
			$output_with_titles[$event_id][0] = storytaglink($event_name, $event_id);
			//cache topic info
// 			$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $event_id);
	
		}
		elseif($event_type == 'award_won') {
			if(in_array('/award/award', $topic_types)) {
				$value_name = get_event_value_with_event_attribute_name($event_id, 'agent');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value($event_id, '/award/award_honor/award');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
		elseif($event_type == 'award_nomination') {
			if(in_array('/award/award', $topic_types)) {
				$value_name = get_event_value_with_event_attribute_name($event_id, 'agent');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value($event_id, '/award/award_nomination/award');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
		elseif($event_type == 'education') {
			if(in_array('/education/educational_institution', $topic_types)) {
				$value_name = get_event_value_with_event_attribute_name($event_id, 'agent');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value_with_event_attribute_name($event_id, 'location');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
		elseif($event_type == 'place_lived') {
			if(in_array('/location/location', $topic_types)) {
				$value_name = get_event_value_with_event_attribute_name($event_id, 'agent');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value_with_event_attribute_name($event_id, 'location');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
		elseif($event_type == 'exhibition_run') {
			if(in_array('/exhibitions/exhibition', $topic_types)) {
				$value_name = get_event_value($event_id, '/exhibitions/exhibition_run/venue');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value($event_id, '/exhibitions/exhibition_run/exhibition');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
		elseif($event_type == 'object_location') {
			if(in_array('/visual_art/artwork', $topic_types)) {
				$value_name = get_event_value($event_id, '/visual_art/artwork_location_relationship/location');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value($event_id, '/visual_art/artwork_location_relationship/artwork');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
		elseif($event_type == 'object_ownership') {
			if(in_array('/visual_art/art_owner', $topic_types)) {
				$value_name = get_event_value($event_id, '/visual_art/artwork_owner_relationship/artwork');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value($event_id, '/visual_art/artwork_owner_relationship/owner');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
		elseif($event_type == 'organization_membership') {
			if(in_array(' /organization/membership_organization', $topic_types)) {
				$value_name = get_event_value($event_id, '/organization/organization_membership/member');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
			else {
				$value_name = get_event_value($event_id, '/organization/organization_membership/organization');
				$output_with_titles[$event_id][0] = storytaglink($value_name[1], $value_name[0]);
			}
		}
	}
	$table = theme('table',array('rows' => $output_with_titles, 'header' => array('title','activity','agent','start_time','end_time','location','tags')));
	return $table;
}

/**
 * Get image id for a topic
 */
function get_topic_image_topic($topic = "/m/0hc9x6h") {
	$query = "SELECT tag, image_tag FROM fb_saved_images WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$object = $result->fetchObject();
	if(isset($object->tag)) {
		return array('tag'=>$object->tag, 'image_tag'=>$object->image_tag);
	}
	else {
		return array();
	}
}

/**
 * Check for saved image associated with a topic
 */
function check_freebase_saved_image($topic = '/m/01qwfk', $thumbnail_url = FALSE, $reload = FALSE) {
	global $base_url;
	//check in local cache for image id
	if(!$reload) {
		$image_topic_test = get_topic_image_topic($topic);
	}
	if(!empty($image_topic_test)) {
		if($image_topic_test['image_tag']) {
			if($thumbnail_url) {
				return $base_url.'/sites/default/files/fbimages/'.$image_topic_test['image_tag'].'_sm.jpeg';
			}
			else {
				return $base_url.'/sites/default/files/fbimages/'.$image_topic_test['image_tag'].'.jpeg';
			}
		}
		else {
			return FALSE;
		}
	}
	
	//retrieve topic id for image
	$googleapikey = get_google_api_key_path();
	$image_query = 'https://www.googleapis.com/freebase/v1/topic'.$topic.'?filter=/common/topic/image&limit=1'.$googleapikey;
	$result = drupal_http_request($image_query);

	if(isset($result->data)) {
		$data = drupal_json_decode($result->data);
	}
	
	if(isset($data['property']['/common/topic/image']['values']['0']['id'])) {
		$image_topic = $data['property']['/common/topic/image']['values']['0']['id'];
	}
	else {
		$image_topic = FALSE;
	}	

	//retrieve and save image using id
	//save reference in local db
	if($image_topic == FALSE) {

		$values_list = "VALUES ('".$topic."')";
		$query = "INSERT INTO fb_saved_images (tag) ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag);";
		$result = db_query($query);
		$local_url = FALSE;
	}
	else {

		$id = save_fb_image($image_topic);
		$values_list = "VALUES ('".$topic."', '".$id."')";
		$query = "INSERT INTO fb_saved_images (tag, image_tag) ".$values_list." ON DUPLICATE KEY UPDATE image_tag = VALUES(image_tag);";
		$result = db_query($query);
		if($thumbnail_url) {
			return $base_url.'/sites/default/files/fbimages/'.$id.'_sm.jpeg';
		}
		else {
			return $base_url.'/sites/default/files/fbimages/'.$id.'.jpeg';
		}
	}	

	return $local_url;	
}

/**
 * Reset local cache of freebase data. Wipes all cached data on tags, events, etc.
 */
function reset_recommender_database() {
	//This table lists the previously calculated tags.
	$query = "delete from calculated_tags WHERE 1;";
	db_query($query);
	
	//This table lists the name (title) of each tag.
	$query = "delete from tag_name WHERE 1;";
	db_query($query);
	
	//This table defines the triples of each event.
	$query = "delete from event_attribute_value WHERE 1;";
	$result = db_query($query);
	
	//This table records an id for each multi-tag query. This is the story id.
	$query = "delete from query_id WHERE 1;";
	db_query($query);

	//This table records the tags of each query id, i.e. of each story.
	$query = "delete from query_tag WHERE 1;";
	db_query($query);

	//This table records the description of each tag.
	$query = "delete FROM tag_description WHERE 1;";
	db_query($query);
	
	//This table lists the previously calculated settings.
	$query = "delete from calculated_settings WHERE 1;";
	db_query($query);
	
	//This table lists values of topic attribute pairs.
 	$query = "DELETE FROM tag_attribute_id_value WHERE 1;";
 	db_query($query);
 
	//This table lists topic attribute pairs.
	$query = "DELETE FROM tag_attribute WHERE 1;";
	db_query($query);
	
	//This table lists notable types of freebase topics.
	$query = "delete from tag_notable_types where 1;";
	db_query($query);
	
	//This table lists cached freebase images.
	$query = "delete from fb_saved_images where 1;";
	db_query($query);
	
	//This table stores cached timeline data for a tag.
	$query = "delete from tag_timeline_data WHERE 1;";
	db_query($query);
	
	//This table stores cached timeline data for a story.
	$query = "delete from story_timeline_data WHERE 1;";
	db_query($query);
	
	//This table stores cached timeline data for a setting.
	$query = "delete from setting_timeline_data WHERE 1;";
	db_query($query);

	//Represents locations (freebase topics) that contain a specified location.
	$query = "delete from location_container WHERE 1;";
	db_query($query);

	//Stores mapping between tags and their associated set of events
	$query = "delete from tag_event_id WHERE 1;";
	db_query($query);

	//Stores mapping between tags and their full set of freebase types
	$query = "delete from tag_types WHERE 1;";
	db_query($query);

}

/**
 * Retrieve fact triples for a topic
 */
function triples_of_a_tag($topic) {
	$result = array("triples"=>array(),"names"=>array());
// 	$result = array("events"=>array(),"names"=>array(), "links"=>array());
	$types = check_for_tag_types($topic);

	//**type: /people/person
	if(in_array("/people/person", $types)) {
		//person birth details
		$result = fb_person_birth_date_location($topic, $result);
	}	
	if(in_array("/people/deceased_person", $types)) {
		//person death details
		$result = fb_deceased_person_death_date_location($topic, $result);
	}
	
	if(in_array("/visual_art/visual_artist", $types)) {
		//artist movement details
		$result = fb_artist_associated_periods_movements($topic, $result);
	}

	if(in_array("/visual_art/artwork", $types)) {
		//artwork media and suppport movement details
		$result = fb_artwork_associated_media($topic, $result);
		$result = fb_artwork_associated_support($topic, $result);
	}
	
	if(in_array("/visual_art/art_period_movement", $types)) {
		//artist movement details
		$result = fb_periods_movements_associated_artist($topic, $result);
	}

	if(in_array("/location/location", $types)) {
		//location contained by
		$result = fb_location_containedBy($topic, $result);
	}
	
	if(in_array("/exhibitions/exhibition", $types)) {
		//exhibition details - fact version
// 		$result = fb_exhibition_details($topic, $result);
	}
	
	if(in_array("/exhibitions/exhibition_subject", $types)) {
		//subject of exhibition - fact version
// 		$result = fb_exhibition_subject_exhibition($topic, $result);
	}
	
	if(in_array("/exhibitions/exhibition_producer", $types)) {
		//subject of exhibition - fact version
// 		$result = fb_exhibition_producer_exhibition($topic, $result);
	}

	if(in_array("/exhibitions/exhibit", $types)) {
		//subject of exhibition - fact version
// 		$result = fb_exhibit_exhibition($topic, $result);
	}

	if(in_array("/exhibitions/exhibition_curator", $types)) {
		//subject of exhibition - fact version
// 		$result = fb_exhibition_curator_exhibition($topic, $result);
	}
	
	//saving
	save_tag_names_to_db($result["names"]);
	save_triples_to_db($result["triples"]);
}

/**
 * Save topic and attibute to database
 */
function save_tag_attribute($topic, $attribute, $link) {
	$query = "INSERT INTO tag_attribute (tag, attribute, link) VALUES(:tag, :attribute, :link) ON DUPLICATE KEY UPDATE tag = VALUES(tag), attribute = VALUES(attribute), link = VALUES(link);";
	$result = db_query($query, array(':tag'=>$topic, ':attribute'=>$attribute, ':link'=>$link));
}

/**
 * Check for facts of a topic
 */
function check_for_tag_in_tag_attribute($topic) {
	$query = "SELECT id FROM tag_attribute WHERE tag = :tag;";
	$result = db_query($query, array(':tag'=>$topic));
	$found = $result->fetchObject();
	if(isset($found->id)) {
		return $found->id;
	}
	else {
		return 0;
	}	
}

/**
 * Check for facts for topic and attribute
 */
function check_for_tag_attribute($topic, $attribute) {
	$query = "SELECT id FROM tag_attribute WHERE tag = :tag AND attribute = :attribute;";
	$result = db_query($query, array(':tag'=>$topic, ':attribute'=>$attribute));
	$found = $result->fetchObject();
	if(isset($found->id)) {
		return $found->id;
	}
	else {
		return 0;
	}
}

/**
 * Save topic facts to database
 */
function save_tag_attribute_id_values($id, $values) {
	$values_list = "";	
	foreach($values as $value) {
		$name = my_escape_string($value);
		$values_list .=", ('".$id."', '".$name."')";
	}
	if($values_list == "") {
		return;
	}
	$values_list = "VALUES".substr($values_list, 1)." ";
	
	$query = "INSERT INTO tag_attribute_id_value (tag_attribute_id, value) ".$values_list." ON DUPLICATE KEY UPDATE tag_attribute_id = VALUES(tag_attribute_id), value = VALUES(value);";
	
	$result = db_query($query);
}

/**
 * Save a set of fact triples
 */
function save_triples_to_db($triples) {
	foreach($triples as $triple) {
		//save fact triples of the tag
		$topic = $triple["0"];
		$attribute = $triple["1"];
		$values = $triple["2"];
		$link = $triple["3"];
		save_tag_attribute($topic, $attribute, $link);
		
		//get new tag triple id
		$id = check_for_tag_attribute($topic, $attribute);
		
		//save to tag triple value table
 		save_tag_attribute_id_values($id, $values);
	}
}

/**
 * Retrieve locations that contain the current topic location
 */
function fb_location_containedBy($topic = '/m/02cft', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/location/location/containedby"=> array(array(
    "mid"=> null,
    "name"=> null
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"]["0"]["/location/location/containedby"])) {
		$triples[] = array($topic, "Part of", get_values($resultarray["result"]["0"]["/location/location/containedby"]), 1);
		$tag_names = get_topic_name_pairs(array("/location/location/containedby"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));	
}

/**
 * Retrieve associated artist triples for an art movement
*/
function fb_periods_movements_associated_artist($topic = '/m/014wxs', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/art_period_movement/associated_artists"=> array(array(
    "mid"=> null,
    "name"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"]["0"]["/visual_art/art_period_movement/associated_artists"])) {
		$triples[] = array($topic, "Associated artists", get_values($resultarray["result"]["0"]["/visual_art/art_period_movement/associated_artists"]), 1);
		$tag_names = get_topic_name_pairs(array("/visual_art/art_period_movement/associated_artists"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

/**
 * Retrieve media and suport triples for an artwork topic
 */
function fb_artwork_associated_media($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
			"mid"=> $topic,
			"/visual_art/artwork/media"=> array(array(
					"mid"=> null,
					"name"=> null,
					"optional"=>"optional"
			)),
	));

	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"]["0"]["/visual_art/artwork/media"])) {
		$triples[] = array($topic, "Media", get_values($resultarray["result"]["0"]["/visual_art/artwork/media"]), 1);
		$tag_names = get_topic_name_pairs(array("/visual_art/artwork/media"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

/**
 * Retrieve media and suport triples for an artwork topic
 */
function fb_artwork_associated_support($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
	"/visual_art/artwork/support"=> array(array(
			"mid"=> null,
			"name"=> null,
			"optional"=>"optional"
	)),
));

	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"]["0"]["/visual_art/artwork/support"])) {
		$triples[] = array($topic, "Support", get_values($resultarray["result"]["0"]["/visual_art/artwork/support"]), 1);
		$tag_names = get_topic_name_pairs(array("/visual_art/artwork/support"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

/**
 * Retrieve art movement triples for an artist topic
*/
function fb_artist_associated_periods_movements($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/visual_artist/associated_periods_or_movements"=> array(array(
    "mid"=> null,
    "name"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"]["0"]["/visual_art/visual_artist/associated_periods_or_movements"])) {
		$triples[] = array($topic, "Associated period or movement", get_values($resultarray["result"]["0"]["/visual_art/visual_artist/associated_periods_or_movements"]), 1);
		$tag_names = get_topic_name_pairs(array("/visual_art/visual_artist/associated_periods_or_movements"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

/**
 * Retrieve date of birth triple for a topic
*/
function fb_person_birth_date_location($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/people/person/date_of_birth"=> null,
  "/people/person/place_of_birth"=> array(
    "mid"=> null,
    "name"=> null,
  	"optional"=>"optional"
  )
));

	$resultarray = execute_mql_event_query($query);
	if(isset($resultarray["result"]["0"]["/people/person/place_of_birth"]["mid"]) && isset($resultarray["result"]["0"]["/people/person/place_of_birth"]["name"])) {
		$triples[] = array($topic, "Place of birth", array($resultarray["result"]["0"]["/people/person/place_of_birth"]["mid"]), 1);
		$tag_names[$resultarray["result"]["0"]["/people/person/place_of_birth"]["mid"]] = $resultarray["result"]["0"]["/people/person/place_of_birth"]["name"];
	}
	if(isset($resultarray["result"]["0"]["/people/person/date_of_birth"])) {
		$triples[] = array($topic, "Date of birth", array($resultarray["result"]["0"]["/people/person/date_of_birth"]), 0);
	}
	
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));

}

/**
 * Retrieve date of death triple for a topic
 */
function fb_deceased_person_death_date_location($topic = '/m/071k7_', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "/people/deceased_person/date_of_death"=> null,
  "/people/deceased_person/place_of_death"=> array(
    "mid"=> null,
    "name"=> null
  )
));
	
	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["mid"]) && isset($resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["name"])) {
		$triples[] = array($topic, "Place of death", array($resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["mid"]), 1);
		$tag_names[$resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["mid"]] = $resultarray["result"]["0"]["/people/deceased_person/place_of_death"]["name"];
	}
	if(isset($resultarray["result"]["0"]["/people/deceased_person/date_of_death"])) {
		$triples[] = array($topic, "Date of death", array($resultarray["result"]["0"]["/people/deceased_person/date_of_death"]), 0);
	}
	
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));	
}


/**
 * Retrieve subjects, event type, producer, exhibits, curator of an exhibition - fact version
 */
function fb_exhibition_details($topic = '/m/0hdzz0h', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "type"=> "/exhibitions/exhibition",
  "/exhibitions/exhibition/exhibits"=> array(array(
    "name"=> null,
    "mid"=> null
  )),
  "/exhibitions/exhibition/curators"=> array(array(
    "name"=> null,
    "mid"=> null
  )),
  "/exhibitions/exhibition/produced_by"=> array(array(
    "name"=> null,
    "mid"=> null
  )),
  "/exhibitions/exhibition/subjects"=> array(array(
    "name"=> null,
    "mid"=> null
  )),
//   "/exhibitions/exhibition/exhibition_types"=> array(array(
//     "name"=> null,
//     "mid"=> null
//   ))
));
	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition/exhibits"])) {
		$triples[] = array($topic, "Exhibits", get_values($resultarray["result"]["0"]["/exhibitions/exhibition/exhibits"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition/exhibits"),$resultarray["result"]["0"],$tag_names);
	}
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition/curators"])) {
		$triples[] = array($topic, "Curated by", get_values($resultarray["result"]["0"]["/exhibitions/exhibition/curators"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition/curators"),$resultarray["result"]["0"],$tag_names);
	}	
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition/produced_by"])) {
		$triples[] = array($topic, "Produced by", get_values($resultarray["result"]["0"]["/exhibitions/exhibition/produced_by"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by"),$resultarray["result"]["0"],$tag_names);
	}
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition/subjects"])) {
		$triples[] = array($topic, "Subjects", get_values($resultarray["result"]["0"]["/exhibitions/exhibition/subjects"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition/subjects"),$resultarray["result"]["0"],$tag_names);
	}
// 	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition/exhibition_types"])) {
// 		$triples[] = array($topic, "Exhibition type", get_values($resultarray["result"]["0"]["/exhibitions/exhibition/exhibition_types"]), 1);
// 		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition/exhibition_types"),$resultarray["result"]["0"],$tag_names);
// 	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));
}

/**
 * Retrieve exhibition of exhibition subject - fact version
 */
function fb_exhibition_subject_exhibition($topic = '/m/03y2s9', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "type"=> "/exhibitions/exhibition_subject",
  "/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"=> array(array(
    "name"=> null,
    "mid"=> null
  ))
));	
	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"])) {
		$triples[] = array($topic, "Subject of exhibition", get_values($resultarray["result"]["0"]["/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));
}

/**
 * Retrieve exhibition of exhibition producer - fact version
 */
function fb_exhibition_producer_exhibition($topic = '/m/02vz3d', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "type"=> "/exhibitions/exhibition_producer",
  "/exhibitions/exhibition_producer/exhibitions_produced"=> array(array(
    "name"=> null,
    "mid"=> null
  ))
));
	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition_producer/exhibitions_produced"])) {
		$triples[] = array($topic, "Producer of exhibition", get_values($resultarray["result"]["0"]["/exhibitions/exhibition_producer/exhibitions_produced"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition_producer/exhibitions_produced"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));
}

/**
 * Retrieve exhibition of exhibit - fact version
 */
function fb_exhibit_exhibition($topic = '/m/0hd_4hm', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "type"=> "/exhibitions/exhibit",
  "/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
    "name"=> null,
    "mid"=> null
  ))
));
	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibit/exhibitions_displayed_in"])) {
		$triples[] = array($topic, "Displayed in exhibition", get_values($resultarray["result"]["0"]["/exhibitions/exhibit/exhibitions_displayed_in"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibit/exhibitions_displayed_in"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));
}

/**
 * Retrieve exhibition of exhibition curator - fact version
 */
function fb_exhibition_curator_exhibition($topic = '/m/0hd_0bn', $result = array("triples"=>array(),"names"=>array())) {
	$triples = array();
	$tag_names = array();
	$query = array(array(
  "mid"=> $topic,
  "type"=> "/exhibitions/exhibition_curator",
  "/exhibitions/exhibition_curator/exhibitions_curated"=> array(array(
    "name"=> null,
    "mid"=> null
  ))
));
	$resultarray = execute_mql_event_query($query);
	
	if(isset($resultarray["result"]["0"]["/exhibitions/exhibition_curator/exhibitions_curated"])) {
		$triples[] = array($topic, "Curator of exhibition", get_values($resultarray["result"]["0"]["/exhibitions/exhibition_curator/exhibitions_curated"]), 1);
		$tag_names = get_topic_name_pairs(array("/exhibitions/exhibition_curator/exhibitions_curated"),$resultarray["result"]["0"],$tag_names);
	}
	return array("triples"=>array_merge($triples, $result["triples"]),
			"names"=>array_merge($tag_names, $result["names"]));
}

/**
 * Retrieve event space for a setting
 */
function event_space_of_a_setting($location, $year, $end = 0) {
	if($end) {
		$year_field = $year.":".$end;
	}
	else {
		$year_field = $year;
	}	
	if(check_for_calculated_setting($location, $year_field)) {
		return;
	}
	$result = array("events"=>array(),"names"=>array(),"links"=>array());
	$result = dec_events_of_the_setting($location, $year, $end, $result);
	$result = dec_containing_events_of_the_setting($location, $year, $end, $result);
	$result = dec_containing_containing_events_of_the_setting($location, $year, $end, $result);

	save_events_to_db($result["events"]);
	save_tag_names_to_db($result["names"]);
	save_calculated_setting($location, $year);

}

/**
 * Check if tag is a timestamp, more accurately a datestamp
 */
function is_time_stamp($date) {
	if(preg_match("/^\d{4}$/", $date)) {
		return TRUE;
	}
	elseif(preg_match("/^\d{4}-\d{2}$/", $date)) {
		return TRUE;
	}
	elseif(preg_match("/^\d{4}-\d{2}-\d{2}$/", $date)) {
		return TRUE;
	}
	return FALSE;
}

/**
 * Complete timestamp. For use in time calculations
 */
function complete_time_stamp($date, $start_end = 'start') {
	//if YYYY
	if(preg_match("/^\d{4}$/", $date)) {
		if($start_end == 'start') {
			return $date;//.'-01-01';
		}
		elseif($start_end == 'end') {
			return $date.'-12-12';
		}
	}
	//if YYYY-MM
	elseif(preg_match("/^\d{4}-\d{2}$/", $date)) {
		if($start_end == 'start') {
			return $date;//.'-01';
		}
		elseif($start_end == 'end') {
			return $date.'-12';	
		}		
	}
	//if YYYY-MM-DD
	elseif(preg_match("/^\d{4}-\d{2}-\d{2}$/", $date)) {
		return $date;		
	}
	return $date;
}

/**
 * Produce output for a setting
 */
// function dec_setting() {

// 	$output = "";
// 	if(isset($_GET['location']) && isset($_GET['time'])) {
// 		$location = $_GET['location'];
// 		$time = $_GET['time'];
// 	}
// 	else {
// 		return "No setting found";
// 	}

// 	$year = substr($time, 0, 4);

// 	if(isset($_GET['end'])) {
// 		$end = $_GET['end'];
// 		$end_year = substr($end, 0, 4);
// 		$full_start_time = complete_time_stamp($time, 'start');
// 		$full_end_time = complete_time_stamp($end, 'end');
// 	}
// 	else {
// 		$end_year = 0;
// 		$end = 0;
// 		$full_start_time = complete_time_stamp($time, 'start');
// 		$full_end_time = complete_time_stamp($time, 'end');
// 	}
	
function dec_setting($location, $time,  $end) {
	$output = '<div>';
	if($end) {
		$full_start_time = complete_time_stamp($time, 'start');
		$full_end_time = complete_time_stamp($end, 'end');		
	}
	else {
		$full_start_time = complete_time_stamp($time, 'start');
		$full_end_time = complete_time_stamp($time, 'end');		
	}
	//check the event space of the location has been calculated
	new_event_space_of_a_topic($location);
		
	//event space for setting
	event_space_of_a_setting($location, $full_start_time, $full_end_time);
	
	//get events for a setting
	$all_events = get_all_events_for_setting($location, $full_start_time, $full_end_time);
	$event_array = flat_list_of_events($all_events);
	
	//event table and timeline links
	$setting_event_table = event_table_for_event_list($event_array);
	$timeline_links = dec_setting_timeline_links($time, $end, $location, $event_array);
	//get themes for the events of a setting
	$themes = dec_get_themes_for_events_of_setting($location, $full_start_time, $full_end_time);

	$name = get_topic_name($location);
	$path_array = explode('/',request_path());
	if(end($path_array) == 'stories' || end($path_array) == 'settingstories') {
		array_pop($path_array);
	}
	$path_array[] = 'settingstories';
	$next_path = implode('/',$path_array);
	if($end) {
		if($name) {
			$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i><span class="topic-title">' . t('About : ').$name.", ".$time." to ".$end.'&nbsp;&nbsp;</span>' . l('<span class="topic-search"><i class="fa fa-search">&nbsp;</i>' . '</span>', $next_path, array("query"=>array('storylocation'=>$location, 'storytime'=>$time, 'storyend'=>$end), "html"=>TRUE)) . '</h2>';
				
// 			$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i>' . t('About : ') .$name.", ".$time." to ".$end.'</h2>';
// 			$output .= '<h2>'.$name.", ".$time." to ".$end.'</h2>';
// 			drupal_set_title($name.", ".$time." to ".$end);
		}
		else {
			$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i><span class="topic-title">' . t('About : ').$location.", ".$time." to ".$end.'&nbsp;&nbsp;</span>' . l('<span class="topic-search"><i class="fa fa-search">&nbsp;</i>' . '</span>', $next_path, array("query"=>array('storylocation'=>$location, 'storytime'=>$time, 'storyend'=>$end), "html"=>TRUE)) . '</h2>';
				
// 			$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i>' . t('About : ') .$name.", ".$time." to ".$end.'</h2>';
// 			$output .= '<h2>'.$location.", ".$time." to ".$end.'</h2>';
// 			drupal_set_title($location.", ".$time." to ".$end);
		}		
	}
	else {
		if($name) {
			$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i><span class="topic-title">' . t('About : ').$name.", ".$time.'&nbsp;&nbsp;</span>' . l('<span class="topic-search"><i class="fa fa-search">&nbsp;</i>' . '</span>', $next_path, array("query"=>array('storylocation'=>$location, 'storytime'=>$time), "html"=>TRUE)) . '</h2>';

// 			$output .= '<h2>'.$name.", ".$time.'</h2>';
// 			drupal_set_title($name.", ".$time);
		}
		else {
			$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i><span class="topic-title">' . t('About : ').$location.", ".$time.'&nbsp;&nbsp;</span>' . l('<span class="topic-search"><i class="fa fa-search">&nbsp;</i>' . '</span>', $next_path, array("query"=>array('storylocation'=>$location, 'storytime'=>$time), "html"=>TRUE)) . '</h2>';

// 			$output .= '<h2>'.$location.", ".$time.'</h2>';
// 			drupal_set_title($location.", ".$time);
		}
	}
	
	//tag name and description
	if($name) {
		$output .= '<div style="clear:both">Location: '.story_search_link_check($name, request_path(), array("query"=>array("tag"=>$location))).'</div>';
	}
	else {
		$output .= '<div style="clear:both">Location: '.$location.'</div>';
	}
	$description = get_topic_description($location);
	if($description) {
		// 		$output .= '<div style="clear:both">Description:</div><div style="clear:both">'.$description.'</div>';
		$output .= '<div style="clear:both">'.$description.'</div>';
	}

	if(!empty($themes)) {
		$output .= '<div style="clear:both"><h2><i class="fa fa-link fa-lg">&nbsp;</i>Themes</h2></div>';
		$output .=  '<ul class="field-name-field-fb-tags">';
		foreach($themes as $theme) {
// 			$output .= l('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", "tag".$theme->value, array("html"=>TRUE));

			//$output .= storytaglink('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", $theme->value, array("html"=>TRUE));
			$output .= story_search_link_check('<li class="tags">'.$theme->name."</li>", request_path(), array("html"=>TRUE, "query"=>array("tag"=>$theme->value)));
		
		}

		$output .=  '</ul><div style="clear:both;"></div>';
	}
	
	if(!empty($event_array)) {
		$output .= $timeline_links;
		$output .= '<div style="clear:both"><h2><i class="fa fa-cloud fa-lg">&nbsp;</i>Event Space : <span class="event-space-filter"><input id="event-space-filter" type="text"></span></h2></div>';

		$output .= $setting_event_table;
	}

// 	if(!empty($all_events)) {
// 		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
// 		if($end_year) {
// 			$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$time, 'end'=>$end))).'</div></div>';
// 		}
// 		else {
// 			$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$time))).'</div></div>';
// 		}
// 		foreach($all_events as $label=>$events) {
// 			$output .= '<div style="clear:both">'.ucfirst($label).':</div>';
// 			if($end_year) {
// 				$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline: '.ucfirst($label),'timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$time, 'event_type'=>$label, 'end'=>$end))).'</div></div>';
// 			}
// 			else {
// 				$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline: '.ucfirst($label),'timeline_for_setting',array('query'=>array('location'=>$location, 'time'=>$time, 'event_type'=>$label))).'</div></div>';
// 			}
// 			foreach($events as $event) {
// 				$output .= '<div style="float: left; width: 200px;">'.output_event_table($event)."</div>";
	
// 			}
// 		}
// 	}
	return $output.'</div>';
	
}

/**
 * Themes of a setting
 */
function dec_get_themes_for_events_of_setting($location, $year, $end = 0, $limit = 10, $min_frequency = 2) {
	$query = "SELECT * 
FROM
(SELECT event_attribute_value.value, COUNT(event_attribute_value.value) as frequency, tag_name.name
FROM event_attribute_value, tag_name,
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(
SELECT events_table.event, events_table.location, event_start_table.start_time, events_table.activity
FROM 
(SELECT DISTINCT event_location.event, event_location.value as location, event_activity.value as activity
FROM location_container, event_attribute_value as event_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = location_container.container AND location_container.location = '".$location."' AND
     event_location.event = event_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND 
     ((event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') OR (event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time'))) events_table
LEFT JOIN 
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM location_container, event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = location_container.container AND location_container.location = '".$location."' AND 
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time')
as event_start_table ON event_start_table.event = events_table.event) as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM location_container, event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
	location2_attribute_name.name = 'location' AND
	event_location2.value = location_container.container AND location_container.location = '".$location."' AND 
	event_location2.event = event_end_time.event AND
	event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time <= '".$end."' AND start_end_location_result.start_time >= '".$year."' AND start_end_location_result.end_time IS NULL) OR
		(start_end_location_result.end_time <= '".$end."' AND start_end_location_result.end_time >= '".$year."' AND start_end_location_result.start_time IS NULL) OR
(start_end_location_result.start_time <= '".$end."' AND start_end_location_result.end_time >= '".$year."')
) as combined_result
          WHERE combined_result.event = event_attribute_value.event AND
     event_attribute_value.value = tag_name.tag AND NOT EXISTS (SELECT attribute_name.name FROM attribute_name WHERE event_attribute_value.attribute = attribute_name.attribute AND attribute_name.name = 'location')
     group by event_attribute_value.value ORDER BY frequency DESC) as frequency_result
     WHERE frequency >= ".$min_frequency." LIMIT ".$limit.";";//excludes location by AND NOT EXISTS (SELECT attribute_name.name FROM attribute_name WHERE event_attribute_value.attribute = attribute_name.attribute AND attribute_name.name = 'location')

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;
}

/**
 * Retrieve events of a setting
 */
function dec_events_of_the_setting($location, $year, $end = 0, $previous_output = array("events"=>array(),"names"=>array(),"links"=>array())) {
	if(!$end) {
		$end = $year;
	}
	$query = array(array(
  "type"=> "/time/event",
  "mid"=> null,
  "name"=> null,
  "/time/event/locations"=> array(array(
    "mid"=> $location
  )),
  "ns3:/time/event/locations"=> array(array(
    "mid"=> null,
  	"name"=> null
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
  	"name"=> null,
  	"optional"=> "optional"
  )),
  "ns1:/time/event/start_date<="=> $end,
  "ns2:/time/event/end_date>="=> $year,
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null
));

	$resultarray = execute_mql_event_query($query);

	$setting_event_links = array();
	$topic_name_pairs = array();
	$output = array();
	if(!isset($resultarray["result"])) {
		return ;
	}
	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] =  str_replace(' ', '_',strtolower($notable_types["0"]));
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}

		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/locations","/time/event/people_involved"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$setting_event_links[] = array($location, $year, $end, $result["mid"]);
		
	}	

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
		"links"=>array_merge($setting_event_links, $previous_output["links"])
	);	
}

/**
 * Retrieve events containing the setting
*/
function dec_containing_events_of_the_setting($location, $year, $end = 0, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	if(!$end) {
		$end = $year;
	}
	$query = array(array(
  "type"=> "/time/event",
  "mid"=> null,
  "name"=> null,
  "ns0:/time/event/locations"=> array(array(
    "mid"=> null,
    "/location/location/contains"=> array(array(
      "mid"=> $location
    ))
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  )),
  "/time/event/locations"=> array(array(
    "mid"=> null,
    "name"=> null
  )),
  "/time/event/start_date<="=> $end,
  "/time/event/end_date>="=> $year,
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null
));

	$resultarray = execute_mql_event_query($query);
	$setting_event_links = array();
	$topic_name_pairs = array();
	$output = array();
	if(!isset($resultarray["result"])) {
		return ;
	}
	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] = str_replace(' ', '_',strtolower($notable_types["0"]));
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}
		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/locations","/time/event/people_involved"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$setting_event_links[] = array($location, $year, $end, $result["mid"]);
	}
			
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
	"links"=>array_merge($setting_event_links, $previous_output["links"]));
}

/**
 * Retrieve events two levels of containment above the setting
*/
function dec_containing_containing_events_of_the_setting($location, $year, $end = 0, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	if(!$end) {
		$end = $year;
	}
	$query = array(array(
  "type"=> "/time/event",
  "mid"=> null,
  "name"=> null,
  "ns0:/time/event/locations"=> array(array(
    "mid"=> null,
    "/location/location/contains"=> array(array(
      "/location/location/contains"=> array(array(
        "mid"=> $location
      ))
    ))
  )),
  "/time/event/locations"=> array(array(
    "mid"=> null,
    "name"=> null
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  )),
  "/time/event/start_date<="=> $end,
  "/time/event/end_date>="=> $year,
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null
));
	$resultarray = execute_mql_event_query($query);
	$setting_event_links = array();
	$topic_name_pairs = array();	
	$output = array();
	if(!isset($resultarray["result"])) {
		return ;
	}
	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] = str_replace(' ', '_',strtolower($notable_types["0"]));
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}
		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/locations","/time/event/people_involved"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$setting_event_links[] = array($location, $year, $end, $result["mid"]);
	}	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]),
	"links"=>array_merge($setting_event_links, $previous_output["links"]));
}

/**
 * Get tag list for a story
 */
function dec_story($story) {
	$story = (int) $story;
	
	if(!$story) {
		return "No story found";
	}
	$query = "SELECT query_tag.tag, tag_name.name FROM query_tag
LEFT JOIN tag_name ON query_tag.tag = tag_name.tag
WHERE query_tag.id = '".$story."';";
	$result = db_query($query);
	
	$tag_array = array();
	foreach ($result as $record) {
		$tag_array[] = $record->tag;
	}
	
	return dec_list_of_tags($tag_array, $story);
}

/**
 * Get tag list and save as a story id
 */
function dec_tags($list) {

	$tag_array = explode(",", str_replace(' ', '', substr(substr($list, 1), 0, -1)));
	$tag_array = array_unique($tag_array);

	if(!is_array($tag_array) || empty($tag_array)) {
		return "No list found";
	}
	
	//get unique query id
	$query1 = "INSERT INTO query_id(id) VALUES (NULL);";
	$result1 = db_query($query1);
	$query2 = "select max(id) as val from query_id";
	$result2 = db_query($query2);
	$maxobj = $result2->fetchObject();
	$max_value = $maxobj->val;
	
	//assign tags to query id
	$query = db_insert('query_tag')->fields(array('id', 'tag'));
	foreach($tag_array as $tag) {
		$query->values(array("id"=>$max_value, "tag"=>$tag));
	}
	$query->execute();
	
	return dec_list_of_tags($tag_array, $max_value);
}

/**
 * Update tag event mapping for single tag
 * Checks that the concept space fro that tag has been generated
 * Saves links between that tag and associated events
 * Loads (if necessary) the top name, image and description for each event of the tag for use in timelines
 */
function update_tag_event_mapping($tag) {
	new_event_space_of_a_topic($tag);
	$event_array = flat_list_of_single_tag_events(get_all_events_for_tag($tag));
	save_tag_event_results($tag, $event_array);
	
	//get the event ids of a topic
	$event_list = flat_list_of_single_tag_events(get_all_events_for_tag($tag));

	//check_topic_name_image_description($topic) for each event id for use on timelines
	foreach($event_list as $event) {
		check_topic_name_image_description($event);
// 		$handle = background_process_start('check_topic_name_image_description',$event);
	}	
	
}

/**
 * Produce output for a list of tags
 */
function dec_list_of_tags($tag_array, $max_value) {
	$output = '<div>&nbsp';

	//produce event spaces
	foreach($tag_array as $tag) {
		new_event_space_of_a_topic($tag);
	}
	
	//tags title
	$tag_name_array = array();
	foreach($tag_array as $tag) {
		$name = get_topic_name($tag);
		if($name) {
			$tag_name_array[] = $name;
		}
		else {
			$tag_name_array[] = $tag;
		}		
	}

	$output .= '<h2><i class="fa fa-info-circle fa-lg">&nbsp;</i>' . t('About : ') .implode(", ",$tag_name_array).'</h2>';
// 	drupal_set_title(implode(", ",$tag_name_array));
	
	//do the calculations
// 	$all_events = get_all_events_for_story2($max_value, $tag_array);
// 	$event_list = flat_list_of_events($all_events);

	//update tag event mapping
	foreach($tag_array as $single_tag) {
		$event_array = flat_list_of_single_tag_events(get_all_events_for_tag($single_tag));
		save_tag_event_results($single_tag, $event_array);
	}
	
	//use this list for event table 
	$event_list = event_list_for_story_id($max_value);
	
	//retrieve title, description and image for events******here
	async_check_for_name_description_image($event_list);
	
	$themes = top_n_themes_of_story($max_value, 10);
// 	$matching_themes = top_n_matching_themes_of_story2($event_list, $max_value, 10);	
	$event_table = event_table_for_event_list($event_list);
	$timeline_links = dec_tags_timeline_links($max_value);

// 	$other_all_events = other_all_events($max_value);
	$overlapping_settings = get_n_matching_settings_for_a_story2($max_value, 5);	
	
	//matching themes (i.e. the story tags)
// 	if(!empty($matching_themes)) {
// 		$output .= '<div style="clear:both"><h2>Tags: </h2></div>';
// 		foreach($matching_themes as $theme) {
// 			if($theme->value && !$theme->name) {
// 				$output .= storytaglink('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->value."</div>", $theme->value, array("html"=>TRUE));
				
// // 				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->value."</div>";
// 			}
// 			else {
// 				$output .= storytaglink('<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.$theme->name."</div>", $theme->value, array("html"=>TRUE));
// 			}
// 		}
	
// 	}
	
	//themes (i.e. themes may or may not be story tags)
	if(!empty($themes)) {
		$output .= '<div style="clear:both"><h2><i class="fa fa-link fa-lg">&nbsp;</i>Themes</h2></div>';
		$output .=  '<ul class="field-name-field-fb-tags">';
		foreach($themes as $theme) {
			$output .= storytaglink('<li class="tags"">'.$theme->name."</li>", $theme->value, array("html"=>TRUE));
		}
		$output .=  '</ul>';
	
	}
	
	//settings
	if(!empty($overlapping_settings)) {
	
		$output .= '<div style="clear:both"><h2><i class="fa fa-compass fa-lg">&nbsp;</i>Settings</h2></div>';
		$output .=  '<ul class="field-name-field-fb-tags">';
		foreach($overlapping_settings as $setting) {
			if($setting->end && $setting->start && $setting->start !== $setting->end) {
				$output .= l('<li class="tags">'. $setting->name.", ".$setting->start." to ".$setting->end . '</li>',request_path(),array('html'=>'true', 'query' => array('location' => $setting->location, 'time' => $setting->start, 'end' => $setting->end)));				
			}
			elseif($setting->start == $setting->end) {
				$output .= l('<li class="tags">'. $setting->name.", ".$setting->start . '</li>',request_path(), array('html'=>'true', 'query' => array('location' => $setting->location, 'time' => $setting->start)));
			}
			elseif($setting->start && !$setting->end) {
				$output .= l('<li class="tags">'. $setting->name.", ".$setting->start . '</li>',request_path(),array('html'=>'true', 'query' => array('location' => $setting->location, 'time' => $setting->start)));
			}
			elseif($setting->end && !$setting->start) {
				$output .= l('<li class="tags">'. $setting->name.", ".$setting->end . '</li>',request_path(),array('html'=>'true', 'query' => array('location' => $setting->location, 'time' => $setting->end)));
			}
		
		}
	$output .=  '</ul>';
	}
	
	//events
// 	if(!empty($all_events)) {
// 		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
// 		$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline_for_tags/'.$max_value).'</div></div>';
		
// 		foreach($all_events as $label=>$events) {

// 			$output .= '<div style="clear:both">'.ucfirst($label).':</div>';
// 			$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline '.ucfirst($label),'timeline_for_tags/'.$max_value,array('query'=>array('event_type'=>$label))).'</div></div>';
// 			foreach($events as $event) {
// 				$output .= '<div style="float: left; width: 200px;">'.output_event_table($event)."</div>";
	
// 			}
// 		}
// 	}
	$output .= $timeline_links;
	if(!empty($event_list)) {
		$output .= '<div style="clear:both"><h2><i class="fa fa-cloud fa-lg">&nbsp;</i>Event Space : <span class="event-space-filter"><input id="event-space-filter" type="text"></span></h2></div>';
	}

	$output .= $event_table;
	
	return $output.'</div>';
}

/**
 * Produce timeline links for the event space of a setting
 */
function dec_setting_timeline_links($time, $end, $location, $event_array) {
	$attribute_list = temporal_type_list_for_event_array($event_array);
	if(!empty($attribute_list)) {
		
		$output = '<div class="event-space-headings"><h2><i class="fa fa-clock-o fa-lg">&nbsp;</i>' . t('Timelimes') . '</h2>';
		$output .= '<ul class="field-name-field-fb-tags" style="clear:both">';
		
		if($end) {
			$output .= story_search_link_check('<li class="tags">' . t('All') . '</li>', request_path(), array('html'=>'true', 'query'=>array('timeline_for_setting'=>$location, 'time'=>$time, 'end'=>$end)));
		}
		else {
			$output .= story_search_link_check('<li class="tags">' . t('All') . '</li>', request_path(), array('html'=>'true', 'query'=>array('timeline_for_setting'=>$location, 'time'=>$time)));
		}
		foreach($attribute_list as $attribute) {
			if($end) {
				$output .= story_search_link_check('<li class="tags">' . str_replace('_', ' ', ucfirst($attribute)) . '</li>', request_path(), array('html'=>'true', 'query'=>array('timeline_for_setting'=>$location, 'time'=>$time, 'event_type'=>$attribute, 'end'=>$end)));
			}
			else {
				$output .= story_search_link_check('<li class="tags">' . str_replace('_', ' ', ucfirst($attribute)) . '</li>', request_path(), array('html'=>'true', 'query'=>array('timeline_for_setting'=>$location, 'time'=>$time, 'event_type'=>$attribute)));
			}
		}
		$output .= '</ul>';	
	}
	
	else {
		$output = '';
	}
	return $output;
}

/**
 * Produce timeline links for event space of a single tag
 */
function dec_tag_timeline_links($topic, $event_array) {
	$attribute_list = temporal_type_list_for_event_array($event_array);
	if(!empty($attribute_list)) {
		$output_list = array();
		$output = '<div class="event-space-headings"><h2><i class="fa fa-clock-o fa-lg">&nbsp;</i>Timelimes</h2></div><ul class="field-name-field-fb-tags">';
		$output .= story_search_link_check('<li class="tags">' . t('All') . '</li>', request_path(), array('html'=>'true', 'query'=>array('timeline'=>$topic)));
		foreach($attribute_list as $attribute) {
			$output .= story_search_link_check('<li class="tags">' . str_replace('_', ' ', ucfirst($attribute)) . '</li>', request_path(), array('html'=>'true', 'query'=>array('timeline'=>$topic, 'attribute'=>$attribute)));
		}
		$output .= '</ul>';
	}
	else {
		$output = '';
	}
	return $output;	
}

/**
 * Produce timeline links for event space of a story (i.e. set of tags)
 */
function dec_tags_timeline_links($story_id) {
	$attribute_list = temporal_type_list_for_story_id($story_id);
	if(!empty($attribute_list)) {
		$output = '<div class="event-space-headings"><h2><i class="fa fa-clock-o fa-lg">&nbsp;</i>Timelimes</h2></div><ul class="field-name-field-fb-tags">';
		$output .=  l('<li class="tags">' . t('All') . '</li>', request_path(), array('query'=>array('timeline_for_tags'=>$story_id), 'html'=>'true'));
		foreach($attribute_list as $attribute) {
			$output .= l('<li class="tags">' . str_replace('_', ' ', ucfirst($attribute)) . '</li>', request_path(), array('query'=>array('timeline_for_tags'=>$story_id, 'event_type'=>$attribute), 'html'=>'true'));
		}
		$output .= '</ul>';
	}
	else {
		$output = '';
	}
	return $output;
}


/**
 * Events in the array that have the specified activity type and temporal information
 */
function temporal_event_list_for_event_array_and_activity($activity = 'military_conflict', $event_list = array('/m/0b34d','/m/04y9zg6','/m/053_g0','/m/047lvl3','/m/013v45','/m/0hnb6fd','/m/022840','/m/0hccjyn','/m/0hccjz1')) {
	$event_string = "('".implode("','", $event_list)."')";
	$query = "SELECT DISTINCT activity_table.event
	FROM event_attribute_value as activity_table, event_attribute_value as time_table, attribute_name
	WHERE activity_table.event IN ".$event_string." AND
	activity_table.attribute = 'activity' AND
	activity_table.value = '".$activity."' AND
	time_table.event = activity_table.event AND
	time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	$new_event_list = array();
	foreach($result as $event) {
		$new_event_list[] = $event->event;
	}
	return $new_event_list;
}

/**
 * Events in the array that have temporal information
 */
function temporal_event_list_for_event_array($event_list = array('/m/0b34d','/m/04y9zg6','/m/053_g0','/m/047lvl3','/m/013v45','/m/0hnb6fd','/m/022840','/m/0hccjyn','/m/0hccjz1')) {
	$event_string = "('".implode("','", $event_list)."')";
	$query = "SELECT DISTINCT activity_table.event
	FROM event_attribute_value as activity_table, event_attribute_value as time_table, attribute_name
	WHERE activity_table.event IN ".$event_string." AND
	activity_table.attribute = 'activity' AND
	time_table.event = activity_table.event AND
	time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	$new_event_list = array();
	foreach($result as $event) {
		$new_event_list[] = $event->event;
	}
	return $new_event_list;
}

/**
 * Event types of the events in the array that have temporal information
 */
function temporal_type_list_for_event_array($event_list = array('/m/0b34d','/m/04y9zg6','/m/053_g0','/m/047lvl3','/m/013v45','/m/0hnb6fd','/m/022840','/m/0hccjyn','/m/0hccjz1')) {
	$event_string = "('".implode("','", $event_list)."')";
	$query = "SELECT DISTINCT activity_table.value
	FROM event_attribute_value as activity_table, event_attribute_value as time_table, attribute_name
	WHERE activity_table.event IN ".$event_string." AND
	activity_table.attribute = 'activity' AND
	time_table.event = activity_table.event AND
	time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	$attribute_list = array();
	foreach($result as $event) {
		$attribute_list[] = $event->value;
	}
	return $attribute_list;		
}

/**
 * Event types of events of a story
 */
function temporal_type_list_for_story_id($story_id) {
	$query = "SELECT DISTINCT activity_table.value
	FROM query_tag, tag_event_id, event_attribute_value as activity_table, event_attribute_value as time_table, attribute_name
	WHERE query_tag.id = '".$story_id."' AND
	query_tag.tag = tag_event_id.tag AND
	activity_table.event = tag_event_id.event_id AND
	activity_table.attribute = 'activity' AND
	time_table.event = tag_event_id.event_id AND
	time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	$attribute_list = array();
	foreach($result as $event) {
		$attribute_list[] = $event->value;
	}
	return $attribute_list;	
}

/**
 * Event list of a story. Recalculated when the story is viewed.
 */
function event_list_for_story_id($story_id) {
	$query = "SELECT tag_event_id.event_id
	FROM query_tag, tag_event_id
	WHERE query_tag.id = '".$story_id."' AND
	query_tag.tag = tag_event_id.tag;";

	$result = db_query($query);
	$event_list = array();
	foreach($result as $event) {
		$event_list[] = $event->event_id;
	}
	return $event_list;
}

/**
 * Flatten list of events of a story
*/
function flat_list_of_events($all_events) {
	$event_list = array();
	foreach($all_events as $event_set) {
		$event_list = array_merge($event_set, $event_list);
	}
	return $event_list;
}

/**
 * Flatten list of events of a tag
 */
function flat_list_of_single_tag_events($all_events) {
	$event_list = array();
	foreach($all_events as $event_set) {
		$event_list = array_merge($event_set['events'], $event_list);
	}
	return $event_list;
}

/**
 * Execute freebase MQL query using drupal http request function
 */
function execute_mql_event_query($query) {
	$jsonquerystr = urlencode(json_encode($query));
	#run the query
	$googleapikey = get_google_api_key_path();
	$queryurl='https://www.googleapis.com/freebase/v1/mqlread?query='.$jsonquerystr.$googleapikey;
	$result = drupal_http_request($queryurl);
	if(isset($result->data)) {
		$jsonresultstr = $result->data;
		$resultarray = json_decode($jsonresultstr, true);	
	}
	else {
		$resultarray = array();
	}
	return $resultarray;
}

/**
 * Execute freebase MQL query
 */
function execute_mql_event_query_curl($query) {
	$jsonquerystr = urlencode(json_encode($query));
	#run the query
	$googleapikey = get_google_api_key_path();
	$queryurl='https://www.googleapis.com/freebase/v1/mqlread?query='.$jsonquerystr.$googleapikey;
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $queryurl);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$jsonresultstr = curl_exec($ch);
	curl_close($ch);
	$resultarray = json_decode($jsonresultstr, true); #true:give us the json struct as an array
	return $resultarray;
}

/**
 * Get notable types of a tag
 */
function get_notable_tag_type_names($topic) {
	$output = array();
	$query = "SELECT * FROM tag_notable_types WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	foreach ($result as $record) {
		if(isset($record->notable_type_name)) {
			$output[] = $record->notable_type_name;
		}
	}
	return $output;
}

/**
 * Check whether mid is tag of story
 */
function tag_of_story($topic, $storynid) {
	$query = "SELECT * 
FROM query_tag
WHERE id = :id AND
tag = :tag;";
	$result = db_query($query, array(':id' => $storynid, ':tag' => $topic));
	foreach ($result as $record) {
		return TRUE;
	}
	return FALSE;
}

/**
 * Produce output for a single tag
 */
function dec_tag($topic) {
	$current_path = drupal_get_path_alias(current_path());
	$output = '<div>';

	if(isset($_GET['reload'])) {
		$reload = $_GET['reload'];
	}
	else {
		$reload = FALSE;
	}
	
// 	if($m == "m") {
// 		$topic = "/".$m."/".$id;
// 	}
// 	elseif($m && !$id) {
// 		$topic = $m;
// 		$output .= '<h2>'.$m.'</h2>';
// // 		drupal_set_title($m);
// 		$types = array();
// 	}
// 	else {
// 		return "No topic found";
// 	}
	
	
	if(is_freebase_topic_id($topic)) {
		//calculate event space (if not cached)
		$types = new_event_space_of_a_topic($topic, $reload);

		//calculate triples
		$calculated_triples = check_for_tag_in_tag_attribute($topic);
		if(!$calculated_triples || $reload) {
			triples_of_a_tag($topic);
		}
		//tag type
		$notable_tag_types = get_notable_tag_type_names($topic);
		if(!empty($notable_tag_types)) {
			$topic_types = ' (' . implode(', ', $notable_tag_types) . ')';
		}
		else {
			$topic_types = '';
		}
		
	
		//tag name
		$name = get_topic_name($topic);
		if($name) {
			$path_array = explode('/',request_path());
			$next_path = implode('/',$path_array);
			if(isset($path_array[2]) && isset($path_array[3])) {
				if($path_array[2] == 'story' && !tag_of_story($topic,$path_array[3]) && !isset($_GET['storytag']) && user_is_logged_in()) {
					$output .= '<div class="button addtag-button">' . l( t('Add to Story') , $current_path . '/addtag' , array("html"=>TRUE, 'query'=>array('topic_name' => $name, 'mid' => $topic, 'destination' => (drupal_get_path_alias(current_path()) . '?tag=' . $topic)))) . '</div>';
				}
			}
			$path_array = explode('/',request_path());
			if(end($path_array) == 'stories' || end($path_array) == 'settingstories') {
				array_pop($path_array);
			}
			$path_array[] = 'stories';
			$next_path = implode('/',$path_array);
			$output .= '<div class="topic-block"><h2><i class="fa fa-info-circle fa-lg">&nbsp;</i><span class="topic-title">' . t('About : '). $name . $topic_types . '&nbsp;&nbsp;</span>' . l('<span class="topic-search"><i class="fa fa-search">&nbsp;</i>' . '</span>', $next_path, array("query"=>array('storytag'=>$topic), "html"=>TRUE)) . '</h2>';
		}


		
		$output .= '<div class="description-attribute-block">';
		if($image = check_freebase_saved_image($topic, FALSE, $reload)) {
			$output .= '<div class="topic-image"><img src="'.$image.'"></div>';
		}
		
		//tag description
		$description = get_topic_description($topic);
		if($description) {
			$output .= '<div class="topic-description">';
			$output .= '<p>' . $description . '</p>';
			$output .= '</div>';
		}
		
		//tag triples
		$tag_attributes = get_triple_ids_of_a_tag2($topic);
		
		if(!empty($tag_attributes)) {
			$output .= '<div class="event-space-tag-attibutes-wrapper">';
			
			foreach($tag_attributes as $attribute_values) {
				$output .=  '<div class="event-space-tag-attibutes"><ul class="field-name-field-fb-tags">';
				$output .= ' <li class="plain">'.$attribute_values->fact_attribute."</li>";
				
					foreach($attribute_values->value_list as $value) {
						$name = get_topic_name($value);
						if(!$name) {
							$name = $value;
						}
						if($attribute_values->link) {
							$output .= story_search_link_check('<li class="tags">'.$name."</li>", request_path(), array("html"=>TRUE, "query"=>array('tag'=>$value)));
						}
						else {
							$output .= $name;//'<li>'.$name."</li>";
						}
						
					}
				$output .=  '</ul><div style="clear:both;"></div></div>';
			}
			$output .= '</div>';
		}
	


		// end of topic-block

	}
	//not freebase topic
	else {
		$output .= '<h2>'.$topic.'</h2>';
		$types = array();
	}

	//tag themes
	$themes = top_n_themes_of_tag($topic, 10);
	if(!empty($themes)) {
		$output .= '<div style="clear:both"><h2><i class="fa fa-link fa-lg">&nbsp;</i>Themes</h2></div>';
		$output .=  '<ul class="field-name-field-fb-tags">';
		foreach($themes as $theme) {
			$output .= story_search_link_check('<li class="tags">'.$theme->name."</li>", request_path(), array("html"=>TRUE, "query"=>array('tag'=>$theme->value)));
					}
		$output .=  '</ul><div style="clear:both;"></div>';
		
	}
	
	//settings
	$settings = get_n_settings_for_a_tag($topic, 10);

	if(!empty($settings)) {
		$output .= '<div style="clear:both"><h2><i class="fa fa-compass fa-lg">&nbsp;</i>Settings</h2></div>';
		$output .=  '<ul class="field-name-field-fb-tags">';
		
		foreach($settings as $setting) {
			if(isset($setting->end_time) && isset($setting->start_time) && $setting->start_time !== $setting->end_time) {
				$output .= story_search_link_check('<li class="tags">' .$setting->name.", ".$setting->start_time." to ".$setting->end_time . '</li>',request_path(),array('html'=>'true', 'query' => array('location' => $setting->location, 'time' => $setting->start_time, 'end' => $setting->end_time)));
			}
			elseif(isset($setting->start_time)) {
				$output .= story_search_link_check('<li class="tags">' .$setting->name.", ".$setting->start_time . '</li>',request_path(),array('html'=>'true', 'query' => array('location' => $setting->location, 'time' => $setting->start_time)));
			}
			elseif(isset($setting->end_time)) {
				$output .= story_search_link_check('<li class="tags">' .$setting->name.", ".$setting->end_time  . '</li>',request_path(),array('html'=>'true', 'query' => array('location' => $setting->location, 'time' => $setting->end_time)));
			}
		}
		$output .=  '</ul><div style="clear:both;"></div>';
	}
	
// 	if(!empty($settings)) {
// 		$output .= '<div style="clear:both"><h2>Settings: </h2></div>';
// 		foreach($settings as $setting) {
// 			if(isset($setting['end_time']) && isset($setting['start_time']) &&  $setting['end_time'] != $setting['start_time']) {
// 				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
// 						l($setting['name']." ".$setting['start_time']."-".$setting['end_time'],'setting',array('query' => array('location' => $setting['location'], 'time' => $setting['start_time'], 'end' => $setting['end_time']))).
// 						"</div>";
// 			}
// 			elseif(isset($setting['start_time'])) {
// 				$output .= '<div style="float: left; white-space: nowrap; background-color: #ebebeb; margin: 5px;">'.
// 						l($setting['name']." ".$setting['start_time'],'setting',array('query' => array('location' => $setting['location'], 'time' => $setting['start_time']))).
// 						"</div>";
// 			}	
// 		}
// 	}
	
	//event links
// 	$linked_events = get_link_events_for_tag($topic);

// 	$related_events = get_related_events_for_tag($topic);
	
	$all_events = get_all_events_for_tag($topic);

// 	if(!empty($all_events)) {
// 		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
// 		if(is_freebase_topic_id($topic)) {
// 			$topic_path = $topic;
// 		}
// 		else {
// 			$topic_path = '/'.$topic;
// 		}
// 		$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline','timeline'.$topic_path).'</div></div>';
// 				foreach($all_events as $all_event) {
// 					$output .= '<div style="clear:both">'.ucfirst($all_event['label']).':</div>';
// 					$output .= '<div style="clear:both"><div style="align:right; text-align:right">'.l('Timeline: '.ucfirst($all_event['label']),'timeline'.$topic_path,array('query'=>array('attribute'=>$all_event['name']))).'</div></div>';
// 						foreach($all_event['events'] as $event) {
// 							$output .= '<div style="float: left; width: 200px;">'.output_event_table_dec_tag($event, $types)."</div>";
				
// 			}
// 		}
// 	}
	
	$event_list = flat_list_of_single_tag_events($all_events);
	
	//retrieve title, description and images for events*******here
	async_check_for_name_description_image($event_list);
	if(!empty($event_list)) {
		$output .= dec_tag_timeline_links($topic, $event_list);
		$output .= '<div style="clear:both"><h2><i class="fa fa-cloud fa-lg">&nbsp;</i>Event Space : <span class="event-space-filter"><input id="event-space-filter" type="text"></span></h2></div>';

		$output .= event_table_for_event_list($event_list);
	}
// 	$event_table = event_table_for_tag($topic);
// 	if(!empty($linked_events) || !empty($related_events)) {
// 		$output .= '<div style="clear:both"><h2>Event space: </h2></div>';
// 	}

// 	if(!empty($linked_events)) {
// 		foreach($linked_events as $link=>$events) {
// 			$output .= '<div style="clear:both">'.ucfirst($link).':</div>';
// 			if(!empty($events)) {
// 				foreach($events as $event) {
// 					$output .= '<div style="float: left; width: 200px;">'.output_event_table_dec_tag($event, $types)."</div>";
// 				}
			
// 			}
// 		}
// 	}

// 	//other events
// 	if(!empty($related_events)) {
// 		$output .= '<div style="clear:both">Other events:</div>';
// 		foreach($related_events as $related_event) {
// 			$output .= '<div style="float: left;  width: 200px;">'.output_event_table_dec_tag($related_event, $types)."</div>";
// 		}
// 	}	

	//l($setting->name." ".$setting->time,'setting',array('query' => array('location' => $setting->location, 'time' => $setting->time))).
	
	$output .= '<div style="clear:both; margin-bottom:1em">If the information displayed seems incomplete (e.g. no title displayed for the story tag or broken image link) then use the recalcuate button.</div>';
	$output .= '<div class="button">'.story_search_link_check('Recalculate',request_path(), array('query' => array('tag'=>$topic, 'reload' => '1'))).'</div>';
	return $output.'</div>';
}

/**
 * Output event table for timeline
*/
function produce_event_table_for_timeline($event, $path) {

	$output = '';
	$rows = array();
	foreach($event as $key=>$elements) {
		if(!in_array($key,array('title','activity','start_time','end_time'))) {
			$value_array = array();
			if(is_array($elements)) {
				$output .= '<div style="clear:both"><b>'.ucfirst($key).":</b> ";
				foreach($elements as $element) {
					if(is_array($element)) {
						$value_array[] = story_search_link_check($element[1], $path, array('query' => array('tag'=>$element[0])));
					}
					//comment this out to remove date links TODO
					// 			elseif($key == 'start_time' || $key == 'end_time') {
					// 				$value_string .= l($element, "tag/date/".$element)."</br> ";
					// 			}
				}
				$output .= implode(', ',$value_array)."</div>";
			}
		}
	}
	
	return $output;
}

/**
 * Output event table for event array
 */
function produce_event_table($event) {
	$rows = array();
	foreach($event as $key=>$elements) {
		$value_string = "";
		if(is_array($elements))	{
			foreach($elements as $element) {
				if(is_array($element)) {
					$value_string .= storytaglink($element[1], $element[0])."</br> ";
				}
				//comment this out to remove date links TODO
				// 			elseif($key == 'start_time' || $key == 'end_time') {
				// 				$value_string .= l($element, "tag/".$element)."</br> ";
					// 			}
				else {
					$value_string .= $element."</br> ";
				}
			}
			$rows[] = array($key,$value_string);
		}
	}
	return theme('table', array('rows' => $rows, 'attributes' => array('width' => '50%')));
}

/**
 * Output event table for topic
 */
function output_event_table_dec_tag($event_id, $topic_types) {
	$event = load_art_event_dec_tag($event_id, $topic_types);
	return produce_event_table($event);
}

/**
 * Output event as table for event_id
 */
function output_event_table($event_id) {
	$event = load_art_event_without_title_addition($event_id);

	$rows = array();
	foreach($event as $key=>$elements) {
		$value_string = "";
		foreach($elements as $element) {
			if(is_array($element)) {
				$value_string .= storytaglink($element[1], $element[0])."</br> ";
			}
			//comment this out to remove date links TODO
// 			elseif($key == 'start_time' || $key == 'end_time') {
// 				$value_string .= l($element, "tag/date/".$element)."</br> ";
// 			}
			else {
				$value_string .= $element."</br> ";
			}
		}
		$rows[] = array($key,$value_string);
	}
	return '<div class="event-space-table">' . theme('table', array('rows' => $rows, 'attributes' => array('width' => '50%'))) . '</div>';
}

/**
 * Get event type
 */
function get_type_of_stored_event($event_id) {
	$query = "SELECT event_attribute_value.value
FROM event_attribute_value
WHERE event_attribute_value.event = '".$event_id."' AND 
event_attribute_value.attribute = 'activity';";
	$result = db_query($query);
	
	$object = $result->fetchObject();
	if(isset($object->value)) {
		return $object->value;
	}
	else {
		return FALSE;
	}
}

/**
 * Get label for event attribute
 */
function get_event_label_with_event_attribute_name($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name, attribute_name
	WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute AND
	attribute_name.name = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";

	$result = db_query($query);

	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		return $object->name;
	}
	else {
		return '';
	}
}

/**
 * get attribute value for event
 */
function get_event_value_with_event_attribute_name($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name, attribute_name 
	WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute AND
	attribute_name.name = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";

	$result = db_query($query);

	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		//pre-cache topic for timelines
// 		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $object->value);
		return array($object->value, $object->name);
	}
	else {
		return FALSE;
	}
}

/**
 * Get label for event
 */
function get_event_label($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name
	WHERE event_attribute_value.event = '".$event_id."' AND
	event_attribute_value.attribute = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";

	$result = db_query($query);

	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		return $object->name;
	}
	else {
		return '';
	}
}

/**
 * Get values for an event
 */
function get_event_value($event_id, $attribute) {
	$query = "SELECT event_attribute_value.value, tag_name.name
	FROM event_attribute_value, tag_name
	WHERE event_attribute_value.event = '".$event_id."' AND
	event_attribute_value.attribute = '".$attribute."' AND
	event_attribute_value.value = tag_name.tag;";
	
	$result = db_query($query);
	
	$object = $result->fetchObject();
	if(isset($object->value) && isset($object->name)) {
		//pre-cache topic for timelines
// 		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $object->value);
		return array($object->value, $object->name);
	}
	else {
		return FALSE;
	}	
}

/**
 * Retrieve event data for display with added titles to discriminate events of a single tag
*/
function load_art_event_dec_tag($event_id, $topic_types = array(), $for_timeline = FALSE) {
	$query = "SELECT events.name as attribute, events.value, tag_name.name FROM 
(SELECT attribute_name.name, event_attribute_value.value FROM event_attribute_value, attribute_name
WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute) as events 
LEFT JOIN tag_name ON tag_name.tag = events.value;";
	$result = db_query($query);
	$output = array();
	$output['title'] = '';
	//add event title if stored
// 	$output = add_event_title($event_id, $topic_types, $output);
// 	if($event_name = get_topic_name($event_id)) {
// 		$output['title'][] = array($event_id,$event_name);
// 		// 		$output['Title'][] = $event_name;
// 	}
	$records = array();

	foreach ($result as $record) {

// 		if(in_array($record->attribute, array('activity','location','agent','start_time','end_time'))) {
			$attribute = $record->attribute;
// 		}
// 		else {
// 			$attribute = 'tags';
// 		}

		if(isset($output[$attribute])) {

			if($record->name) {
				$output[$attribute][] = array($record->value, $record->name);
			}
			else {
				$output[$attribute][] = $record->value;
			}
		}
		else {
			if($record->name) {
				$output[$attribute] = array(array($record->value, $record->name));
			}
			else {
				$output[$attribute] = array($record->value);
			}
		}
	}

	if($for_timeline) {
		if(isset($output['end_time']) && !isset($output['start_time'])) {
			$output['start_time'] = $output['end_time'];
			unset($output['end_time']);
		}
	}
	
	//add title to the event array
	$event_type = get_type_of_stored_event($event_id);

	if($event_name = get_topic_name($event_id)) {
		$output['title'][] = array($event_id,$event_name);
		//cache topic info
// 		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $event_id);
		
	}
	elseif($event_type == 'exhibition_creation') {
		$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition').' at '
				.get_event_label($event_id, '/exhibitions/exhibition_run/venue');
	}
	elseif($event_type == 'award_won') {
		if(in_array('/award/award', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/award/award_honor/award');
		}
	}
	elseif($event_type == 'award_nomination') {
		if(in_array('/award/award', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/award/award_nomination/award');
		}
	}
	elseif($event_type == 'education') {
		if(in_array('/education/educational_institution', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'location');
		}
	}
	elseif($event_type == 'place_lived') {
			if(in_array('/location/location', $topic_types)) {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'agent');
		}
		else {
			$output['title'][] = get_event_value_with_event_attribute_name($event_id, 'location');
		}
	}	
	elseif($event_type == 'exhibition_run') {
			if(in_array('/exhibitions/exhibition', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/exhibitions/exhibition_run/venue');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/exhibitions/exhibition_run/exhibition');
		}
	}
	elseif($event_type == 'object_location') {
			if(in_array('/visual_art/artwork', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_location_relationship/location');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_location_relationship/artwork');
		}
	}
	elseif($event_type == 'object_ownership') {
			if(in_array('/visual_art/art_owner', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_owner_relationship/artwork');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/visual_art/artwork_owner_relationship/owner');
		}
	}
	elseif($event_type == 'organization_membership') {
			if(in_array(' /organization/membership_organization', $topic_types)) {
			$output['title'][] = get_event_value($event_id, '/organization/organization_membership/member');
		}
		else {
			$output['title'][] = get_event_value($event_id, '/organization/organization_membership/organization');
		}
	}

	if(isset($output['activity'])) {
		$output['activity'] = str_replace("_", " ", $output['activity']);
	}
	
	return $output;
}

/**
 * Retrieve event data for display
 */
function load_art_event_without_title_addition($event_id, $for_timeline = FALSE) {
	$query = "SELECT events.name as attribute, events.value, tag_name.name FROM
(SELECT attribute_name.name, event_attribute_value.value FROM event_attribute_value, attribute_name
WHERE event_attribute_value.event = '".$event_id."' AND
event_attribute_value.attribute = attribute_name.attribute) as events
LEFT JOIN tag_name ON tag_name.tag = events.value;";
	$result = db_query($query);
	$output = array();
	//add event title if stored
	// 	$output = add_event_title($event_id, $topic_types, $output);
	// 	if($event_name = get_topic_name($event_id)) {
	// 		$output['title'][] = array($event_id,$event_name);
	// 		// 		$output['Title'][] = $event_name;
	// 	}
	$records = array();

		//add title to the event array
		$event_type = get_type_of_stored_event($event_id);

		if($event_name = get_topic_name($event_id)) {
			$output['title'][] = array($event_id,$event_name);
		//cache topic info
// 		$handle = background_process_start_locked('dontrunconcurrently','check_topic_name_image_description', $event_id);
		
		}
	elseif($event_type == 'exhibition_creation') {
		$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition').' at '
				.get_event_label($event_id, '/exhibitions/exhibition_run/venue');
	}
	elseif($event_type == 'award_won') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' won '
		.get_event_label($event_id, '/award/award_honor/award');
	}
	elseif($event_type == 'award_nomination') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' nominated for '
	.get_event_label($event_id, '/award/award_nomination/award');
	}
	elseif($event_type == 'education') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' educated at '
					.get_event_label_with_event_attribute_name($event_id, 'location');
	}
	elseif($event_type == 'place_lived') {
			$output['title'][] = get_event_label_with_event_attribute_name($event_id, 'agent').' lived in '
			.get_event_label_with_event_attribute_name($event_id, 'location');
	}	
	elseif($event_type == 'exhibition_run') {
			$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition_run/venue').' exhibited '
	.$output['title'][] = get_event_label($event_id, '/exhibitions/exhibition_run/exhibition');
	}
	elseif($event_type == 'object_location') {
			$output['title'][] = get_event_label($event_id, '/visual_art/artwork_location_relationship/artwork').' in '
					.get_event_label($event_id, '/visual_art/artwork_location_relationship/location');
	}
	elseif($event_type == 'object_ownership') {
			$output['title'][] = get_event_label($event_id, '/visual_art/artwork_owner_relationship/artwork').' owned by '
		.get_event_label($event_id, '/visual_art/artwork_owner_relationship/owner');
	}
	elseif($event_type == 'organization_membership') {
		$output['title'][] = get_event_label($event_id, '/organization/organization_membership/member').' member of '
				.get_event_label($event_id, '/organization/organization_membership/organization');
	}
			
		foreach ($result as $record) {
		// 		if(in_array($record->attribute, array('activity','location','agent','start_time','end_time'))) {
		$attribute = $record->attribute;
		// 		}
		// 		else {
		// 			$attribute = 'tags';
		// 		}

			if(isset($output[$attribute])) {

				if($record->name) {
					$output[$attribute][] = array($record->value, $record->name);
				}
				else {
					$output[$attribute][] = $record->value;
				}
			}
			else {
				if($record->name) {
					$output[$attribute] = array(array($record->value, $record->name));
				}
				else {
					$output[$attribute] = array($record->value);
				}
			}
		}
		if(isset($output['activity'])) {
			$output['activity'] = str_replace("_", " ", $output['activity']);
		}
		if($for_timeline) {
			if(isset($output['end_time']) && !isset($output['start_time'])) {
				$output['start_time'] = $output['end_time'];
				unset($output['end_time']);
			}
		}
		return $output;
}

/**
 * Get events associated with a tag
 * Handles timestamps differently to retrieve events that span the timestamp
 */
function get_all_events_for_tag($topic) {
	if(is_time_stamp($topic)) {
		$query = "SELECT CONCAT('time of ', event_attribute_value.value) as reverse_name, event_attribute_value.value as attribute, GROUP_CONCAT(events_start_end_time_table.event) as events
FROM event_attribute_value, 
(SELECT events_start_time_table.event, events_start_time_table.start_time, end_time_table.end_time
FROM 
(SELECT events_table.event, start_time_table.start_time
FROM
(SELECT DISTINCT events.event
FROM event_attribute_value as events, attribute_name
WHERE events.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')) as events_table
LEFT JOIN
(SELECT event_start_time.event, event_start_time.value as start_time
FROM event_attribute_value as event_start_time, attribute_name
WHERE event_start_time.attribute = attribute_name.attribute AND
attribute_name.name = 'start_time') as start_time_table ON start_time_table.event = events_table.event) as events_start_time_table
LEFT JOIN 
(SELECT event_end_time.event, event_end_time.value as end_time
FROM event_attribute_value as event_end_time, attribute_name
WHERE event_end_time.attribute = attribute_name.attribute AND
attribute_name.name = 'end_time') as end_time_table ON end_time_table.event = events_start_time_table.event) as events_start_end_time_table
WHERE
((events_start_end_time_table.start_time = '".$topic."' and events_start_end_time_table.end_time IS NULL) OR
(events_start_end_time_table.end_time = '".$topic."' and events_start_end_time_table.start_time IS NULL) OR
(events_start_end_time_table.start_time <= '".$topic."' and events_start_end_time_table.end_time >= '".$topic."')) AND
events_start_end_time_table.event = event_attribute_value.event AND 
event_attribute_value.attribute = 'activity'
GROUP BY event_attribute_value.value;";

	}
	else {
		$query = "SELECT attribute_name.attribute, attribute_name.reverse_name, GROUP_CONCAT(event_attribute_value.event) as events FROM event_attribute_value, attribute_name
WHERE event_attribute_value.value = '".$topic."' AND 
event_attribute_value.attribute = attribute_name.attribute 
GROUP BY attribute_name.reverse_name;";

	}
	$result = db_query($query);

	$output = array();
	$event_list = array();
	foreach ($result as $record) {
		$events = explode(',',$record->events);
		$output[$record->attribute] =  array('name'=>$record->attribute, 'label'=>$record->reverse_name, 'events'=>$events);
		$event_list = array_merge($event_list, $events);
	}

	//if tag is itself an event
	if(!in_array($topic, $event_list)) {
		$query = "SELECT event_attribute_value.event FROM event_attribute_value WHERE event_attribute_value.event = '".$topic."';";
		$result = db_query($query);
		$object = $result->fetchObject();
		if(isset($object->event)) {
			$output['event'] = array('name'=>'event', 'label'=>'event', 'events'=>array($topic));
		}
	}

	return $output;
}

/**
 * Get events for a setting and event type
 */
function get_all_events_for_setting_event_type($location, $year, $event_type, $end) {
		$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(
SELECT events_table.event, events_table.location, event_start_table.start_time, events_table.activity
FROM
(SELECT DISTINCT event_location.event, event_location.value as location, event_activity.value as activity
FROM location_container, event_attribute_value as event_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = location_container.container AND location_container.location = '".$location."' AND
     event_location.event = event_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_activity.value = '".$event_type."' AND
     ((event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') OR (event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time'))) events_table
LEFT JOIN
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM location_container, event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = location_container.container AND location_container.location = '".$location."' AND
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time')
as event_start_table ON event_start_table.event = events_table.event) as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM location_container, event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
	location2_attribute_name.name = 'location' AND
	event_location2.value = location_container.container AND location_container.location = '".$location."' AND
	event_location2.event = event_end_time.event AND
	event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time <= '".$end."' AND start_end_location_result.start_time >= '".$year."' AND start_end_location_result.end_time IS NULL) OR
		(start_end_location_result.end_time <= '".$end."' AND start_end_location_result.end_time >= '".$year."' AND start_end_location_result.start_time IS NULL) OR
(start_end_location_result.start_time <= '".$end."' AND start_end_location_result.end_time >= '".$year."')
) as combined_result
GROUP BY combined_result.activity;";

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[$record->activity] =  array_unique(explode(',',$record->events));
	}
	return $output;
}

/**
 * Get events of a story that have time data and can therefore be placed on a timeline
 */
function get_all_temporal_events_for_story2($story, $event_type = FALSE) {
	$tag_array = tags_of_a_story($story);
	
	$dates = array();
	$nondates = array();
	foreach($tag_array as $tag) {
		if(is_time_stamp($tag)) {
			$dates[] = $tag;
		}
		else {
			$nondates[] = "'".$tag."'";
		}
	}

	$output = array();
	//all_events_for_non_dates
	
	if(!empty($nondates)) {
		$nondate_list = "(".implode(",",$nondates).")";
		if($event_type) {
			$query = "SELECT GROUP_CONCAT(event_table.event) as events, event_table.value FROM event_attribute_value as value_table, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name WHERE
	value_table.value IN ".$nondate_list." AND
	value_table.event = event_table.event AND
	event_table.attribute = 'activity' AND
			event_table.value = '".$event_type."' AND
	time_table.event = event_table.event AND
	time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')
	GROUP BY event_table.value;";
		}
		else {
			$query = "SELECT GROUP_CONCAT(event_table.event) as events, event_table.value FROM event_attribute_value as value_table, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name WHERE
	value_table.value IN ".$nondate_list." AND
	value_table.event = event_table.event AND
	event_table.attribute = 'activity' AND
	time_table.event = event_table.event AND
	time_table.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')
	GROUP BY event_table.value;";
		}
		
		$result = db_query($query);
	
		foreach ($result as $record) {
			$output[$record->value] =  array_unique(explode(',',$record->events));
		}
	}

	if(!empty($dates)) {
		foreach($dates as $date) {//AND event_attribute_value.value = 'exhibition_run'
			if($event_type) {
				$query = "SELECT GROUP_CONCAT(events_start_end_time_table.event) as events, event_attribute_value.value
	FROM event_attribute_value,
	(SELECT events_start_time_table.event, events_start_time_table.start_time, end_time_table.end_time
	FROM
	(SELECT events_table.event, start_time_table.start_time
	FROM
	(SELECT DISTINCT events.event
	FROM event_attribute_value as events, attribute_name
	WHERE events.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')) as events_table
	LEFT JOIN
	(SELECT event_start_time.event, event_start_time.value as start_time
	FROM event_attribute_value as event_start_time, attribute_name
	WHERE event_start_time.attribute = attribute_name.attribute AND
	attribute_name.name = 'start_time') as start_time_table ON start_time_table.event = events_table.event) as events_start_time_table
	LEFT JOIN
	(SELECT event_end_time.event, event_end_time.value as end_time
	FROM event_attribute_value as event_end_time, attribute_name
	WHERE event_end_time.attribute = attribute_name.attribute AND
	attribute_name.name = 'end_time') as end_time_table ON end_time_table.event = events_start_time_table.event) as events_start_end_time_table
	WHERE
	((events_start_end_time_table.start_time = '".$date."' and events_start_end_time_table.end_time IS NULL) OR
	(events_start_end_time_table.end_time = '".$date."' and events_start_end_time_table.start_time IS NULL) OR
	(events_start_end_time_table.start_time <= '".$date."' and events_start_end_time_table.end_time >= '".$date."')) AND
	events_start_end_time_table.event = event_attribute_value.event AND
	event_attribute_value.attribute = 'activity'
		AND event_attribute_value.value = '".$event_type."'
	GROUP BY event_attribute_value.value;";
			}
			else {
				$query = "SELECT GROUP_CONCAT(events_start_end_time_table.event) as events, event_attribute_value.value
	FROM event_attribute_value,
	(SELECT events_start_time_table.event, events_start_time_table.start_time, end_time_table.end_time
	FROM
	(SELECT events_table.event, start_time_table.start_time
	FROM
	(SELECT DISTINCT events.event
	FROM event_attribute_value as events, attribute_name
	WHERE events.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')) as events_table
	LEFT JOIN
	(SELECT event_start_time.event, event_start_time.value as start_time
	FROM event_attribute_value as event_start_time, attribute_name
	WHERE event_start_time.attribute = attribute_name.attribute AND
	attribute_name.name = 'start_time') as start_time_table ON start_time_table.event = events_table.event) as events_start_time_table
	LEFT JOIN
	(SELECT event_end_time.event, event_end_time.value as end_time
	FROM event_attribute_value as event_end_time, attribute_name
	WHERE event_end_time.attribute = attribute_name.attribute AND
	attribute_name.name = 'end_time') as end_time_table ON end_time_table.event = events_start_time_table.event) as events_start_end_time_table
	WHERE
	((events_start_end_time_table.start_time = '".$date."' and events_start_end_time_table.end_time IS NULL) OR
	(events_start_end_time_table.end_time = '".$date."' and events_start_end_time_table.start_time IS NULL) OR
	(events_start_end_time_table.start_time <= '".$date."' and events_start_end_time_table.end_time >= '".$date."')) AND
	events_start_end_time_table.event = event_attribute_value.event AND
	event_attribute_value.attribute = 'activity'
	GROUP BY event_attribute_value.value;";
			}
				
			$result = db_query($query);
				
			foreach ($result as $record) {
				if(isset($output[$record->value])) {
					//add events on
					$new_events = explode(',',$record->events);
					$output[$record->value] = array_unique(array_merge($new_events, $output[$record->value]));
				}
				else {
					$output[$record->value] =  array_unique(explode(',',$record->events));
				}
			}
		}
	}
	
	//if tag is itself an event
	//attribute_table.value = 'exhibition_run' AND
	if($event_type) {
		$query = "SELECT DISTINCT event_table.event, attribute_table.value
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name, event_attribute_value as attribute_table
WHERE query_tag.id = '".$story."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
		attribute_table.value = '".$event_type."' AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	}
	else {
		$query = "SELECT DISTINCT event_table.event, attribute_table.value
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name, event_attribute_value as attribute_table
WHERE query_tag.id = '".$story."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	}
	
	$result = db_query($query);
	foreach ($result as $record) {
		if(isset($output[$record->value])) {
			$output[$record->value] = array_unique(array_merge($output[$record->value], array($record->event)));
		}
		else {
			$output[$record->value] = array($record->event);
		}
	}

	return $output;
	
	
}

/**
 * Get the tags of a story
 */
function tags_of_a_story($story) {
	$query = "SELECT query_tag.tag FROM query_tag
WHERE query_tag.id = '".$story."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->tag;
	}
	
	return $output;
}

/**
 * Get names of the tags/topics of a story
 */
function get_tags_names_for_a_story($story) {
	$query = "SELECT query_tag.tag, tag_name.name FROM query_tag 
LEFT JOIN tag_name ON query_tag.tag = tag_name.tag
WHERE query_tag.id = '".$story."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = array($record->tag, $record->name);
	}

	return $output;
}

/**
 * Get events for a setting
 * All settings should now have an end date and use the first query
 */
function get_all_events_for_setting($location, $year, $end) {

	$query = "SELECT GROUP_CONCAT(combined_result.event) as events, combined_result.activity
FROM
(SELECT start_end_location_result.event, start_end_location_result.activity
FROM
(SELECT start_location_result.event, start_location_result.location, start_location_result.activity, start_location_result.start_time, end_location_result.end_time
FROM
(
SELECT events_table.event, events_table.location, event_start_table.start_time, events_table.activity
FROM 
(SELECT DISTINCT event_location.event, event_location.value as location, event_activity.value as activity
FROM location_container, event_attribute_value as event_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = location_container.container AND location_container.location = '".$location."' AND
     event_location.event = event_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND 
     ((event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') OR (event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time'))) events_table
LEFT JOIN 
(SELECT event_location.event, event_location.value as location, event_start_time.value as start_time, event_activity.value as activity
FROM location_container, event_attribute_value as event_start_time, event_attribute_value AS event_location, event_attribute_value AS event_activity, attribute_name as start_time_attribute_name, attribute_name as location_attribute_name
WHERE event_location.attribute = location_attribute_name.attribute AND
     location_attribute_name.name = 'location' AND
     event_location.value = location_container.container AND location_container.location = '".$location."' AND 
     event_location.event = event_start_time.event AND
     event_activity.event = event_location.event AND
     event_activity.attribute = 'activity' AND
     event_start_time.attribute = start_time_attribute_name.attribute AND start_time_attribute_name.name = 'start_time')
as event_start_table ON event_start_table.event = events_table.event) as start_location_result
LEFT JOIN
(SELECT event_location2.event, event_location2.value as location, event_end_time.value as end_time
FROM location_container, event_attribute_value as event_end_time, event_attribute_value AS event_location2, attribute_name as end_time_attribute_name, attribute_name as location2_attribute_name
WHERE event_location2.attribute = location2_attribute_name.attribute AND
	location2_attribute_name.name = 'location' AND
	event_location2.value = location_container.container AND location_container.location = '".$location."' AND 
	event_location2.event = event_end_time.event AND
	event_end_time.attribute = end_time_attribute_name.attribute AND end_time_attribute_name.name = 'end_time') as end_location_result
ON start_location_result.event = end_location_result.event) as start_end_location_result
WHERE (start_end_location_result.start_time <= '".$end."' AND start_end_location_result.start_time >= '".$year."' AND start_end_location_result.end_time IS NULL) OR
		(start_end_location_result.end_time <= '".$end."' AND start_end_location_result.end_time >= '".$year."' AND start_end_location_result.start_time IS NULL) OR
(start_end_location_result.start_time <= '".$end."' AND start_end_location_result.end_time >= '".$year."')
) as combined_result
GROUP BY combined_result.activity;";

/*removed setting link
 * UNION
SELECT setting_link_event_id.event_id AS event, event_attribute_value.value as activity FROM setting_link_event_id, event_attribute_value
     WHERE setting_link_event_id.location = '".$location."' AND
     setting_link_event_id.year = '".$year."-".$end."' AND
     event_attribute_value.event = setting_link_event_id.event_id AND
     event_attribute_value.attribute = 'activity'
 */

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[$record->activity] =  array_unique(explode(',',$record->events));
	}

	return $output;
}

/**
 * Get events of a story and its tag list
 */
function get_all_events_for_story2($story, $tag_array) {
	$dates = array();
	$nondates = array();
	foreach($tag_array as $tag) {
		if(is_time_stamp($tag)) {
			$dates[] = $tag;
		}
		else {
			$nondates[] = "'".$tag."'";
		}
	}
	
	
	$output = array();
	//all_events_for_non_dates
	
	if(!empty($nondates)) {
		$nondate_list = "(".implode(",",$nondates).")";
		$query = "SELECT GROUP_CONCAT(event_table.event) as events, event_table.value FROM event_attribute_value as value_table, event_attribute_value as event_table, tag_name WHERE
	value_table.value IN ".$nondate_list." AND
	value_table.event = event_table.event AND
	event_table.attribute = 'activity' AND
	value_table.value = tag_name.tag
	GROUP BY event_table.value;";

		$result = db_query($query);
	
		foreach ($result as $record) {
			$output[$record->value] =  array_unique(explode(',',$record->events));
		}
	}
	if(!empty($dates)) {
		foreach($dates as $date) {
			$query = "SELECT GROUP_CONCAT(events_start_end_time_table.event) as events, event_attribute_value.value
	FROM event_attribute_value, 
	(SELECT events_start_time_table.event, events_start_time_table.start_time, end_time_table.end_time
	FROM 
	(SELECT events_table.event, start_time_table.start_time
	FROM
	(SELECT DISTINCT events.event
	FROM event_attribute_value as events, attribute_name
	WHERE events.attribute = attribute_name.attribute AND
	(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time')) as events_table
	LEFT JOIN
	(SELECT event_start_time.event, event_start_time.value as start_time
	FROM event_attribute_value as event_start_time, attribute_name
	WHERE event_start_time.attribute = attribute_name.attribute AND
	attribute_name.name = 'start_time') as start_time_table ON start_time_table.event = events_table.event) as events_start_time_table
	LEFT JOIN 
	(SELECT event_end_time.event, event_end_time.value as end_time
	FROM event_attribute_value as event_end_time, attribute_name
	WHERE event_end_time.attribute = attribute_name.attribute AND
	attribute_name.name = 'end_time') as end_time_table ON end_time_table.event = events_start_time_table.event) as events_start_end_time_table
	WHERE
	((events_start_end_time_table.start_time = '".$date."' and events_start_end_time_table.end_time IS NULL) OR
	(events_start_end_time_table.end_time = '".$date."' and events_start_end_time_table.start_time IS NULL) OR
	(events_start_end_time_table.start_time <= '".$date."' and events_start_end_time_table.end_time >= '".$date."')) AND
	events_start_end_time_table.event = event_attribute_value.event AND 
	event_attribute_value.attribute = 'activity'
	GROUP BY event_attribute_value.value;";
			
			$result = db_query($query);
			
			foreach ($result as $record) {
				if(isset($output[$record->value])) {
					//add events on
					$new_events = explode(',',$record->events);
					$output[$record->value] = array_unique(array_merge($new_events, $output[$record->value]));
				}
				else {
					$output[$record->value] =  array_unique(explode(',',$record->events));
				}
			}
		}
	}
	
	//if tag is itself an event
	$query = "SELECT DISTINCT event_table.event, attribute_table.value
FROM query_tag, event_attribute_value as event_table, event_attribute_value as time_table, attribute_name, event_attribute_value as attribute_table
WHERE query_tag.id = '".$story."' AND
event_table.event = query_tag.tag AND
event_table.event = time_table.event AND
event_table.event = attribute_table.event AND
attribute_table.attribute = 'activity' AND
time_table.attribute = attribute_name.attribute AND
(attribute_name.name = 'start_time' OR attribute_name.name = 'end_time');";
	$result = db_query($query);
	foreach ($result as $record) {
		if(isset($output[$record->value])) {
			$output[$record->value] = array_unique(array_merge($output[$record->value], array($record->event)));
		}
		else {
			$output[$record->value] = array($record->event);
		}
	}

	return $output;	
}

/**
 * Get settings for a story
 */
function get_n_matching_settings_for_a_story2($story, $n = 5) {
	$query = "SELECT *
FROM
(SELECT COUNT(DISTINCT event_location_start.tag) as tags, COUNT(DISTINCT event_location_start.event) as frequency, event_location_start.location, event_location_start.start, event_end.end 
FROM 
(
SELECT events_table.tag, events_table.event, events_table.location, event_start_table.start
FROM
(SELECT DISTINCT query_tag.tag, event_attribute_value.event, location_table.value as location 
FROM tag_event_id, query_tag, event_attribute_value, event_attribute_value as location_table, event_attribute_value as start_table, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE query_tag.id = '".$story."' AND 
query_tag.tag = tag_event_id.tag AND
tag_event_id.event_id = event_attribute_value.event AND 
event_attribute_value.event = location_table.event AND
event_attribute_value.event = start_table.event AND
location_table.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
((start_table.attribute = time_attribute_name.attribute AND 
time_attribute_name.name = 'start_time') OR 
(start_table.attribute = time_attribute_name.attribute AND 
time_attribute_name.name = 'end_time'))) as events_table
LEFT JOIN 
(SELECT DISTINCT query_tag.tag, event_attribute_value.event, location_table.value as location, start_table.value as start
FROM tag_event_id, query_tag, event_attribute_value, event_attribute_value as location_table, event_attribute_value as start_table, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE query_tag.id = '".$story."' AND 
query_tag.tag = tag_event_id.tag AND
tag_event_id.event_id = event_attribute_value.event AND 
event_attribute_value.event = location_table.event AND
event_attribute_value.event = start_table.event AND
location_table.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
start_table.attribute = time_attribute_name.attribute AND 
time_attribute_name.name = 'start_time') as event_start_table ON event_start_table.event = events_table.event	
) as event_location_start
LEFT JOIN
(SELECT event_attribute_value.event, end_table.value as end
FROM tag_event_id, query_tag, event_attribute_value, event_attribute_value as end_table, attribute_name as time_attribute_name
WHERE query_tag.id = '".$story."' AND
query_tag.tag = tag_event_id.tag AND
tag_event_id.event_id = event_attribute_value.event AND 
event_attribute_value.event = end_table.event AND
end_table.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time') as event_end ON event_location_start.event = event_end.event
GROUP BY event_location_start.location, event_location_start.start, event_end.end) as frequency_table
JOIN tag_name ON tag_name.tag = frequency_table.location ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";

	$output = array();
	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}

	return $output;
}

/**
 * Calculate settings for a tag
 */
function get_n_settings_for_a_tag($topic, $n = 5) {
	$query = "SELECT result_list.location, result_list.name, result_list.start_time, result_list.end_time, COUNT(*) as frequency
FROM
(SELECT event_name_start_table.event, event_name_start_table.location, event_name_start_table.name, event_name_start_table.start_time, event_end_table.end_time
FROM
(SELECT events_name_table.event, events_name_table.location, events_name_table.name, event_start_table.start_time
FROM
(SELECT events_table.event, events_table.location, tag_name.name
FROM
(SELECT DISTINCT event_value.event, event_location.value as location
FROM event_attribute_value as event_value, event_attribute_value as event_location, event_attribute_value as event_time, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE (event_value.value = '".$topic."' OR event_value.event = '".$topic."') AND
event_value.event = event_location.event AND
event_location.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_value.event = event_time.event AND
((event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') OR (event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time'))) as events_table
LEFT JOIN tag_name ON events_table.location = tag_name.tag) as events_name_table
LEFT JOIN
(SELECT event_value.event, event_time.value as start_time
FROM event_attribute_value as event_value, event_attribute_value as event_location, event_attribute_value as event_time, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE (event_value.value = '".$topic."' OR event_value.event = '".$topic."') AND
event_value.event = event_location.event AND
event_location.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_value.event = event_time.event AND
event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'start_time') as event_start_table ON event_start_table.event = events_name_table.event) as event_name_start_table
LEFT JOIN
(SELECT event_value.event, event_time.value as end_time
FROM event_attribute_value as event_value, event_attribute_value as event_location, event_attribute_value as event_time, attribute_name as location_attribute_name, attribute_name as time_attribute_name
WHERE (event_value.value = '".$topic."' OR event_value.event = '".$topic."') AND
event_value.event = event_location.event AND
event_location.attribute = location_attribute_name.attribute AND
location_attribute_name.name = 'location' AND
event_value.event = event_time.event AND
event_time.attribute = time_attribute_name.attribute AND
time_attribute_name.name = 'end_time') as event_end_table ON event_end_table.event = event_name_start_table.event) as result_list
GROUP BY result_list.location, result_list.start_time, result_list.end_time
ORDER BY frequency DESC LIMIT ".$n.";";

	$result = db_query($query);
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}

	return $output;
}

/**
 * Get the direct triples associated with an attribute tag (such as date of birth or artists of a movement)
*/
function get_tag_attribute_id_values($tag_attribute_id) {
	$query = "SELECT * FROM tag_attribute_id_value WHERE tag_attribute_id = '".$tag_attribute_id."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record->value;
	}
	return $output;	
}

/**
 * Get the direct triples associated with a tag
 */
function get_triple_ids_of_a_tag($topic) {
	$query = "SELECT * FROM tag_attribute WHERE tag = '".$topic."';";
	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;
}

/**
 * Get the direct triples associated with a tag
 */
function get_triple_ids_of_a_tag2($topic) {
	$query = "SELECT results.fact_attribute, GROUP_CONCAT(results.fact_value) as value_list, results.link FROM
(SELECT fact_attribute_reverse.reverse as fact_attribute, tag_attribute.tag as fact_value, tag_attribute.link 
FROM tag_attribute, tag_attribute_id_value, fact_attribute_reverse 
WHERE tag_attribute_id_value.value = '".$topic."' AND 
tag_attribute_id_value.tag_attribute_id = tag_attribute.id AND 
tag_attribute.attribute = fact_attribute_reverse.attribute
UNION
SELECT tag_attribute.attribute as fact_attribute, tag_attribute_id_value.value as fact_value, tag_attribute.link 
FROM tag_attribute, tag_attribute_id_value
WHERE tag_attribute.tag = '".$topic."' AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id) as results
GROUP BY results.fact_attribute;";
	$result = db_query($query);

	$output = array();
	foreach ($result as $record) {
		$record->value_list = explode(',',$record->value_list);
		$output[] = $record;
	}
	return $output;
}

/**
 * Calculation of themes for an individual story tag
 */
function top_n_themes_of_tag($tag = '/m/01qwfk', $n = 10, $min_frequency = 2) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}	
	//query based on value in events and direct properties of the tag
// 	$query = "SELECT * FROM (SELECT result.tag as value, COUNT(result.tag) as frequency, result.name
// FROM tag_name as result,
// (SELECT tag_name.tag
// FROM tag_attribute, tag_attribute_id_value, tag_name 
// WHERE tag_name.tag = tag_name.tag AND tag_attribute.tag = :tag AND 
// tag_attribute.id = tag_attribute_id_value.tag_attribute_id and
// tag_name.tag = tag_attribute_id_value.value
// UNION ALL 
// SELECT tag_name.tag 
// FROM event_attribute_value as event_table, event_attribute_value as value_table, tag_name  
// WHERE event_table.value = :tag AND event_table.event = value_table.event AND
// tag_name.tag = value_table.value) as data
// WHERE result.tag = data.tag AND NOT(result.tag = :tag)
// GROUP BY result.tag
// ORDER BY frequency DESC) as frequency
// WHERE frequency > 1 LIMIT ".$n." ;";
	//this version of the query excludes locations
// 	$query = "SELECT * FROM (SELECT result.tag as value, COUNT(result.tag) as frequency, result.name
// FROM tag_name as result,
// (SELECT tag_name.tag
// FROM tag_attribute, tag_attribute_id_value, tag_name 
// WHERE tag_name.tag = tag_name.tag AND tag_attribute.tag = :tag AND 
// tag_attribute.id = tag_attribute_id_value.tag_attribute_id and
// tag_name.tag = tag_attribute_id_value.value
// UNION ALL 
// SELECT tag_name.tag 
// FROM event_attribute_value as event_table, event_attribute_value as value_table, tag_name  
// WHERE event_table.value = :tag AND event_table.event = value_table.event AND
// tag_name.tag = value_table.value AND NOT EXISTS (SELECT attribute_name.name FROM attribute_name WHERE value_table.attribute = attribute_name.attribute AND attribute_name.name = 'location')) as data
// WHERE result.tag = data.tag AND NOT(result.tag = :tag)
// GROUP BY result.tag
// ORDER BY frequency DESC) as frequency
// WHERE frequency > 1 LIMIT ".$n." ;";
	$query = "SELECT * FROM (SELECT result.tag as value, COUNT(result.tag) as frequency, result.name
FROM tag_name as result,
(SELECT tag_name.tag
FROM tag_attribute, tag_attribute_id_value, tag_name, theme_fact_property
WHERE tag_attribute.tag = :tag AND
tag_attribute.attribute = theme_fact_property.fb_property AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id and
tag_name.tag = tag_attribute_id_value.value
UNION ALL
SELECT tag_attribute.tag
FROM tag_attribute, tag_attribute_id_value, fact_attribute_reverse, theme_fact_property, tag_name
WHERE tag_attribute_id_value.value = :tag AND 
tag_attribute_id_value.tag_attribute_id = tag_attribute.id AND 
tag_attribute.attribute = fact_attribute_reverse.attribute AND
fact_attribute_reverse.reverse = theme_fact_property.fb_property AND
tag_name.tag = tag_attribute.tag
UNION ALL
SELECT event_attribute_value.value as tag
FROM 
(SELECT DISTINCT event_attribute_value.event 
FROM event_attribute_value
WHERE event_attribute_value.value = :tag) as event_table, event_attribute_value, attribute_name
WHERE event_table.event = event_attribute_value.event AND
event_attribute_value.attribute = attribute_name.attribute AND
attribute_name.attribute <> 'location') as data
WHERE result.tag = data.tag
GROUP BY result.tag
ORDER BY frequency DESC) as frequency
 WHERE frequency >= ".$min_frequency." LIMIT ".$n." ;";
	$result = db_query($query, array(':tag' => $tag));
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}
	return $output;	
}


/**
 * Top matching themes (whether or not tags of the story)
 */
function top_n_themes_of_story($story_id, $n = 5) {
	$n = (int) $n;
if($n == 0) {
	$n = 5;
}
// $query_list = "('".implode("','",$event_list)."')";
//this version keeps locations in the theme list
// 	$query = "SELECT COUNT(DISTINCT result.value) as tags, COUNT(DISTINCT result.event) as frequency, result.value, result.name
// FROM
// (SELECT *
// FROM event_attribute_value, tag_name
// WHERE event_attribute_value.event IN ".$query_list." AND tag_name.tag = event_attribute_value.value) as result
// WHERE
//  NOT EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = '".$max_value."' AND qt.tag = result.value)
// GROUP BY result.value
// ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";
//this version of the query excludes locations
// $query = "SELECT COUNT(DISTINCT result.value) as tags, COUNT(DISTINCT result.event) as frequency, result.value, result.name
// FROM
// (SELECT *
// FROM event_attribute_value, tag_name
// WHERE event_attribute_value.event IN ".$query_list." AND tag_name.tag = event_attribute_value.value
// 	AND NOT EXISTS
// (SELECT attribute_name.name FROM attribute_name WHERE event_attribute_value.attribute = attribute_name.attribute AND attribute_name.name = 'location')) as result
// GROUP BY result.value
// ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";
	$query ="SELECT * FROM
(SELECT result.tag as value, COUNT(result.tag) as frequency, result.name, data.annotation, COUNT(DISTINCT data.annotation) as annotations
FROM tag_name as result,
(
SELECT tag_name.tag, query_tag.tag as annotation
FROM tag_attribute, tag_attribute_id_value, tag_name, query_tag, theme_fact_property
WHERE 
query_tag.id = :storyid AND
query_tag.tag = tag_attribute.tag AND
tag_attribute.attribute = theme_fact_property.fb_property AND
tag_attribute.id = tag_attribute_id_value.tag_attribute_id and
tag_name.tag = tag_attribute_id_value.value
UNION ALL
SELECT tag_name.tag, query_tag.tag as annotation
FROM tag_attribute, tag_attribute_id_value, tag_name, query_tag, theme_fact_property, fact_attribute_reverse
WHERE 
query_tag.id = :storyid AND
query_tag.tag = tag_attribute_id_value.value AND
tag_attribute_id_value.tag_attribute_id = tag_attribute.id AND 
tag_attribute.attribute = fact_attribute_reverse.attribute AND
fact_attribute_reverse.reverse = theme_fact_property.fb_property AND
tag_name.tag = tag_attribute.tag
UNION ALL
SELECT event_attribute_value.value as tag, event_table.tag as annotation
FROM 
(SELECT DISTINCT query_tag.tag, event_attribute_value.event
FROM query_tag, event_attribute_value
WHERE 
query_tag.id = :storyid AND
query_tag.tag = event_attribute_value.value) as event_table, event_attribute_value, attribute_name
WHERE event_table.event = event_attribute_value.event AND
event_attribute_value.attribute = attribute_name.attribute AND
attribute_name.attribute <> 'location') as data
WHERE result.tag = data.tag 
GROUP BY result.tag
ORDER BY annotations DESC,frequency DESC LIMIT ".$n.") as result_table
WHERE result_table.frequency >= 2;";
$result = db_query($query, array(':storyid' => $story_id));

$output = array();
foreach ($result as $record) {
	$output[] = $record;
}

return $output;
}


/**
 * Ordering of the story tags according to theme ranking
 */
function top_n_matching_themes_of_story2($event_list, $max_value, $n = 5) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}
	$query_list = "('".implode("','",$event_list)."')";
	$query = "SELECT COUNT(DISTINCT result.value) as tags, COUNT(DISTINCT result.event) as frequency, result.value, tag_name.name
FROM
(SELECT *
FROM event_attribute_value
WHERE event_attribute_value.event IN ".$query_list.") as result
LEFT JOIN tag_name ON  tag_name.tag = result.value
WHERE
 EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = '".$max_value."' AND qt.tag = result.value)
GROUP BY result.value
ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";
	$result = db_query($query);

	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}

	return $output;
}

/**
 * Calculate story themes exlcuding those that appear in the story tag list
 */
function top_n_nonmatching_themes_of_story2($event_list, $max_value, $n = 5) {
	$n = (int) $n;
	if($n == 0) {
		$n = 5;
	}
	$query_list = "('".implode("','",$event_list)."')";
	//this version keeps locations in the theme list
// 	$query = "SELECT COUNT(DISTINCT result.value) as tags, COUNT(DISTINCT result.event) as frequency, result.value, result.name
// FROM
// (SELECT *
// FROM event_attribute_value, tag_name
// WHERE event_attribute_value.event IN ".$query_list." AND tag_name.tag = event_attribute_value.value) as result
// WHERE
//  NOT EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = '".$max_value."' AND qt.tag = result.value)
// GROUP BY result.value
// ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";
	//this version of the query excludes locations
	$query = "SELECT COUNT(DISTINCT result.value) as tags, COUNT(DISTINCT result.event) as frequency, result.value, result.name
FROM
(SELECT * 
FROM event_attribute_value, tag_name
WHERE event_attribute_value.event IN ".$query_list." AND tag_name.tag = event_attribute_value.value
	AND NOT EXISTS 
(SELECT attribute_name.name FROM attribute_name WHERE event_attribute_value.attribute = attribute_name.attribute AND attribute_name.name = 'location')) as result
WHERE 
 NOT EXISTS (SELECT qt.tag FROM query_tag as qt WHERE qt.id = '".$max_value."' AND qt.tag = result.value)
GROUP BY result.value
ORDER BY tags DESC, frequency DESC LIMIT ".$n.";";

	$result = db_query($query);
	
	$output = array();
	foreach ($result as $record) {
		$output[] = $record;
	}

	return $output;
}

//tag_event_id
/**
 * Save list of events currently associated with a tag
 * Used to calculate the settings of a story
 */
function save_tag_event_results($tag, $event_array) {
	$del_query = "delete from tag_event_id where tag = '".$tag."';";
	db_query($del_query);
	//save to tag - event_id table
	if(!empty($event_array)) {
		$list_items =  array();
		foreach($event_array as $event) {
			$list_items[] = "('".$tag."','".$event."')";
		}
		$values_list = implode(",",$list_items);
		$query = "INSERT INTO tag_event_id (tag, event_id) VALUES ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag), event_id = VALUES(event_id);";
	
		db_query($query);
	}	
}

// ALTER TABLE tag_notable_types
// ADD CONSTRAINT tt UNIQUE (tag, type);
/**
 * Check for all types of a topic and locally and retrieve and store from freebase if not found
 */
function check_for_tag_types($topic = "/m/055rd2", $reload = FALSE) {
	if(!$reload) {
		$types = array();
		$types = get_tag_types($topic);
		if(!empty($types)) {
			return $types;
		}
	}
	//get types
	$types = find_fb_types_of_topic($topic);

	if(!empty($types)) {
		//add to database
		$values_list = '';
		foreach($types as $type) {
			$values_list .=", ('".$topic."', '".$type."')";
		}
		if($values_list == "") {
			return array();
		}
		$values_list = "VALUES".substr($values_list, 1)." ";

		$query = "INSERT INTO tag_types (tag, type) ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag), type = VALUES(type);";

		$result = db_query($query);
	}
	return $types;
}

/**
 * Get stored types for a freebase topic
*/
function get_tag_types($topic) {
	$output = array();
	$query = "SELECT * FROM tag_types WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	foreach ($result as $record) {
		if(isset($record->type)) {
			$output[] = $record->type;
		}
	}
	return $output;
}

/**
 * Retrieve from freebase notable types for a freebase topic
 */
function find_fb_types_of_topic($topic = "/m/050_704") {
	$query = array(array(
  			"mid"=> $topic,
  			"type"=> (array(
  			))
  	));
	$results = execute_mql_event_query($query);
	if(isset($results["result"][0]["type"])) {
		return $results["result"][0]["type"];
	}
	else {
		return array();
	}
}

/**
 * Retrieve tpic name pairs from freebase data
 * get_topic_name_pairs(array('/education/education/student','/education/education/institution','/education/education/degree','/education/education/specialization','/education/education/minor'),$result);
 */
 function get_topic_name_pairs($key_array,$result,$previous = array()) {
	$topic_name_pairs = array();
	foreach($key_array as $key) {
		if(isset($result[$key])) {
			if(isset($result[$key]['mid']) && isset($result[$key]['name'])) {
				$topic_name_pairs[$result[$key]['mid']] = $result[$key]['name'];
			}
			elseif(is_array($result[$key])) {
				foreach($result[$key] as $item) {
					if(isset($item['mid']) && isset($item['name'])) {
						$topic_name_pairs[$item['mid']] = $item['name'];
					}
				}
			}
		}
	}

	return array_merge($topic_name_pairs,$previous);
}

/**
 * Add the topic itself and its freebase name to the list of results
 */
function add_top_level_pair($result, $topic_name_pairs) {
	if(isset($result["mid"]) && isset($result["name"])) {
		$topic_name_pairs[$result["mid"]] = $result["name"];
	}
	return $topic_name_pairs;
}

/**
 * Retrieve studying history of a person
 */
function fb_person_studying($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/people/person/education"=> array(array(
    "mid"=> null,
    "name"=> null,
    "/education/education/student"=> array(
      "mid"=> null,
      "name"=> null
    ),
    "/education/education/institution"=> array(
      "mid"=> null,
      "name"=> null,
    		"type"=> array(array(
    				"id"=> "/location/location",
    				"optional"=> "optional"
    		))
    ),
    "/education/education/start_date"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/education/education/end_date"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/education/education/degree"=> array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    ),
    "/education/education/major_field_of_study"=> array(array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    )),
    "/education/education/specialization"=> array(array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    )),
    "/education/education/minor"=> array(array(
      "mid"=> null,
      "name"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/people/person/education"] as $result) {
		if(isset($result["/education/education/institution"]["type"][0])) {
			$output[$result["mid"]]['location'] = check_array_is_returned($result["/education/education/institution"]["mid"]);
		}
		
		$output[$result["mid"]]["activity"] = "education";
		$output[$result["mid"]]["/education/education/student"] = $result["/education/education/student"]["mid"];
		$output[$result["mid"]]["/education/education/institution"] = $result["/education/education/institution"]["mid"];
		$output[$result["mid"]]["/education/education/start_date"] = $result["/education/education/start_date"]["value"];
		$output[$result["mid"]]["/education/education/end_date"] = $result["/education/education/end_date"]["value"];
		
		$output[$result["mid"]]["/education/education/degree"] = check_array_is_returned($result["/education/education/degree"]["mid"]);
		$output[$result["mid"]]["/education/education/specialization"] = get_values($result["/education/education/specialization"]);
		$output[$result["mid"]]["/education/education/minor"] = get_values($result["/education/education/minor"]);
		
// 		$output[$result["mid"]]["tags"] = array_merge(check_array_is_returned($result["/education/education/degree"]["mid"]),
// 			get_values($result["/education/education/specialization"]),
// 			get_values($result["/education/education/minor"]));

	
	$topic_name_pairs = get_topic_name_pairs(array('/education/education/student','/education/education/institution','/education/education/degree','/education/education/specialization','/education/education/minor'),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve places lived history of a person
 */
function fb_person_living_at_location($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/people/person/places_lived"=> array(array(
    "mid"=> null,
    "/people/place_lived/location"=> array(
      "name"=> null,
      "mid"=> null
    ),
    "/people/place_lived/person"=> array(
      "name"=> null,
      "mid"=> null
    ),
    "/people/place_lived/start_date"=> null,
    "/people/place_lived/end_date"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/people/person/places_lived"] as $result) {
		$output[$result["mid"]]["activity"] = "place_lived";
		$output[$result["mid"]]["/people/place_lived/location"] = $result["/people/place_lived/location"]["mid"];
		$output[$result["mid"]]["/people/place_lived/person"] = $result["/people/place_lived/person"]["mid"];
		$output[$result["mid"]]["/people/place_lived/start_date"] = $result["/people/place_lived/start_date"];
		$output[$result["mid"]]["/people/place_lived/end_date"] = $result["/people/place_lived/end_date"];

	$topic_name_pairs = get_topic_name_pairs(array('/people/place_lived/location','/people/place_lived/person'),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve object creation history of a creator
 */
function fb_topic_creating_object($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/visual_artist/artworks"=> array(array(
  		"name"=> null,
  		"mid"=> null,
    "/visual_art/artwork/artist"=> array(array(
      "name"=> null,
      "mid"=> null,
 //     "optional"=> "optional"
    )),
    "/visual_art/artwork/art_subject"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "mid"=> null,
    "/visual_art/artwork/date_begun"=> null,
    "/visual_art/artwork/date_completed"=> null,
    "/visual_art/artwork/art_form"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/art_genre"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
//     "/visual_art/artwork/media"=> array(array(
//       "name"=> null,"mid"=> null,
//       "optional"=> "optional"
//     )),
//     "/visual_art/artwork/support"=> array(array(
//       "name"=> null,"mid"=> null,
//       "optional"=> "optional"
//     )),
    "/visual_art/artwork/period_or_movement"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/locations"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/owners"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/editions"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/edition_of"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/visual_art/artwork/belongs_to_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
  	"/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
  		"name"=> null,"mid"=> null,
  		"optional"=> "optional"
	))
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/visual_art/visual_artist/artworks"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		$output[$result["mid"]]["/exhibitions/exhibit/exhibitions_displayed_in"] = get_values($result["/exhibitions/exhibit/exhibitions_displayed_in"]);
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
// 		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
// 		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] = 
// 			array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 					get_values($result["/visual_art/artwork/art_genre"]),
// 					get_values($result["/visual_art/artwork/media"]),
// 					get_values($result["/visual_art/artwork/support"]),
// 					get_values($result["/visual_art/artwork/period_or_movement"]),
// // 		removed because a pointer to a connecting node
// // 					get_values($result["/visual_art/artwork/locations"]),
// // 					get_values($result["/visual_art/artwork/owners"]),
// 					get_values($result["/visual_art/artwork/editions"]),
// 					get_values($result["/visual_art/artwork/edition_of"]),
// 					get_values($result["/visual_art/artwork/belongs_to_series"]),
// 					check_array_is_returned($result["mid"]));
	
		//add inferred locations for artwork creation
		$location_result = locations_for_artwork_creation_date($output[$result["mid"]]["/visual_art/artwork"][0], $output[$result["mid"]]["/visual_art/artwork/artist"][0], $output[$result["mid"]]["/visual_art/artwork/date_begun"], $output[$result["mid"]]["/visual_art/artwork/date_completed"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
		
		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series","/exhibitions/exhibit/exhibitions_displayed_in"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);

	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve publication history of a publisher
 */
function fb_topic_publishing($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/book/author/works_written"=> array(array(
    "name"=> null,"mid"=> null,
    "/book/written_work/author"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/book/written_work/editor"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/date_of_first_publication"=> null,
    "/book/written_work/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/school_or_movement"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/part_of_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/previous_in_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/next_in_series"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/book/author/works_written"] as $result) {
		$output[$result["mid"]]["activity"] = "book_authoring";
		$output[$result["mid"]]["/book/written_work/author"] = get_values($result["/book/written_work/author"]);
		$output[$result["mid"]]["/book/written_work/editor"] = get_values($result["/book/written_work/editor"]);
		
		$output[$result["mid"]]["/book/written_work/date_of_first_publication"] = $result["/book/written_work/date_of_first_publication"];
		
		$output[$result["mid"]]["/book/written_work/school_or_movement"] = get_values($result["/book/written_work/school_or_movement"]);
		$output[$result["mid"]]["/book/written_work/part_of_series"] = get_values($result["/book/written_work/part_of_series"]);
		$output[$result["mid"]]["/book/written_work/previous_in_series"] = get_values($result["/book/written_work/previous_in_series"]);
		$output[$result["mid"]]["/book/written_work/next_in_series"] = get_values($result["/book/written_work/next_in_series"]);
		$output[$result["mid"]]["/book/written_work"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/book/written_work/school_or_movement"]),
// 				get_values($result["/book/written_work/part_of_series"]),
// 				get_values($result["/book/written_work/previous_in_series"]),
// 				get_values($result["/book/written_work/next_in_series"]),
// 				check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/book/written_work/author","/book/written_work/editor","/book/written_work/date_of_first_publication",
				"/book/written_work/school_or_movement","/book/written_work/part_of_series","/book/written_work/previous_in_series","/book/written_work/next_in_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add inferred locations for artwork creation
		$location_result = locations_for_authorship_date($output[$result["mid"]]["/book/written_work/author"][0], $output[$result["mid"]]["/book/written_work/date_of_first_publication"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
		
		
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));	
}

/**
 * Retrieve memebership data of an organisation member
 */
function fb_topic_organization_member($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/organization/organization_member/member_of"=> array(array(
    "mid"=> null,
    "/organization/organization_membership/member"=> array(
      "name"=> null,
      "mid"=> null
    ),
    "/organization/organization_membership/organization"=> array(
      "name"=> null,
      "mid"=> null,
      "type"=> array(array(
        "id"=> "/location/location",
        "optional"=> "optional"
      ))
    ),
    "/organization/organization_membership/from"=> null,
    "/organization/organization_membership/to"=> null
  ))
));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/organization/organization_member/member_of"] as $result) {
		
		if(isset($result["/organization/organization_membership/organization"]["type"][0])) {
			$output[$result["mid"]]['location'] = check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]);
		}
		
		$output[$result["mid"]]["activity"] = "organization_membership";
		$output[$result["mid"]]["/organization/organization_membership/member"] = check_array_is_returned($result["/organization/organization_membership/member"]["mid"]);
		$output[$result["mid"]]["/organization/organization_membership/organization"] = check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]);
// 		array_merge(check_array_is_returned($result["/organization/organization_membership/member"]["mid"]),
// 				check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]));
		$output[$result["mid"]]["/organization/organization_membership/from"] = $result["/organization/organization_membership/from"];
		$output[$result["mid"]]["/organization/organization_membership/to"] = $result["/organization/organization_membership/to"];

		$topic_name_pairs = get_topic_name_pairs(array("/organization/organization_membership/member", "/organization/organization_membership/organization"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);

	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve exhibition data of related concept - includes exhibition run data
 */
//"/exhibitions/exhibition_producer/exhibitions_produced","/exhibitions/exhibition_curator/exhibitions_curated"
//"/exhibitions/exhibition_subject/exhibitions_created_about_this_subject",
//fb_topic_exhibition_related_concept('/m/0f896_',array("events"=>array(),"names"=>array()),"/exhibitions/exhibition_producer/exhibitions_produced")
//fb_topic_exhibition_related_concept('/m/01qwfk',array("events"=>array(),"names"=>array()),"/exhibitions/exhibition_producer/exhibitions_produced")
//fb_topic_exhibition_related_concept('/m/06c8bx',array("events"=>array(),"names"=>array()),"/exhibitions/exhibition_curator/exhibitions_curated")
//fb_topic_exhibition_related_concept("/m/014wxs",array("events"=>array(),"names"=>array()),"/exhibitions/exhibition_subject/exhibitions_created_about_this_subject")
//fb_topic_exhibition_related_concept("/m/03wh6f",array("events"=>array(),"names"=>array()),"/exhibitions/exhibit/exhibitions_displayed_in")
function fb_topic_exhibition_related_concept($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array()), $topic_relation = "/exhibitions/exhibition_producer/exhibitions_produced") {
	$query = array(array(
  "mid"=> $topic,
  "name"=> null,
  $topic_relation=> array(array(
    "mid"=> null,
    "name"=> null,
    "/exhibitions/exhibition/produced_by"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/venues"=> array(array(
      "mid"=> null,
      "/exhibitions/exhibition_run/venue"=> array(
        "name"=> null,
        "mid"=> null
      ),
      "/exhibitions/exhibition_run/opened_on"=> null,
      "/exhibitions/exhibition_run/closed_on"=> null,
      "optional"=> "optional"
    )),
//     "/exhibitions/exhibition/exhibition_types"=> array(array(
//       "name"=> null,
//       "mid"=> null,
//       "optional"=> "optional"
//     )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    ))
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	
	$topic_name_pairs = array();
	//list of exhibitions
	foreach($resultarray["result"][0][$topic_relation] as $exhibition) {
		//find out if exhibition with venue
		if(empty($exhibition['/exhibitions/exhibition/venues'])) {
			$key = $exhibition['mid'];

			//if non-venue exhibition
			$output[$key]["activity"] = "exhibition_creation";
			$output[$key]["/exhibitions/exhibition/produced_by"] = get_values($exhibition["/exhibitions/exhibition/produced_by"]);
			$output[$key]["/exhibitions/exhibition/curators"] = get_values($exhibition["/exhibitions/exhibition/curators"]);
// 			$output[$key]["/exhibitions/exhibition/exhibition_types"] = get_values($exhibition["/exhibitions/exhibition/exhibition_types"]);
			$output[$key]["/exhibitions/exhibition/exhibits"] = get_values($exhibition["/exhibitions/exhibition/exhibits"]);
			$output[$key]["/exhibitions/exhibition/subjects"] = get_values($exhibition["/exhibitions/exhibition/subjects"]);
			$output[$key]["/exhibitions/exhibition"] = check_array_is_returned($exhibition["mid"]);
			
			$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$exhibition,$topic_name_pairs);
			$topic_name_pairs = add_top_level_pair($exhibition, $topic_name_pairs);

		}
		else {
			foreach($exhibition['/exhibitions/exhibition/venues'] as $venue) {
				$key = $venue['mid'];
				
				//details of the exhibition
				$output[$key]["activity"] = "exhibition_creation";
				$output[$key]["/exhibitions/exhibition/produced_by"] = get_values($exhibition["/exhibitions/exhibition/produced_by"]);
				$output[$key]["/exhibitions/exhibition/curators"] = get_values($exhibition["/exhibitions/exhibition/curators"]);
// 				$output[$key]["/exhibitions/exhibition/exhibition_types"] = get_values($exhibition["/exhibitions/exhibition/exhibition_types"]);
				$output[$key]["/exhibitions/exhibition/exhibits"] = get_values($exhibition["/exhibitions/exhibition/exhibits"]);
				$output[$key]["/exhibitions/exhibition/subjects"] = get_values($exhibition["/exhibitions/exhibition/subjects"]);
				$output[$key]["/exhibitions/exhibition"] = check_array_is_returned($exhibition["mid"]);
				
				//details of the exhibition run 
				$output[$key]["/exhibitions/exhibition_run/opened_on"] = $venue["/exhibitions/exhibition_run/opened_on"];
				$output[$key]["/exhibitions/exhibition_run/closed_on"] = $venue["/exhibitions/exhibition_run/closed_on"];
				$output[$key]["/exhibitions/exhibition_run/venue"] = check_array_is_returned($venue["/exhibitions/exhibition_run/venue"]["mid"]);
				
				$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition_run/venue"),$venue,$topic_name_pairs);
				
			}
			$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$exhibition,$topic_name_pairs);
			$topic_name_pairs = add_top_level_pair($exhibition, $topic_name_pairs);
			$topic_event_links[] = array($topic, 'Exhibitions', $exhibition["mid"]);
			
		}
	}
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

function fb_topic_exhibition_producer($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition_producer/exhibitions_produced"=> array(array(
    "mid"=> null,"name"=> null,
    "/exhibitions/exhibition/produced_by"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/venues"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
//     "/exhibitions/exhibition/exhibition_types"=> array(array(
//       "name"=> null,"mid"=> null,
//       "optional"=> "optional"
//     )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"][0]["/exhibitions/exhibition_producer/exhibitions_produced"][0]['/exhibitions/exhibition/venues'][0])) {
		return $previous_output;
	}

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_producer/exhibitions_produced"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";
		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// 				get_values($result["/exhibitions/exhibition/curators"]));
		
// 		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/exhibitions/exhibition/venues"]),
// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// 				get_values($result["/exhibitions/exhibition/exhibits"]),
// 				get_values($result["/exhibitions/exhibition/subjects"]),
// 				check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve exhibition data of an exhibition curator//no date info
 */
function fb_topic_exhibition_curator($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition_curator/exhibitions_curated"=> array(array(
    "mid"=> null,
    "/exhibitions/exhibition/produced_by"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/venues"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
//     "/exhibitions/exhibition/exhibition_types"=> array(array(
//       "name"=> null,"mid"=> null,
//       "optional"=> "optional"
//     )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_curator/exhibitions_curated"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";
		
		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// 				get_values($result["/exhibitions/exhibition/curators"]));
		
// 		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/exhibitions/exhibition/venues"]),
// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// 				get_values($result["/exhibitions/exhibition/exhibits"]),
// 				get_values($result["/exhibitions/exhibition/subjects"]),
// 				check_array_is_returned($result["mid"]));
		

		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve exhibition data of an exhibition subject// no date info
 */
function fb_topic_exhibition_subject($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"=> array(array(
  	"mid"=> null,
  	"name"=>null,
    "/exhibitions/exhibition/produced_by"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/venues"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
//     "/exhibitions/exhibition/exhibition_types"=> array(array(
//       "name"=> null,"mid"=> null,
//       "optional"=> "optional"
//     )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_subject/exhibitions_created_about_this_subject"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";
		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// 				get_values($result["/exhibitions/exhibition/curators"]));
		
// 		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/exhibitions/exhibition/venues"]),
// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// 				get_values($result["/exhibitions/exhibition/exhibits"]),
// 				get_values($result["/exhibitions/exhibition/subjects"]),
// 				check_array_is_returned($result["mid"]));
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve ownsership history of an art owner
 */
function fb_topic_art_owner($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/art_owner/artworks_owned"=> array(array(
    "mid"=> null,
    "/visual_art/artwork_owner_relationship/owner"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/artwork"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/date_acquired"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/visual_art/artwork_owner_relationship/last_date_owned"=> array(
      "value"=> null,
      "optional"=> "optional"
    )
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/visual_art/art_owner/artworks_owned"] as $result) {
		$output[$result["mid"]]["activity"] = "object_ownership";
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/owner"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/owner"]["mid"]);
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/date_acquired"] = $result["/visual_art/artwork_owner_relationship/date_acquired"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/last_date_owned"] = $result["/visual_art/artwork_owner_relationship/last_date_owned"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/artwork"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/artwork"]["mid"]);

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork_owner_relationship/owner","/visual_art/artwork_owner_relationship/artwork"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add inferred locations for artwork creation
		$location_result = locations_for_artwork_ownership_date($output[$result["mid"]]["/visual_art/artwork_owner_relationship/owner"][0], $output[$result["mid"]]["/visual_art/artwork_owner_relationship/date_acquired"], $output[$result["mid"]]["/visual_art/artwork_owner_relationship/last_date_owned"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve award history of an award winner
 */
function fb_topic_award_winner($topic, $previous_output = array("events"=>array(),"names"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/award/award_winner/awards_won"=> array(array(
    "mid"=> null,
    "/award/award_honor/year"=> null,
    "/award/award_honor/award"=> array(
      "name"=> null,"mid"=> null
    ),
    "/award/award_honor/honored_for"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/award/award_honor/award_winner"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_honor/ceremony"=> array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    ),
    "/award/award_honor/achievement_level"=> array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )
  ))
));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_winner/awards_won"] as $result) {
		$output[$result["mid"]]["activity"] = "award_won";
		$output[$result["mid"]]["/award/award_honor/award_winner"] = get_values($result["/award/award_honor/award_winner"]);
		$output[$result["mid"]]["/award/award_honor/year"] = $result["/award/award_honor/year"];
		
		$output[$result["mid"]]["/award/award_honor/award"] = check_array_is_returned($result["/award/award_honor/award"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/honored_for"] = get_values($result["/award/award_honor/honored_for"]);
		$output[$result["mid"]]["/award/award_honor/ceremony"] = check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/achievement_level"] = check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]);
// 		$output[$result["mid"]]["tags"] = 
// 			array_merge(check_array_is_returned($result["/award/award_honor/award"]["mid"]),
// 				get_values($result["/award/award_honor/honored_for"]),
// 				check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]),
// 				check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_honor/award","/award/award_honor/honored_for","/award/award_honor/award_winner","/award/award_honor/ceremony","/award/award_honor/achievement_level"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		$topic_event_links[] = array($topic, 'Awards won', $result["mid"]);
		
		//add locations for award or ceremony
		$location_result = locations_for_ceremony_award($output[$result["mid"]]["/award/award_honor/ceremony"], $output[$result["mid"]]["/award/award_honor/award"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
	
	}
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve nomination history of a nominee
 */
function fb_topic_award_nominee($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/award/award_nominee/award_nominations"=> array(array(
    "mid"=> null,
    "/award/award_nomination/year"=> array(
      "value"=> null
    ),
    "/award/award_nomination/award"=> array(
      "name"=> null,"mid"=> null
    ),
    "/award/award_nomination/nominated_for"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/award_nominee"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/ceremony"=> array(array(
      "name"=> null,"mid"=> null
    ))
  ))
));
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}	

	$topic_name_pairs = array();
	foreach($resultarray["result"][0]["/award/award_nominee/award_nominations"] as $result) {
		$output[$result["mid"]]["activity"] = "award_nomination";
		$output[$result["mid"]]["/award/award_nomination/award_nominee"] = get_values($result["/award/award_nomination/award_nominee"]);
		$output[$result["mid"]]["/award/award_nomination/year"] = $result["/award/award_nomination/year"]["value"];
		
		$output[$result["mid"]]["/award/award_nomination/award"] = check_array_is_returned($result["/award/award_nomination/award"]["mid"]);
		$output[$result["mid"]]["/award/award_nomination/nominated_for"] = get_values($result["/award/award_nomination/nominated_for"]);
		$output[$result["mid"]]["/award/award_nomination/ceremony"] = get_values($result["/award/award_nomination/ceremony"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(check_array_is_returned($result["/award/award_nomination/award"]["mid"]),
// 				get_values($result["/award/award_nomination/nominated_for"]),
// 				get_values($result["/award/award_nomination/ceremony"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_nomination/award","/award/award_nomination/nominated_for","/award/award_nomination/award_nominee","/award/award_nomination/ceremony"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add locations for award or ceremony
		$location_result = locations_for_ceremony_award($output[$result["mid"]]["/award/award_nomination/ceremony"], $output[$result["mid"]]["/award/award_nomination/award"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}


/**
 * artworks, their artists and times - test function
 */
function artwork_artist_begun_completed() {
	$query = "SELECT event_artist_artwork_begun_table.artist, event_artist_artwork_begun_table.artwork, event_artist_artwork_begun_table.begun, event_completed_table.completed
FROM
(SELECT event_artist_artwork_table.event, event_artist_artwork_table.artist, event_artist_artwork_table.artwork, event_begun_table.begun
FROM 
(SELECT  activity_table.event, artist_table.value as artist, artwork_table.value as artwork
FROM event_attribute_value as activity_table, event_attribute_value as artist_table, event_attribute_value as artwork_table 
WHERE activity_table.attribute = 'activity' AND
activity_table.value = 'object_creation' AND
activity_table.event = artist_table.event AND
artist_table.attribute = '/visual_art/artwork/artist' AND
activity_table.event = artwork_table.event AND
artwork_table.attribute = '/visual_art/artwork') as event_artist_artwork_table
LEFT JOIN 
(SELECT event_attribute_value.event, event_attribute_value.value as begun
FROM event_attribute_value
WHERE event_attribute_value.attribute = '/visual_art/artwork/date_begun') as event_begun_table
ON event_begun_table.event = event_artist_artwork_table.event) event_artist_artwork_begun_table
LEFT JOIN
(SELECT event_attribute_value.event, event_attribute_value.value as completed
FROM event_attribute_value
WHERE event_attribute_value.attribute = '/visual_art/artwork/date_completed') as event_completed_table
ON event_completed_table.event = event_artist_artwork_begun_table.event LIMIT 30;";
	$result = db_query($query);
	$output = array();
	foreach($result as $record) {
		$output[] = $record;
	}
	return $output;
}

function artwork_location_test() {
	$data_list = artwork_artist_begun_completed();
	foreach($data_list as $data) {
		dpm(array($data->artwork, $data->artist, $data->begun, $data->completed));
		dpm(locations_for_artwork_creation_date($data->artwork, $data->artist, $data->begun, $data->completed));
	}
}

/**
 * Finding locations for ceremony and award
 */
//locations_for_ceremony_award(NULL, '/m/05mf78')
//locations_for_ceremony_award('/m/02glmx', NULL)
function locations_for_ceremony_award($ceremony, $award) {
	if(empty($ceremony)) {
		$ceremony = NULL;
	}
	else {
		$ceremony = $ceremony[0];
	}
	if(empty($award)) {
		$award = NULL;
	}
	else {
		$award = $award[0];
	}
	
	$locations = array();
	$topic_name_pairs = array();
	if($ceremony) {
		//ceremony has a location
		$query = array(array(
  "mid"=> $ceremony,
  "name"=> null,
  "type"=> "/award/award_ceremony",
  "/time/event/locations"=> array(array(
    "mid"=> null,
    "name"=> null
  ))
));
		$resultarray = execute_mql_event_query($query);
		if(!empty($resultarray['result'][0]['/time/event/locations'])) {
			foreach($resultarray['result'][0]['/time/event/locations'] as $place) {
				$locations[] = $place['mid'];
				$topic_name_pairs[$place['mid']] = $place['name'];
			}
		}
	}
	if($award) {
		//presenting organisation is a location
		$query = array(array(
  "mid"=> $award,
  "name"=> null,
  "type"=> "/award/award",
  "/award/award_category/presenting_organization"=> array(array(
    "mid"=> null,
    "name"=> null,
    "type"=> "/location/location"
  ))
));
		$resultarray = execute_mql_event_query($query);
		if(!empty($resultarray['result'][0]['/award/award_category/presenting_organization'])) {
			foreach($resultarray['result'][0]['/award/award_category/presenting_organization'] as $place) {
				$locations[] = $place['mid'];
				$topic_name_pairs[$place['mid']] = $place['name'];
			}
		}
	}
	$locations = array_unique($locations);
	return array('locations'=>$locations, 'topic_name_pairs'=>$topic_name_pairs);	
}

/**
 * Finding locations for written work authorship
 */
//locations_for_authorship_date('/m/01xnj',NULL,'1904')
function locations_for_authorship_date($author, $from) {
	$locations = array();
	$topic_name_pairs = array();

	if($from) {
		//where was the author living at time of authorship?
		$query = array(array(
				"mid"=> $author,
				"type"=> "/people/person",
				"/people/person/places_lived"=> array(array(
						"location"=> array(
								"mid"=> null,
								"name"=>null
						),
						"start_date<="=> $from,
						"end_date>="=> $from
				))
		));

		$resultarray = execute_mql_event_query($query);

		if(!empty($resultarray['result'][0]['/people/person/places_lived'])) {
			foreach($resultarray['result'][0]['/people/person/places_lived'] as $place) {
				$locations[] = $place['location']['mid'];
				$topic_name_pairs[$place['location']['mid']] = $place['location']['name'];
			}
		}
	}

	//is the author of the written work a location?
	$query = array(array(
			"mid"=> $author,
	  "name"=> null,
			"type"=> "/location/location"
	));
	$resultarray = execute_mql_event_query($query);
	if(isset($resultarray['result'][0]['mid'])) {
		$locations[] = $resultarray['result'][0]['mid'];
		$topic_name_pairs[$resultarray['result'][0]['mid']] = $resultarray['result'][0]['name'];
	}
	$locations = array_unique($locations);
	return array('locations'=>$locations, 'topic_name_pairs'=>$topic_name_pairs);
}

/**
 * Finding locations for artwork ownership
 */
//locations_for_artwork_ownership_date('/m/01xnj',NULL,'1904')
function locations_for_artwork_ownership_date($owner, $from, $to) {
	$locations = array();
	$topic_name_pairs = array();
	if($from && !$to) {
		$to = $from;
	}
	elseif(!$from && $to) {
		$from = $to;
	}
	
	if($from && $to) {
		//where was the owner living at time of ownership?
		$query = array(array(
				"mid"=> $owner,
				"type"=> "/people/person",
				"/people/person/places_lived"=> array(array(
				    "location"=> array(
				      "mid"=> null,
				      "name"=>null
				    ),
				    "start_date<="=> $to,
				    "end_date>="=> $from
				))
		));
		
		$resultarray = execute_mql_event_query($query);

		if(!empty($resultarray['result'][0]['/people/person/places_lived'])) {
			foreach($resultarray['result'][0]['/people/person/places_lived'] as $place) {
				$locations[] = $place['location']['mid'];
				$topic_name_pairs[$place['location']['mid']] = $place['location']['name'];
			}
		}
	}
	
	//is the owner of the artwork a location?
	$query = array(array(
      "mid"=> $owner,
	  "name"=> null,
      "type"=> "/location/location"
));
	$resultarray = execute_mql_event_query($query);
	if(isset($resultarray['result'][0]['mid'])) {
		$locations[] = $resultarray['result'][0]['mid'];
		$topic_name_pairs[$resultarray['result'][0]['mid']] = $resultarray['result'][0]['name'];
	}
	$locations = array_unique($locations);
	return array('locations'=>$locations, 'topic_name_pairs'=>$topic_name_pairs);
}

/**
 * Finding locations for artwork creation
 */
//locations_for_artwork_creation_date('/m/025dvlv','/m/01xnj',NULL,'1904')
function locations_for_artwork_creation_date($artwork, $artist, $from, $to) {
	$locations = array();
	$topic_name_pairs = array();
	if($from && !$to) {
		$to = $from;
	}
	elseif(!$from && $to) {
		$from = $to;
	}
	
	if($from && $to) {
		//where was the artist living at the time of object creation?
		$query = array(array(
	  "mid"=> $artist,
	  "name"=> null,
	  "/people/person/places_lived"=> array(array(
	    "location"=> array(
	      "mid"=> null,
	      "name"=>null
	    ),
	    "start_date<="=> $to,
	    "end_date>="=> $from
	  ))
	));
		$resultarray = execute_mql_event_query($query);

		if(!empty($resultarray['result'][0]['/people/person/places_lived'])) {
			foreach($resultarray['result'][0]['/people/person/places_lived'] as $place) {
				$locations[] = $place['location']['mid'];
				$topic_name_pairs[$place['location']['mid']] = $place['location']['name'];
			}
		}
		
		//is the object location known for its creation date?
		$query = array(array(
				"mid"=> $artwork,
				"name"=> null,
				"/visual_art/artwork/locations"=> array(array(
						"location"=> array(
								"mid"=> null,
								"name"=>null
						),
						"from<="=> $to,
						"to>="=> $from
				))
		));
		$resultarray = execute_mql_event_query($query);
		if(!empty($resultarray['result'][0]['/visual_art/artwork/locations'])) {
			foreach($resultarray['result'][0]['/visual_art/artwork/locations'] as $place) {
				$locations[] = $place['location']['mid'];
				$topic_name_pairs[$place['location']['mid']] = $place['location']['name'];
			}
		}
	}
	
	//is the subject of the artwork a location?
	$query = array(array(
  "mid"=> $artwork,
  "name"=> null,
  "/visual_art/artwork/art_subject"=> array(array(
    "mid"=> null,
    "type"=> "/location/location",
  	"name"=>null
  ))
));
	$resultarray = execute_mql_event_query($query);
	if(!empty($resultarray['result'][0]['/visual_art/artwork/art_subject'])) {
		foreach($resultarray['result'][0]['/visual_art/artwork/art_subject'] as $place) {
			$locations[] = $place['mid'];
			$topic_name_pairs[$place['mid']] = $place['name'];
		}
	}		
	$locations = array_unique($locations);
	return array('locations'=>$locations, 'topic_name_pairs'=>$topic_name_pairs);
}

/**
 * retrieve creation data of an object
 */
function fb_artwork_created($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "name"=> null,"mid"=> $topic,
  "type"=> "/visual_art/artwork",
  "/visual_art/artwork/artist"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/art_subject"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/date_begun"=> null,
  "/visual_art/artwork/date_completed"=> null,
  "/visual_art/artwork/art_form"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/art_genre"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
//   "/visual_art/artwork/media"=> array(array(
//     "name"=> null,"mid"=> null,
//     "optional"=> "optional"
//   )),
//   "/visual_art/artwork/support"=> array(array(
//     "name"=> null,"mid"=> null,
//     "optional"=> "optional"
//   )),
  "/visual_art/artwork/period_or_movement"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/locations"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/owners"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/editions"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/edition_of"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
  "/visual_art/artwork/belongs_to_series"=> array(array(
    "name"=> null,"mid"=> null,
    "optional"=> "optional"
  )),
	"/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
		"name"=> null,"mid"=> null,
		"optional"=> "optional"
	))
));
	
	$resultarray = execute_mql_event_query($query);
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();
	foreach($resultarray["result"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		$output[$result["mid"]]["/exhibitions/exhibit/exhibitions_displayed_in"] = get_values($result["/exhibitions/exhibit/exhibitions_displayed_in"]);
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
// 		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
// 		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 				get_values($result["/visual_art/artwork/art_genre"]),
// 				get_values($result["/visual_art/artwork/media"]),
// 				get_values($result["/visual_art/artwork/support"]),
// 				get_values($result["/visual_art/artwork/period_or_movement"]),
// // 		removed because a pointer to a connecting node
// // 				get_values($result["/visual_art/artwork/locations"]),
// // 				get_values($result["/visual_art/artwork/owners"]),
// 				get_values($result["/visual_art/artwork/editions"]),
// 				get_values($result["/visual_art/artwork/edition_of"]),
// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
// 				check_array_is_returned($result["mid"]));
	
		//add inferred locations for artwork creation
		$location_result = locations_for_artwork_creation_date($output[$result["mid"]]["/visual_art/artwork"][0], $output[$result["mid"]]["/visual_art/artwork/artist"][0], $output[$result["mid"]]["/visual_art/artwork/date_begun"], $output[$result["mid"]]["/visual_art/artwork/date_completed"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series","/exhibitions/exhibit/exhibitions_displayed_in"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
	
}

/**
 * Retrieve location history of an object
 */
function fb_artwork_located($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "type"=> "/visual_art/artwork",
  "/visual_art/artwork/locations"=> array(array(
    "mid"=> null,
    "/visual_art/artwork_location_relationship/artwork"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_location_relationship/location"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_location_relationship/from"=> null,
    "/visual_art/artwork_location_relationship/to"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();
	foreach($resultarray["result"][0]["/visual_art/artwork/locations"] as $result) {
		$output[$result["mid"]]["activity"] = "object_location";
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/location"] = $result["/visual_art/artwork_location_relationship/location"]["mid"];
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/from"] = $result["/visual_art/artwork_location_relationship/from"];
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/to"] = $result["/visual_art/artwork_location_relationship/to"];
		$output[$result["mid"]]["/visual_art/artwork_location_relationship/artwork"] = check_array_is_returned($result["/visual_art/artwork_location_relationship/artwork"]["mid"]);

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork_location_relationship/artwork","/visual_art/artwork_location_relationship/location"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);

	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));

}

/**
 * Retrieve ownership history of an object
 */
function fb_object_owned($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/visual_art/artwork/owners"=> array(array(
    "mid"=> null,
    "/visual_art/artwork_owner_relationship/owner"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/artwork"=> array(
      "name"=> null,"mid"=> null
    ),
    "/visual_art/artwork_owner_relationship/date_acquired"=> array(
      "value"=> null,
      "optional"=> "optional"
    ),
    "/visual_art/artwork_owner_relationship/last_date_owned"=> array(
      "value"=> null,
      "optional"=> "optional"
    )
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();
	
	foreach($resultarray["result"][0]["/visual_art/artwork/owners"] as $result) {
		$output[$result["mid"]]["activity"] = "object_ownership";
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/owner"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/owner"]["mid"]);
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/date_acquired"] = $result["/visual_art/artwork_owner_relationship/date_acquired"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/last_date_owned"] = $result["/visual_art/artwork_owner_relationship/last_date_owned"]["value"];
		$output[$result["mid"]]["/visual_art/artwork_owner_relationship/artwork"] = check_array_is_returned($result["/visual_art/artwork_owner_relationship/artwork"]["mid"]);

		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork_owner_relationship/owner","/visual_art/artwork_owner_relationship/artwork"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add inferred locations for artwork creation
		$location_result = locations_for_artwork_ownership_date($output[$result["mid"]]["/visual_art/artwork_owner_relationship/owner"][0], $output[$result["mid"]]["/visual_art/artwork_owner_relationship/date_acquired"], $output[$result["mid"]]["/visual_art/artwork_owner_relationship/last_date_owned"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}

	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve nomination history of an object
 */
function fb_object_award_nominated_work($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/award/award_nominated_work/award_nominations"=> array(array(
    "mid"=> null,
    "/award/award_nomination/year"=> array(
      "value"=> null
    ),
    "/award/award_nomination/award"=> array(
      "name"=> null,"mid"=> null
    ),
    "/award/award_nomination/nominated_for"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/award_nominee"=> array(array(
      "name"=> null,"mid"=> null
    )),
    "/award/award_nomination/ceremony"=> array(array(
      "name"=> null,"mid"=> null
    ))
  ))
));
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_nominated_work/award_nominations"] as $result) {
		$output[$result["mid"]]["activity"] = "award_nomination";
		$output[$result["mid"]]["/award/award_nomination/award_nominee"] = get_values($result["/award/award_nomination/award_nominee"]);
		$output[$result["mid"]]["/award/award_nomination/year"] = $result["/award/award_nomination/year"]["value"];
				
		$output[$result["mid"]]["/award/award_nomination/award"] = check_array_is_returned($result["/award/award_nomination/award"]["mid"]);
		$output[$result["mid"]]["/award/award_nomination/nominated_for"] = get_values($result["/award/award_nomination/nominated_for"]);
		$output[$result["mid"]]["/award/award_nomination/ceremony"] = get_values($result["/award/award_nomination/ceremony"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(check_array_is_returned($result["/award/award_nomination/award"]["mid"]),
// 				get_values($result["/award/award_nomination/nominated_for"]),
// 				get_values($result["/award/award_nomination/ceremony"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_nomination/award","/award/award_nomination/nominated_for","/award/award_nomination/award_nominee","/award/award_nomination/ceremony"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add locations for award or ceremony
		$location_result = locations_for_ceremony_award($output[$result["mid"]]["/award/award_nomination/ceremony"], $output[$result["mid"]]["/award/award_nomination/award"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve award history of an object
 */
function fb_object_award_winning_work($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/award/award_winning_work/awards_won"=> array(array(
					"mid"=> null,
					"/award/award_honor/year"=> null,
					"/award/award_honor/award"=> array(
							"name"=> null,"mid"=> null
					),
					"/award/award_honor/honored_for"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/award/award_honor/award_winner"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_honor/ceremony"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					),
					"/award/award_honor/achievement_level"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_winning_work/awards_won"] as $result) {
		$output[$result["mid"]]["activity"] = "award_won";
		$output[$result["mid"]]["/award/award_honor/award_winner"] = get_values($result["/award/award_honor/award_winner"]);
		$output[$result["mid"]]["/award/award_honor/year"] = $result["/award/award_honor/year"];
		
		$output[$result["mid"]]["/award/award_honor/award"] = check_array_is_returned($result["/award/award_honor/award"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/honored_for"] = get_values($result["/award/award_honor/honored_for"]);
		$output[$result["mid"]]["/award/award_honor/ceremony"] = check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/achievement_level"] = check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]);
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(check_array_is_returned($result["/award/award_honor/award"]["mid"]),
// 				get_values($result["/award/award_honor/honored_for"]),
// 				check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]),
// 				check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_honor/award","/award/award_honor/honored_for","/award/award_honor/award_winner","/award/award_honor/ceremony","/award/award_honor/achievement_level"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add locations for award or ceremony
		$location_result = locations_for_ceremony_award($output[$result["mid"]]["/award/award_honor/ceremony"], $output[$result["mid"]]["/award/award_honor/award"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve exhibition history of an object// no date info
 */
function fb_object_exhibited($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
  	"mid"=> null,"name"=> null,
  		"/exhibitions/exhibition/produced_by"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/venues"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
//   		"/exhibitions/exhibition/exhibition_types"=> array(array(
//   				"name"=> null,"mid"=> null,
//   				"optional"=> "optional"
//   		)),
  		"/exhibitions/exhibition/exhibits"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/curators"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		)),
  		"/exhibitions/exhibition/subjects"=> array(array(
  				"name"=> null,"mid"=> null,
  				"optional"=> "optional"
  		))
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibit/exhibitions_displayed_in"] as $result) {
		$output[$result["mid"]]["activity"] = "exhibition_creation";

		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
		// 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
		// 				get_values($result["/exhibitions/exhibition/curators"]));
		
// 		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(
		// // 		removed because a pointer to a connecting node
		// // 				get_values($result["/exhibitions/exhibition/venues"]),
		// 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
		// 				get_values($result["/exhibitions/exhibition/exhibits"]),
		// 				get_values($result["/exhibitions/exhibition/subjects"]),
		// 				check_array_is_returned($result["mid"]));

		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve exhibition data for topic that is an exhibition// no date info
*/
//fb_exhibition_production_of_the_exhibition("/m/052tvg1")
//fb_exhibition_production_of_the_exhibition
function fb_exhibition_production_of_the_exhibition($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition/produced_by"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  )),
//     "/exhibitions/exhibition/exhibition_types"=> array(array(
//       "name"=> null,"mid"=> null,
//       "optional"=> "optional"
//     )),
    "/exhibitions/exhibition/exhibits"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/curators"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
    "/exhibitions/exhibition/subjects"=> array(array(
      "name"=> null,"mid"=> null,
      "optional"=> "optional"
    )),
	"/exhibitions/exhibition/venues"=> array(array(
		"mid"=> null,
		"/exhibitions/exhibition_run/venue"=> array(
			"name"=> null,
			"mid"=> null
		),
		"/exhibitions/exhibition_run/opened_on"=> null,
		"/exhibitions/exhibition_run/closed_on"=> null,
		"optional"=> "optional"
	)),
 ));
	
	//
	$resultarray = execute_mql_event_query($query);
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	
	$topic_name_pairs = array();
	//list of exhibitions
	foreach($resultarray["result"] as $exhibition) {
		//find out if exhibition with venue
		if(empty($exhibition['/exhibitions/exhibition/venues'])) {
			$key = $exhibition['mid'];
	
			//if non-venue exhibition
			$output[$key]["activity"] = "exhibition_creation";
			$output[$key]["/exhibitions/exhibition/produced_by"] = get_values($exhibition["/exhibitions/exhibition/produced_by"]);
			$output[$key]["/exhibitions/exhibition/curators"] = get_values($exhibition["/exhibitions/exhibition/curators"]);
// 			$output[$key]["/exhibitions/exhibition/exhibition_types"] = get_values($exhibition["/exhibitions/exhibition/exhibition_types"]);
			$output[$key]["/exhibitions/exhibition/exhibits"] = get_values($exhibition["/exhibitions/exhibition/exhibits"]);
			$output[$key]["/exhibitions/exhibition/subjects"] = get_values($exhibition["/exhibitions/exhibition/subjects"]);
			$output[$key]["/exhibitions/exhibition"] = check_array_is_returned($exhibition["mid"]);
				
			$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$exhibition,$topic_name_pairs);
			$topic_name_pairs = add_top_level_pair($exhibition, $topic_name_pairs);
	
		}
		else {
			foreach($exhibition['/exhibitions/exhibition/venues'] as $venue) {
				$key = $venue['mid'];
	
				//details of the exhibition
				$output[$key]["activity"] = "exhibition_creation";
				$output[$key]["/exhibitions/exhibition/produced_by"] = get_values($exhibition["/exhibitions/exhibition/produced_by"]);
				$output[$key]["/exhibitions/exhibition/curators"] = get_values($exhibition["/exhibitions/exhibition/curators"]);
// 				$output[$key]["/exhibitions/exhibition/exhibition_types"] = get_values($exhibition["/exhibitions/exhibition/exhibition_types"]);
				$output[$key]["/exhibitions/exhibition/exhibits"] = get_values($exhibition["/exhibitions/exhibition/exhibits"]);
				$output[$key]["/exhibitions/exhibition/subjects"] = get_values($exhibition["/exhibitions/exhibition/subjects"]);
				$output[$key]["/exhibitions/exhibition"] = check_array_is_returned($exhibition["mid"]);
	
				//details of the exhibition run
				$output[$key]["/exhibitions/exhibition_run/opened_on"] = $venue["/exhibitions/exhibition_run/opened_on"];
				$output[$key]["/exhibitions/exhibition_run/closed_on"] = $venue["/exhibitions/exhibition_run/closed_on"];
				$output[$key]["/exhibitions/exhibition_run/venue"] = check_array_is_returned($venue["/exhibitions/exhibition_run/venue"]["mid"]);
	
	
			}
			$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$exhibition,$topic_name_pairs);
			$topic_name_pairs = add_top_level_pair($exhibition, $topic_name_pairs);
				
		}
	}
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
	
	
	
	//
// 	$resultarray = execute_mql_event_query($query);

// 	$output = array();
// 	if(!isset($resultarray["result"][0])) {
// 		return $previous_output;
// 	}
// 	$topic_event_links = array();
// 	$topic_name_pairs = array();
	
// 	foreach($resultarray["result"] as $result) {

// 		$output[$result["mid"]]["activity"] = "exhibition_creation";
// 		$output[$result["mid"]]["/exhibitions/exhibition/produced_by"] = get_values($result["/exhibitions/exhibition/produced_by"]);
// 		$output[$result["mid"]]["/exhibitions/exhibition/curators"] = get_values($result["/exhibitions/exhibition/curators"]);
// // 		array_merge(get_values($result["/exhibitions/exhibition/produced_by"]),
// // 				get_values($result["/exhibitions/exhibition/curators"]));
		
// 		$output[$result["mid"]]["/exhibitions/exhibition/exhibition_types"] = get_values($result["/exhibitions/exhibition/exhibition_types"]);
// 		$output[$result["mid"]]["/exhibitions/exhibition/exhibits"] = get_values($result["/exhibitions/exhibition/exhibits"]);
// 		$output[$result["mid"]]["/exhibitions/exhibition/subjects"] = get_values($result["/exhibitions/exhibition/subjects"]);
// 		$output[$result["mid"]]["/exhibitions/exhibition"] = check_array_is_returned($result["mid"]);
		
// // 		$output[$result["mid"]]["tags"] =
// // 		array_merge(
// // // 		removed because a pointer to a connecting node
// // // 				get_values($result["/exhibitions/exhibition/venues"]),
// // 				get_values($result["/exhibitions/exhibition/exhibition_types"]),
// // 				get_values($result["/exhibitions/exhibition/exhibits"]),
// // 				get_values($result["/exhibitions/exhibition/subjects"]),
// // 				check_array_is_returned($result["mid"]));
		
// 		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venues","/exhibitions/exhibition/exhibition_types","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$result,$topic_name_pairs);
// 		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
// 		$topic_event_links[] = array($topic, 'Exhibition creation details', $result["mid"]);

// 	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
		
}

/**
 * Retrieve exhibition run data for topic that is an exhibition - no longer needed
*/
function fb_exhibition_held_at_venue($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {

	$query = array(array(
  "mid"=> $topic,
  "/exhibitions/exhibition/venues"=> array(array(
    "mid"=> null,
    "/exhibitions/exhibition_run/exhibition"=> array(
      "name"=> null,"mid"=> null
    ),
    "/exhibitions/exhibition_run/venue"=> array(
      "name"=> null,"mid"=> null
    ),
    "/exhibitions/exhibition_run/opened_on"=> null,
    "/exhibitions/exhibition_run/closed_on"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();
	
	foreach($resultarray["result"][0]["/exhibitions/exhibition/venues"] as $result) {
		
		$output[$result["mid"]]["activity"] = "exhibition_run";
		$output[$result["mid"]]["/exhibitions/exhibition_run/opened_on"] = $result["/exhibitions/exhibition_run/opened_on"];
		$output[$result["mid"]]["/exhibitions/exhibition_run/closed_on"] = $result["/exhibitions/exhibition_run/closed_on"];		
// 		$output[$result["mid"]]["tags"] = array_merge(check_array_is_returned($result["/exhibitions/exhibition_run/exhibition"]["mid"]),
// 						check_array_is_returned($result["/exhibitions/exhibition_run/venue"]["mid"]));
		$output[$result["mid"]]["/exhibitions/exhibition_run/venue"] = check_array_is_returned($result["/exhibitions/exhibition_run/venue"]["mid"]);
		$output[$result["mid"]]["/exhibitions/exhibition_run/exhibition"] = check_array_is_returned($result["/exhibitions/exhibition_run/exhibition"]["mid"]);
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition_run/exhibition","/exhibitions/exhibition_run/venue"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	}
	

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve object creation data for topic that is an exhibition
*/
function fb_exhibition_creation_of_object($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/exhibitions/exhibition/exhibits"=> array(array(
				      "name"=> null,
				      "mid"=> null,
				    "/visual_art/artwork/artist"=> array(array(
				      "name"=> null,
				      "mid"=> null,
				 //     "optional"=> "optional"
				    )),
				    "/visual_art/artwork/art_subject"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "mid"=> null,
				    "/visual_art/artwork/date_begun"=> null,
				    "/visual_art/artwork/date_completed"=> null,
				    "/visual_art/artwork/art_form"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/art_genre"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
// 				    "/visual_art/artwork/media"=> array(array(
// 				      "name"=> null,"mid"=> null,
// 				      "optional"=> "optional"
// 				    )),
// 				    "/visual_art/artwork/support"=> array(array(
// 				      "name"=> null,"mid"=> null,
// 				      "optional"=> "optional"
// 				    )),
				    "/visual_art/artwork/period_or_movement"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/locations"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/owners"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/editions"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/edition_of"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
				    "/visual_art/artwork/belongs_to_series"=> array(array(
				      "name"=> null,"mid"=> null,
				      "optional"=> "optional"
				    )),
					"/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)) 
			))
	));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition/exhibits"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		$output[$result["mid"]]["/exhibitions/exhibit/exhibitions_displayed_in"] = get_values($result["/exhibitions/exhibit/exhibitions_displayed_in"]);
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
// 		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
// 		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
		// 				get_values($result["/visual_art/artwork/art_genre"]),
		// 				get_values($result["/visual_art/artwork/media"]),
		// 				get_values($result["/visual_art/artwork/support"]),
		// 				get_values($result["/visual_art/artwork/period_or_movement"]),
		// // 		removed because a pointer to a connecting node
		// // 				get_values($result["/visual_art/artwork/locations"]),
		// // 				get_values($result["/visual_art/artwork/owners"]),
		// 				get_values($result["/visual_art/artwork/editions"]),
		// 				get_values($result["/visual_art/artwork/edition_of"]),
		// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
		// 				check_array_is_returned($result["mid"]));
		
		//add inferred locations for artwork creation
		$location_result = locations_for_artwork_creation_date($output[$result["mid"]]["/visual_art/artwork"][0], $output[$result["mid"]]["/visual_art/artwork/artist"][0], $output[$result["mid"]]["/visual_art/artwork/date_begun"], $output[$result["mid"]]["/visual_art/artwork/date_completed"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
		
		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series","/exhibitions/exhibit/exhibitions_displayed_in"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);

	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve exhibition data for topic that is an exhibition venue
*/
function fb_venue_of_exhibitions($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "name"=> null,
  "/exhibitions/exhibition_venue/exhibitions_at_this_venue"=> array(array(
    "mid"=> null,
    "/exhibitions/exhibition_run/exhibition"=> array(
      "name"=> null,
      "mid"=> null,
      "/exhibitions/exhibition/produced_by"=> array(array(
        "name"=> null,
        "mid"=> null,
        "optional"=> "optional"
      )),
//       "/exhibitions/exhibition/exhibition_types"=> array(array(
//         "name"=> null,
//         "mid"=> null,
//         "optional"=> "optional"
//       )),
      "/exhibitions/exhibition/exhibits"=> array(array(
        "name"=> null,
        "mid"=> null,
        "optional"=> "optional"
      )),
      "/exhibitions/exhibition/curators"=> array(array(
        "name"=> null,
        "mid"=> null,
        "optional"=> "optional"
      )),
      "/exhibitions/exhibition/subjects"=> array(array(
        "name"=> null,
        "mid"=> null,
        "optional"=> "optional"
      ))
    ),
    "/exhibitions/exhibition_run/venue"=> array(
      "name"=> null,
      "mid"=> null
    ),
    "/exhibitions/exhibition_run/opened_on"=> null,
    "/exhibitions/exhibition_run/closed_on"=> null
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/exhibitions/exhibition_venue/exhibitions_at_this_venue"] as $venue) {
		$venue_key = $venue["mid"];
	
		$output[$venue_key]["activity"] = "exhibition_creation";
		$output[$venue_key]["/exhibitions/exhibition_run/opened_on"] = $venue["/exhibitions/exhibition_run/opened_on"];
		$output[$venue_key]["/exhibitions/exhibition_run/closed_on"] = $venue["/exhibitions/exhibition_run/closed_on"];		
		$output[$venue_key]["/exhibitions/exhibition_run/venue"] = check_array_is_returned($venue["/exhibitions/exhibition_run/venue"]["mid"]);
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition_run/exhibition","/exhibitions/exhibition_run/venue"),$venue,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($venue, $topic_name_pairs);
		
		$exhibition = $venue["/exhibitions/exhibition_run/exhibition"];
		$output[$venue_key]["/exhibitions/exhibition/produced_by"] = get_values($exhibition["/exhibitions/exhibition/produced_by"]);
		$output[$venue_key]["/exhibitions/exhibition/curators"] = get_values($exhibition["/exhibitions/exhibition/curators"]);
// 		$output[$venue_key]["/exhibitions/exhibition/exhibition_types"] = get_values($exhibition["/exhibitions/exhibition/exhibition_types"]);
		$output[$venue_key]["/exhibitions/exhibition/exhibits"] = get_values($exhibition["/exhibitions/exhibition/exhibits"]);
		$output[$venue_key]["/exhibitions/exhibition/subjects"] = get_values($exhibition["/exhibitions/exhibition/subjects"]);
		$output[$venue_key]["/exhibitions/exhibition"] = check_array_is_returned($exhibition["mid"]);
		
		$topic_name_pairs = get_topic_name_pairs(array("/exhibitions/exhibition/produced_by","/exhibitions/exhibition/venue","/exhibitions/exhibition/exhibits","/exhibitions/exhibition/curators","/exhibitions/exhibition/subjects"),$exhibition,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($exhibition, $topic_name_pairs);
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve winner data for topic that is an award
*/
function fb_award_having_prize_winner($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/award/award_category/winners"=> array(array(
					"mid"=> null,
					"/award/award_honor/year"=> null,
					"/award/award_honor/award"=> array(
							"name"=> null,"mid"=> null
					),
					"/award/award_honor/honored_for"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/award/award_honor/award_winner"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_honor/ceremony"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					),
					"/award/award_honor/achievement_level"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)
			))
	));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_category/winners"] as $result) {
		$output[$result["mid"]]["activity"] = "award_won";
		$output[$result["mid"]]["/award/award_honor/award_winner"] = get_values($result["/award/award_honor/award_winner"]);
		$output[$result["mid"]]["/award/award_honor/year"] = $result["/award/award_honor/year"];
		
		$output[$result["mid"]]["/award/award_honor/award"] = check_array_is_returned($result["/award/award_honor/award"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/honored_for"] = get_values($result["/award/award_honor/honored_for"]);
		$output[$result["mid"]]["/award/award_honor/ceremony"] = check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]);
		$output[$result["mid"]]["/award/award_honor/achievement_level"] = check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]);
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(check_array_is_returned($result["/award/award_honor/award"]["mid"]),
		// 				get_values($result["/award/award_honor/honored_for"]),
		// 				check_array_is_returned($result["/award/award_honor/ceremony"]["mid"]),
		// 				check_array_is_returned($result["/award/award_honor/achievement_level"]["mid"]));
		
		$topic_name_pairs = get_topic_name_pairs(array("/award/award_honor/award","/award/award_honor/honored_for","/award/award_honor/award_winner","/award/award_honor/ceremony","/award/award_honor/achievement_level"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add locations for award or ceremony
		$location_result = locations_for_ceremony_award($output[$result["mid"]]["/award/award_honor/ceremony"], $output[$result["mid"]]["/award/award_honor/award"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
	
	}

	
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve nominee data for topic that is an award
*/
function fb_award_having_nominee($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/award/award_category/nominees"=> array(array(
					"mid"=> null,
					"/award/award_nomination/year"=> array(
							"value"=> null
					),
					"/award/award_nomination/award"=> array(
							"name"=> null,"mid"=> null
					),
					"/award/award_nomination/nominated_for"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_nomination/award_nominee"=> array(array(
							"name"=> null,"mid"=> null
					)),
					"/award/award_nomination/ceremony"=> array(array(
							"name"=> null,"mid"=> null
					))
			))
	));
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/award/award_category/nominees"] as $result) {
		$output[$result["mid"]]["activity"] = "award_nomination";
		$output[$result["mid"]]["/award/award_nomination/award_nominee"] = get_values($result["/award/award_nomination/award_nominee"]);
		$output[$result["mid"]]["/award/award_nomination/year"] = $result["/award/award_nomination/year"]["value"];
		
		$output[$result["mid"]]["/award/award_nomination/award"] = check_array_is_returned($result["/award/award_nomination/award"]["mid"]);
		$output[$result["mid"]]["/award/award_nomination/nominated_for"] = get_values($result["/award/award_nomination/nominated_for"]);
		$output[$result["mid"]]["/award/award_nomination/ceremony"] = get_values($result["/award/award_nomination/ceremony"]);
		
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(check_array_is_returned($result["/award/award_nomination/award"]["mid"]),
		// 				get_values($result["/award/award_nomination/nominated_for"]),
		// 				get_values($result["/award/award_nomination/ceremony"]));
		

		$topic_name_pairs = get_topic_name_pairs(array("/award/award_nomination/award","/award/award_nomination/nominated_for","/award/award_nomination/award_nominee","/award/award_nomination/ceremony"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add locations for award or ceremony
		$location_result = locations_for_ceremony_award($output[$result["mid"]]["/award/award_nomination/ceremony"], $output[$result["mid"]]["/award/award_nomination/award"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve graduation data for topic that is an educational institution
*/
function fb_institution_having_graduates($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/education/educational_institution/students_graduates"=> array(array(
					"mid"=> null,
					"/education/education/student"=> array(
							"name"=> null,"mid"=> null
					),
					"/education/education/institution"=> array(
							"name"=> null,"mid"=> null,
							"type"=> array(array(
									"id"=> "/location/location",
									"optional"=> "optional"
							))
					),
					"/education/education/start_date"=> array(
							"value"=> null,
							"optional"=> "optional"
					),
					"/education/education/end_date"=> array(
							"value"=> null,
							"optional"=> "optional"
					),
					"/education/education/degree"=> array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					),
					"/education/education/major_field_of_study"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/education/education/specialization"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/education/education/minor"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					))
			))
	));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/education/educational_institution/students_graduates"] as $result) {
		
		if(isset($result["/education/education/institution"]["type"][0])) {
			$output[$result["mid"]]['location'] = check_array_is_returned($result["/education/education/institution"]["mid"]);
		}
		
		$output[$result["mid"]]["activity"] = "education";
		$output[$result["mid"]]["/education/education/student"] = $result["/education/education/student"]["mid"];
		$output[$result["mid"]]["/education/education/institution"] = $result["/education/education/institution"]["mid"];
		$output[$result["mid"]]["/education/education/start_date"] = $result["/education/education/start_date"]["value"];
		$output[$result["mid"]]["/education/education/end_date"] = $result["/education/education/end_date"]["value"];
		
		$output[$result["mid"]]["/education/education/degree"] = check_array_is_returned($result["/education/education/degree"]["mid"]);
		$output[$result["mid"]]["/education/education/specialization"] = get_values($result["/education/education/specialization"]);
		$output[$result["mid"]]["/education/education/minor"] = get_values($result["/education/education/minor"]);
		
		// 		$output[$result["mid"]]["tags"] = array_merge(check_array_is_returned($result["/education/education/degree"]["mid"]),
		// 			get_values($result["/education/education/specialization"]),
		// 			get_values($result["/education/education/minor"]));
	
	$topic_name_pairs = get_topic_name_pairs(array('/education/education/student','/education/education/institution','/education/education/degree','/education/education/specialization','/education/education/minor'),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
	
}

/**
 * Retrieve membership data for topic that is an organisation
*/
function fb_organisation_having_members($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,		
  "/organization/membership_organization/members"=> array(array(
    "mid"=> null,
    "/organization/organization_membership/member"=> array(
      "name"=> null,"mid"=> null
    ),
    "/organization/organization_membership/organization"=> array(
      "name"=> null,"mid"=> null,
    		"type"=> array(array(
    				"id"=> "/location/location",
    				"optional"=> "optional"
    		)),
    ),
    "/organization/organization_membership/from"=> array(
      "value"=> null
    ),
    "/organization/organization_membership/to"=> array(
      "value"=> null
    )
  ))
));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/organization/membership_organization/members"] as $result) {
		
		if(isset($result["/organization/organization_membership/organization"]["type"][0])) {
			$output[$result["mid"]]['location'] = check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]);
		}
		
		$output[$result["mid"]]["activity"] = "organization_membership";
		$output[$result["mid"]]["/organization/organization_membership/member"] = check_array_is_returned($result["/organization/organization_membership/member"]["mid"]);
		$output[$result["mid"]]["/organization/organization_membership/organization"] = check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]);
// 		array_merge(check_array_is_returned($result["/organization/organization_membership/member"]["mid"]),
// 				check_array_is_returned($result["/organization/organization_membership/organization"]["mid"]));
		$output[$result["mid"]]["/organization/organization_membership/from"] = $result["/organization/organization_membership/from"];
		$output[$result["mid"]]["/organization/organization_membership/to"] = $result["/organization/organization_membership/to"];
			
	$topic_name_pairs = get_topic_name_pairs(array("/organization/organization_membership/member","/organization/organization_membership/organization"),$result,$topic_name_pairs);
	$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	}
	

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
	
}

/**
 * Retrieve object creation data for topic that is an art period or movement
*/
function fb_topic_artwork_subject($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/visual_art/art_subject/artwork_on_the_subject"=> array(array(
					"name"=> null,
					"mid"=> null,
					"/visual_art/artwork/artist"=> array(array(
							"name"=> null,
							"mid"=> null,
							//     "optional"=> "optional"
					)),
					"/visual_art/artwork/art_subject"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"mid"=> null,
					"/visual_art/artwork/date_begun"=> null,
					"/visual_art/artwork/date_completed"=> null,
					"/visual_art/artwork/art_form"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/art_genre"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
// 					"/visual_art/artwork/media"=> array(array(
// 							"name"=> null,"mid"=> null,
// 							"optional"=> "optional"
// 					)),
// 					"/visual_art/artwork/support"=> array(array(
// 							"name"=> null,"mid"=> null,
// 							"optional"=> "optional"
// 					)),
					"/visual_art/artwork/period_or_movement"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/locations"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/owners"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/editions"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/edition_of"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/belongs_to_series"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					))
			))
	));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();

	foreach($resultarray["result"][0]["/visual_art/art_subject/artwork_on_the_subject"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		$output[$result["mid"]]["/exhibitions/exhibit/exhibitions_displayed_in"] = get_values($result["/exhibitions/exhibit/exhibitions_displayed_in"]);
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
// 		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
// 		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
			
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 				get_values($result["/visual_art/artwork/art_genre"]),
// 				get_values($result["/visual_art/artwork/media"]),
// 				get_values($result["/visual_art/artwork/support"]),
// 				get_values($result["/visual_art/artwork/period_or_movement"]),
// // 				get_values($result["/visual_art/artwork/locations"]),
// // 				get_values($result["/visual_art/artwork/owners"]),
// 				get_values($result["/visual_art/artwork/editions"]),
// 				get_values($result["/visual_art/artwork/edition_of"]),
// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
// 				check_array_is_returned($result["mid"]));
	
		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series","/exhibitions/exhibit/exhibitions_displayed_in"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
		
		//add inferred locations for artwork creation
		$location_result = locations_for_artwork_creation_date($output[$result["mid"]]["/visual_art/artwork"][0], $output[$result["mid"]]["/visual_art/artwork/artist"][0], $output[$result["mid"]]["/visual_art/artwork/date_begun"], $output[$result["mid"]]["/visual_art/artwork/date_completed"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
	}

	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve object creation data for topic that is an art period or movement
*/
function fb_period_movement_creating_object($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
			"mid"=> $topic,
			"/visual_art/art_period_movement/associated_artworks"=> array(array(
					"name"=> null,
					"mid"=> null,
					"/visual_art/artwork/artist"=> array(array(
							"name"=> null,
							"mid"=> null,
							//     "optional"=> "optional"
					)),
					"/visual_art/artwork/art_subject"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"mid"=> null,
					"/visual_art/artwork/date_begun"=> null,
					"/visual_art/artwork/date_completed"=> null,
					"/visual_art/artwork/art_form"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/art_genre"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
// 					"/visual_art/artwork/media"=> array(array(
// 							"name"=> null,"mid"=> null,
// 							"optional"=> "optional"
// 					)),
// 					"/visual_art/artwork/support"=> array(array(
// 							"name"=> null,"mid"=> null,
// 							"optional"=> "optional"
// 					)),
					"/visual_art/artwork/period_or_movement"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/locations"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/owners"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/editions"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/edition_of"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/visual_art/artwork/belongs_to_series"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					)),
					"/exhibitions/exhibit/exhibitions_displayed_in"=> array(array(
							"name"=> null,"mid"=> null,
							"optional"=> "optional"
					))
			))
	));
	
	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();
	
	foreach($resultarray["result"][0]["/visual_art/art_period_movement/associated_artworks"] as $result) {
		$output[$result["mid"]]["activity"] = "object_creation";
		$output[$result["mid"]]["/visual_art/artwork/artist"] = get_values($result["/visual_art/artwork/artist"]);
		$output[$result["mid"]]["/visual_art/artwork/date_begun"] = $result["/visual_art/artwork/date_begun"];
		$output[$result["mid"]]["/visual_art/artwork/date_completed"] = $result["/visual_art/artwork/date_completed"];
		$output[$result["mid"]]["/exhibitions/exhibit/exhibitions_displayed_in"] = get_values($result["/exhibitions/exhibit/exhibitions_displayed_in"]);
		
		$output[$result["mid"]]["/visual_art/artwork/art_subject"] = get_values($result["/visual_art/artwork/art_subject"]);
		$output[$result["mid"]]["/visual_art/artwork/art_genre"] = get_values($result["/visual_art/artwork/art_genre"]);
// 		$output[$result["mid"]]["/visual_art/artwork/media"] = get_values($result["/visual_art/artwork/media"]);
// 		$output[$result["mid"]]["/visual_art/artwork/support"] = get_values($result["/visual_art/artwork/support"]);
		$output[$result["mid"]]["/visual_art/artwork/period_or_movement"] = get_values($result["/visual_art/artwork/period_or_movement"]);
		$output[$result["mid"]]["/visual_art/artwork/editions"] = get_values($result["/visual_art/artwork/editions"]);
		$output[$result["mid"]]["/visual_art/artwork/edition_of"] = get_values($result["/visual_art/artwork/edition_of"]);
		$output[$result["mid"]]["/visual_art/artwork/belongs_to_series"] = get_values($result["/visual_art/artwork/belongs_to_series"]);
		$output[$result["mid"]]["/visual_art/artwork"] = check_array_is_returned($result["mid"]);
		
		
// 		$output[$result["mid"]]["tags"] =
// 		array_merge(get_values($result["/visual_art/artwork/art_subject"]),
// 				get_values($result["/visual_art/artwork/art_genre"]),
// 				get_values($result["/visual_art/artwork/media"]),
// 				get_values($result["/visual_art/artwork/support"]),
// 				get_values($result["/visual_art/artwork/period_or_movement"]),
// 				// 				get_values($result["/visual_art/artwork/locations"]),
// 		// 				get_values($result["/visual_art/artwork/owners"]),
// 				get_values($result["/visual_art/artwork/editions"]),
// 				get_values($result["/visual_art/artwork/edition_of"]),
// 				get_values($result["/visual_art/artwork/belongs_to_series"]),
// 				check_array_is_returned($result["mid"]));
		
		//add inferred locations for artwork creation
		$location_result = locations_for_artwork_creation_date($output[$result["mid"]]["/visual_art/artwork"][0], $output[$result["mid"]]["/visual_art/artwork/artist"][0], $output[$result["mid"]]["/visual_art/artwork/date_begun"], $output[$result["mid"]]["/visual_art/artwork/date_completed"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
		
		$topic_name_pairs = get_topic_name_pairs(array("/visual_art/artwork/artist","/visual_art/artwork/art_subject","/visual_art/artwork/art_form","/visual_art/artwork/art_genre","/visual_art/artwork/period_or_movement","/visual_art/artwork/locations","/visual_art/artwork/owners","/visual_art/artwork/editions","/visual_art/artwork/edition_of","/visual_art/artwork/belongs_to_series","/exhibitions/exhibit/exhibitions_displayed_in"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));	
}

/**
 * Publication events of a period of movement
 */
function fb_period_movement_creating_publication($topic, $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/book/school_or_movement/associated_works"=> array(array(
    "name"=> null,
    "mid"=> null,
    "/book/written_work/author"=> array(array(
      "name"=> null,
      "mid"=> null
    )),
    "/book/written_work/editor"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/date_of_first_publication"=> null,
    "/book/written_work/subjects"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/school_or_movement"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/part_of_series"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/previous_in_series"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    )),
    "/book/written_work/next_in_series"=> array(array(
      "name"=> null,
      "mid"=> null,
      "optional"=> "optional"
    ))
  ))
));
	
	$resultarray = execute_mql_event_query($query);
	
	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}

	$topic_name_pairs = array();
	
	foreach($resultarray["result"][0]["/book/school_or_movement/associated_works"] as $result) {
		$output[$result["mid"]]["activity"] = "book_authoring";
		$output[$result["mid"]]["/book/written_work/author"] = get_values($result["/book/written_work/author"]);
		$output[$result["mid"]]["/book/written_work/editor"] = get_values($result["/book/written_work/editor"]);
	
		$output[$result["mid"]]["/book/written_work/date_of_first_publication"] = $result["/book/written_work/date_of_first_publication"];
	
		$output[$result["mid"]]["/book/written_work/school_or_movement"] = get_values($result["/book/written_work/school_or_movement"]);
		$output[$result["mid"]]["/book/written_work/part_of_series"] = get_values($result["/book/written_work/part_of_series"]);
		$output[$result["mid"]]["/book/written_work/previous_in_series"] = get_values($result["/book/written_work/previous_in_series"]);
		$output[$result["mid"]]["/book/written_work/next_in_series"] = get_values($result["/book/written_work/next_in_series"]);
		$output[$result["mid"]]["/book/written_work"] = check_array_is_returned($result["mid"]);
	
		// 		$output[$result["mid"]]["tags"] =
		// 		array_merge(get_values($result["/book/written_work/school_or_movement"]),
		// 				get_values($result["/book/written_work/part_of_series"]),
		// 				get_values($result["/book/written_work/previous_in_series"]),
		// 				get_values($result["/book/written_work/next_in_series"]),
		// 				check_array_is_returned($result["mid"]));
	
		$topic_name_pairs = get_topic_name_pairs(array("/book/written_work/author","/book/written_work/editor","/book/written_work/date_of_first_publication",
				"/book/written_work/school_or_movement","/book/written_work/part_of_series","/book/written_work/previous_in_series","/book/written_work/next_in_series"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);
	
		//add inferred locations for artwork creation
		$location_result = locations_for_authorship_date($output[$result["mid"]]["/book/written_work/author"][0], $output[$result["mid"]]["/book/written_work/date_of_first_publication"]);
		if(!empty($location_result['locations'])) {
			$output[$result["mid"]]['location'] = $location_result['locations'];
		}
		if(!empty($location_result['topic_name_pairs'])) {
			$topic_name_pairs = array_merge($topic_name_pairs,$location_result['topic_name_pairs']);
		}
	}
	
	return array("events"=>array_merge($output, $previous_output["events"]),
			"names"=>array_merge($topic_name_pairs, $previous_output["names"]));
}

/**
 * Retrieve data for topic that is an event
 */
function fb_event_happening_of_the_event($topic = '/m/03fyn', $previous_output = array("events"=>array(),"names"=>array(), "links"=>array())) {
	$query = array(array(
  "mid"=> $topic,
  "/time/event/start_date"=> null,
  "/time/event/end_date"=> null,
  "/time/event/locations"=> array(array(
    "mid"=> null,
    "name"=> null,
    "optional"=> "optional"
  )),
  "/time/event/people_involved"=> array(array(
    "mid"=> null,
    "name"=> null,
  	"optional"=> "optional"
  ))
));

	$resultarray = execute_mql_event_query($query);

	$output = array();
	if(!isset($resultarray["result"][0])) {
		return $previous_output;
	}
	$topic_name_pairs = array();

	foreach($resultarray["result"] as $result) {
		$notable_types = check_for_notable_types($result["mid"]);
		if(!empty($notable_types)) {
			$output[$result["mid"]]["activity"] = strtolower(str_replace(' ', '_',$notable_types["0"]));
		}
		else {
			$output[$result["mid"]]["activity"] = "event";
		}
		$output[$result["mid"]]["/time/event/people_involved"] = get_values($result["/time/event/people_involved"]);
		$output[$result["mid"]]["/time/event/start_date"] = $result["/time/event/start_date"];
		$output[$result["mid"]]["/time/event/end_date"] = $result["/time/event/end_date"];
		$output[$result["mid"]]["/time/event/locations"] = get_values($result["/time/event/locations"]);

		$topic_name_pairs = get_topic_name_pairs(array("/time/event/people_involved","/time/event/locations"),$result,$topic_name_pairs);
		$topic_name_pairs = add_top_level_pair($result, $topic_name_pairs);

	}

return array("events"=>array_merge($output, $previous_output["events"]),
		"names"=>array_merge($topic_name_pairs, $previous_output["names"]));	
}

/**
 * Check array is returned in freebase results
 */
function check_array_is_returned($item) {
	if(is_null($item)) {
		return array();
	}
	elseif(!is_array($item)) {
		return array($item);
	}
	else {
		return $item;
	}
}

/**
 * Check whether value string has the form of a freebase mid, i.e. /m/something
 */
function is_freebase_topic_id($topic) {
	return preg_match('/^\/m\//',$topic);
}

/**
 * Extract mid from freebase URI
 */
//e.g. http://freebase.com/m/0q245
function extract_mid_from_freebase_uri($uri) {
	$num = strpos($uri,"/m/");
	$mid = substr($uri,$num);
	if(is_freebase_topic_id($mid)) {
		return $mid;
	}
	else {
		return FALSE;
	}
}

/**
 * Calculate the event space for a topic
 */
function new_event_space_of_a_topic($topic = "/m/01qwfk", $reload = FALSE) {
	if(!is_freebase_topic_id($topic)) {
		return array();
	}
	check_for_topic_name($topic);
	check_for_topic_description($topic, FALSE, $reload);
	check_for_notable_types($topic);

	if(check_for_calculated_tag($topic) && !$reload) {
		$types = check_for_tag_types($topic);
		return $types;
	}
	
	//add container location relations
	containing_locations_of_a_location($topic);
	
//  tests
// 	person
// 	$topic = "/m/060_7"; //pablo picasso
// 	$topic = "/m/01qwfk"; //damien hirst (author)
// 	$topic = "/m/09_xn"; //salvador dali
// 	$topic = "/m/0kc6"; //warhol
// 	$topic = "/m/0265rzk"; //Pierre de Fermat
// 	$topic = "/m/0f896_"; //Les XX (exhibition producer)
// 	$topic = "/m/055rd2"; //Michael Craig-Martin (org member)
// 	$topic = "/m/0c9h4"; //robert peel (art owner)
// 	object
// 	$topic = "/m/050_704"; //mother and child divided (nom)
// 	$topic = "/m/0jbg2"; //mona lisa
// 	$topic = "/m/06l_7n"; //fountain
// 	$topic = "/m/0hc9x6h"; //The Bodmer Oak (location, own)
// 	$topic = "/m/04xswj"; //ophelia (created, location)
// 	exhibition
// 	$topic = "/m/052tvg1"; //figure studies
// 	$topic = "/m/04d11nr"; //turner prize retrospective
// 	gallery	
// 	$topic = "/m/0136mc"; //Tate
// 	prize	
// 	$topic = "/m/0133rf"; //Turner prize
// 	educational institution	
// 	$topic = "/m/015wy_"; //goldsmiths college
// 	membership organisation				
// 	$topic = "/m/015g1w"; //royal academy					
// 	art subject			
// 	$topic = "/m/034rd"; //George Washington
	
	$res = array();
	$result = array("events"=>array(),"names"=>array(), "links"=>array());
	$types = check_for_tag_types($topic, TRUE);

	//**type: /people/person
	if(in_array("/people/person", $types)) {
		$res[] = "/people/person";
		//person studying
		$result = fb_person_studying($topic, $result);
		
		//person living at location
		$result = fb_person_living_at_location($topic, $result);
	}

	//**type: /visual_art/visual_artist
	if(in_array("/visual_art/visual_artist", $types)) {
		$res[] = "/visual_art/visual_artist";
	
		//object created
		$result = fb_topic_creating_object($topic, $result);
	}

	
	//**type: /book/author
	if(in_array("/book/author", $types)) {
		$res[] = "/book/author";
		//publishing
		$result = fb_topic_publishing($topic, $result);
	}
	
	//**type: /organization/organization_member
	if(in_array("/organization/organization_member", $types)) {
		$res[] = "/organization/organization_member";
		//member of organisation
		$result = fb_topic_organization_member($topic, $result);
		
	}
	
	//changed to facts
	//**type: /exhibitions/exhibition_producer
	if(in_array("/exhibitions/exhibition_producer", $types)) {
		$res[] = "/exhibitions/exhibition_producer";
	//producer of exhibition - event version
// 		$result = fb_topic_exhibition_producer($topic, $result);
		$result = fb_topic_exhibition_related_concept($topic, $result,"/exhibitions/exhibition_producer/exhibitions_produced");
	}
	
	//changed to facts
	//**type: /exhibitions/exhibition_curator
	if(in_array("/exhibitions/exhibition_curator", $types)) {
		$res[] = "/exhibitions/exhibition_curator";
		//exhibition curator - event version
// 		$result = fb_topic_exhibition_curator($topic, $result);
		$result = fb_topic_exhibition_related_concept($topic, $result,"/exhibitions/exhibition_curator/exhibitions_curated");
	}
	
	//changed to facts
	//**type: /exhibitions/exhibition_subject
	if(in_array("/exhibitions/exhibition_subject", $types)) {
		$res[] = "/exhibitions/exhibition_subject";
		//exhibition subject - event version
// 		$result = fb_topic_exhibition_subject($topic, $result);
		$result = fb_topic_exhibition_related_concept($topic, $result,"/exhibitions/exhibition_subject/exhibitions_created_about_this_subject");
	}
	
	
	//**type: /visual_art/art_owner
	if(in_array("/visual_art/art_owner", $types)) {
		$res[] = "/visual_art/art_owner";
		//owner of artwork
		$result = fb_topic_art_owner($topic, $result);
		
	}
	
	//**type: /award/award_winner
	if(in_array("/award/award_winner", $types)) {
		$res[] = "/award/award_winner";
		//winner of award
		$result = fb_topic_award_winner($topic, $result);
		
	}
	
	//**type: /award/award_nominee
	if(in_array("/award/award_nominee", $types)) {
		$res[] = "/award/award_nominee";
		//nominee of award
		$result = fb_topic_award_nominee($topic, $result);
	
	}
	
	//**type: /visual_art/artwork
	if(in_array("/visual_art/artwork", $types)) {
		$res[] = "/visual_art/artwork";
		//object created
		$result = fb_artwork_created($topic, $result);
	
		//object location
		$result = fb_artwork_located($topic, $result);
	
		//object owner
		$result = fb_object_owned($topic, $result);
	}
	
	//**type: /award/award_nominated_work
	if(in_array("/award/award_nominated_work", $types)) {
		$res[] = "/award/award_nominated_work";
		//work nominated
		$result = fb_object_award_nominated_work($topic, $result);
		
	}
	
	//**type: /award/award_winning_work
	if(in_array("/award/award_winning_work", $types)) {
		$res[] = "/award/award_winning_work";
		//work winning award
		$result = fb_object_award_winning_work($topic, $result);
		
	}

	//changed to facts
	//**type: /exhibitions/exhibit
	if(in_array("/exhibitions/exhibit", $types)) {
		$res[] = "/exhibitions/exhibit";
		//object exhibited - event version
// 		$result = fb_object_exhibited($topic, $result);
		fb_topic_exhibition_related_concept($topic, $result,"/exhibitions/exhibit/exhibitions_displayed_in");
	}
	
	//**type: /exhibitions/exhibition
	if(in_array("/exhibitions/exhibition", $types)) {
		$res[] = "/exhibitions/exhibition";
		
		//changed to facts
		//production of the exhibition
		$result = fb_exhibition_production_of_the_exhibition($topic, $result);

		//exhibition held at venue
// 		$result = fb_exhibition_held_at_venue($topic, $result);

		//creation of exhibited objects
		$result = fb_exhibition_creation_of_object($topic, $result);
	}

	//**type: /exhibitions/exhibition_venue
	if(in_array("/exhibitions/exhibition_venue", $types)) {
		$res[] = "/exhibitions/exhibition_venue";
		//venue of exhibition
		$result = fb_venue_of_exhibitions($topic, $result);
	}
	
	//**type: /award/award_category
	if(in_array("/award/award_category", $types)) {
		$res[] = "/award/award_category";
		//award prize winner
		$result = fb_award_having_prize_winner($topic, $result);
	
		//award nominee
		$result = fb_award_having_nominee($topic, $result);
		
	}
	
	//**type: /education/educational_institution
	if(in_array("/education/educational_institution", $types)) {
		$res[] = "/education/educational_institution";
		//institution having graduates
		$result = fb_institution_having_graduates($topic, $result);
	
	}
	
	
	//**type: organization/membership_organization
	if(in_array("/organization/membership_organization", $types)) {
		$res[] = "/organization/membership_organization";
		//organization having members
		$result = fb_organisation_having_members($topic, $result);
	
	}
	
	//**type: /visual_art/art_subject
	if(in_array("/visual_art/art_subject", $types)) {
		$res[] = "/visual_art/art_subject";
		//subject of created artwork
		$result = fb_topic_artwork_subject($topic, $result);
	
	}	

	//**type: /visual_art/art_period_movement
	if(in_array("/visual_art/art_period_movement", $types)) {
		$res[] = "/visual_art/art_period_movement";
		//movement creating object
		$result = fb_period_movement_creating_object($topic, $result);
		//movement creating publication
		$result = fb_period_movement_creating_publication($topic, $result);
	}

	//**type: /time/event
	if(in_array("/time/event", $types)) {
		$res[] = "/time/event";
		//subject of created artwork
		$result = fb_event_happening_of_the_event($topic, $result);
	}

	save_events_to_db($result["events"]);
	save_tag_names_to_db($result["names"]);
	save_calculated_tag($topic);
	
	return $types;
}

/**
 * Get topic name from local database
 */
function get_topic_name($topic = "/m/0hc9x6h") {
	$query = "SELECT name FROM tag_name WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$object = $result->fetchObject();
	if(isset($object->name)) {
		return $object->name;
	}
	else {
		return FALSE;
	}
}

/**
 * Get topic description from local database
 */
function get_topic_description($topic = "/m/0hc9x6h", $limit = FALSE) {
	$query = "SELECT description FROM tag_description WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$object = $result->fetchObject();
	if(isset($object->description)) {
		if($limit && is_int($limit)) {
			$description =  preg_replace('/\s+?(\S+)?$/', '', substr($object->description, 0, $limit));
			if($limit < strlen($object->description)) {
				$description .= '...';
			}
			return $description;
		}
		return $object->description;
	}
	else {
		return FALSE;
	}
}

/**
 * Check description field of a freebase topic and retrieve if not already saved
*/
function check_for_topic_name($topic = "/m/08tqtj") {
	//check for topic name in db
	$query = "SELECT name FROM tag_name WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$found = $result->fetchObject();
	if(isset($found->name)) {
		return $found->name;
	}
	//get topic name
	$query = array(array(
			"mid"=> $topic,
			"name"=> null,
	));
	
	$resultarray = execute_mql_event_query($query);

	if(isset($resultarray["result"][0]["name"])) {
		$name = $resultarray["result"][0]["name"];

		$values_list = "VALUES ('".$topic."', '".my_escape_string($name)."')";
		$query = "INSERT INTO tag_name (tag, name) ".$values_list." ON DUPLICATE KEY UPDATE name = VALUES(name);";
		$result = db_query($query, array(':tag'=>$topic));
		return $name;
	}
}

//check for topic description
//retrieve if not already stored
/**
 * Check description field of a freebase topic and retrieve if not already saved
*/
function check_for_topic_description($topic = "/m/055rd2", $limit = FALSE, $reload = FALSE) {
	if(!$reload) {
		$query = "SELECT description FROM tag_description WHERE tag = :tag;";
		$result = db_query($query, array(':tag' => $topic));
		$found = $result->fetchObject();
		if(isset($found->description)) {
			if($limit && is_int($limit)) {
				$description =  preg_replace('/\s+?(\S+)?$/', '', substr($found->description, 0, $limit));
				if($limit < strlen($found->description)) {
					$description .= '...';
				}

				return $description;
			}

			return $found->description;
		}
	}
	//get topic description
	$service_url = 'https://www.googleapis.com/freebase/v1/topic';
	$googleapikey = get_google_api_key_path();
	$url = $service_url . $topic . '?filter=/common/topic/description'.$googleapikey;
	$resultobj = drupal_http_request($url);
	if(isset($resultobj->data)) {
		$jsonresultstr = $resultobj->data;
		$result = json_decode($jsonresultstr, true);	
	}
	else {
		$result = array();
	}

// 	$ch = curl_init();
// 	curl_setopt($ch, CURLOPT_URL, $url);
// 	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
// 	$result = json_decode(curl_exec($ch), true);
// 	curl_close($ch);

	$descriptions = array();
	if(isset($result["property"]["/common/topic/description"]["values"])) {
		foreach($result["property"]["/common/topic/description"]["values"] as $value) {

			if(!isset($value["timestamp"])) {
				$descriptions[0] = $value["value"];
			}
			else {
				$descriptions[] = $value["value"];
			}
		}
	}
	//add to database
	if(isset($descriptions[0])) {	
		$description = $descriptions[0];//my_escape_string($descriptions[0]);
		$values_list = "VALUES ('".$topic."', '".my_escape_string($description)."')";
		$query = "INSERT INTO tag_description (tag, description) ".$values_list." ON DUPLICATE KEY UPDATE description = VALUES(description);";
		$result = db_query($query, array(':tag'=>$topic));

		if($limit && is_int($limit)) {
			$description =  preg_replace('/\s+?(\S+)?$/', '', substr($description, 0, $limit));
			if($limit < strlen($description)) {
				$description .= '...';
			}
		}
		
		return $description;
	}
}

// ALTER TABLE tag_notable_types
// ADD CONSTRAINT tnt UNIQUE (tag, notable_type);
/**
 * Check notable types of a freebase topic and retrieve if not already saved
 */
function check_for_notable_types($topic = "/m/055rd2") {
	$notable_types = array();
	$notable_types = get_notable_tag_type_names($topic);
	if(!empty($notable_types)) {
		return $notable_types;
	}
	
	//get notable type
	$service_url = 'https://www.googleapis.com/freebase/v1/topic';
	$googleapikey = get_google_api_key_path();
	$url = $service_url . $topic . '?filter=/common/topic/notable_types'.$googleapikey;
	$resultobj = drupal_http_request($url);
	if(isset($resultobj->data)) {
		$jsonresultstr = $resultobj->data;
		$result = json_decode($jsonresultstr, true);	
	}
	else {
		$result = array();
	}
	
	
// 	$ch = curl_init();
// 	curl_setopt($ch, CURLOPT_URL, $url);
// 	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
// 	$result = json_decode(curl_exec($ch), true);
// 	curl_close($ch);
	
	$notable_types = array();
	$types = array();
	if(isset($result["property"]["/common/topic/notable_types"]["values"])) {
		foreach($result["property"]["/common/topic/notable_types"]["values"] as $value) {
				$types[$topic] = array($value["id"], $value["text"]);
				$notable_types[] = str_replace('_', ' ',$value["text"]);
		}
	}
	if(!empty($types)) {
	//add to database
		$values_list = '';
		foreach($types as $id=>$type) {
			$values_list .=", ('".$id."', '".$type["0"]."', '".$type["1"]."')";
		}
		if($values_list == "") {
			return array();
		}
		$values_list = "VALUES".substr($values_list, 1)." ";
		
		$query = "INSERT INTO tag_notable_types (tag, notable_type, notable_type_name) ".$values_list." ON DUPLICATE KEY UPDATE tag = VALUES(tag), notable_type = VALUES(notable_type), notable_type_name = VALUES(notable_type_name);";
		
		$result = db_query($query);
	}
	return $notable_types;
}

/**
 * Handle escape characters in string to be saved to database
 */
function my_escape_string($string) {
	global $databases;
	$con=mysqli_connect($databases["default"]["default"]["host"],$databases["default"]["default"]["username"],$databases["default"]["default"]["password"],$databases["default"]["default"]["database"]);
	$description = mysqli_real_escape_string($con, $string);
	return $description;
}

/**
 * Save flag to indicate that data for setting has already been retrieved
 */
function save_calculated_setting($location, $year) {	
	$query = "INSERT INTO calculated_settings (location, year) VALUES(:location, :year) ON DUPLICATE KEY UPDATE location = VALUES(location), year = VALUES(year);";
	$result = db_query($query, array(':location'=>$location, ':year'=>$year));
}

/**
 * Check whether additional data associated with a setting has already been retrieved from freebase
 */
function check_for_calculated_setting($location, $year) {
	$query = "SELECT * FROM calculated_settings WHERE location = :location AND year = :year;";
	$result = db_query($query, array(':location'=>$location, ':year'=>$year));
	$found = $result->fetchObject();
	if($found) {
		return TRUE;
	}
	else {
		return FALSE;
	}	
}

/**
 * Save flag to indicate that freebase topic has been retrieved
 * Have to use db_query in order to avoid duplicate enties for key
 */
function save_calculated_tag($topic) {
	$query = "INSERT INTO calculated_tags (tag) VALUES(:tag) ON DUPLICATE KEY UPDATE tag = VALUES(tag);";
	$result = db_query($query, array(':tag'=>$topic));

}

/**
 * Check whether data for freebase topic has already been retrieved
 */
function check_for_calculated_tag($topic) {
	$query = "SELECT tag FROM calculated_tags WHERE tag = :tag;";
	$result = db_query($query, array(':tag' => $topic));
	$found = $result->fetchObject();
	if($found) {
		return TRUE;
	}
	else {
		return FALSE;
	}
}

/**
 * Save names of retrieved freebase topics to database
 */
function save_tag_names_to_db($result) {

	$values_list = "";
	if(!empty($result)) {
		foreach($result as $id=>$name) {
			$name = my_escape_string($name);
			$values_list .=", ('".$id."', '".$name."')";
		}
		if($values_list == "") {
			return array();
		}
		$values_list = "VALUES".substr($values_list, 1)." ";
	
		$query = "INSERT INTO tag_name (tag, name) ".$values_list." ON DUPLICATE KEY UPDATE name = VALUES(name);";
	
		$result = db_query($query);
	}
}

// ALTER TABLE event_attribute_value
// ADD CONSTRAINT triple UNIQUE (event,attribute,value);
/**
 * Save retreived freebase data as events
 */
function save_events_to_db($result) {
	if(empty($result)) {
		return array();
	}
		
	$values_list = "";

	foreach($result as $event_id=>$event_properties) {
		foreach($event_properties as $attribute=>$values) {
			if(is_array($values)) {
				foreach($values as $value) {
					if($value) {
						$value = my_escape_string($value);
						$values_list .=", ('".$event_id."', '".$attribute."', '".$value."')";
					}
				}
			}
			else {
				if($values) {
					$values = my_escape_string($values);
					$values_list .=", ('".$event_id."', '".$attribute."', '".$values."')";
				}
			}
		}
	}
	$values_list = "VALUES".substr($values_list, 1)." ";

	$query = "INSERT INTO event_attribute_value (event,attribute,value) ".$values_list." ON DUPLICATE KEY UPDATE event = VALUES(event), attribute = VALUES(attribute), value = VALUES(value);";

	$result = db_query($query);	
}

/**
 * Get values from a freebase results array
 */
function get_values($elements) {
	if(!is_array($elements)) {return array();}
	$output = array();
	foreach($elements as $element) {
		$output[] = $element["mid"];
	}
	return $output;
}

/**
 * function dec_rec_form_config
 */

function dec_rec_form_config(){
    $form['dec_semrecommender_address'] = array(
        '#type' => 'textfield',
        '#title' => t('SemRecommender Address'),
        '#default_value' => variable_get('dec_semrecommender_address'),
        '#description' => t('This recommender provides various subservices via an API.'),
        '#required' => TRUE,
    );   

    return system_settings_form($form);
}
  
/**
 * This is a debug function that prints a given variable to drupal message area
 * It uses output buffers (ob_start, ob_get_clean) and var_dump
 */
function dec_debug_message($var_to_dump) {
  	ob_start();
  	var_dump($var_to_dump);
  	drupal_set_message('<pre>' . check_plain(ob_get_clean()) . '</pre>');
}


