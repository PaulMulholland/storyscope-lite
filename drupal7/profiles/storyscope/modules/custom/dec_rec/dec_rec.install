<?php

/** dec_rec.install
 * 
 */

function dec_rec_schema() {
	$schema['calculated_tags'] = array(
		'description' => t('Tags (topics) for which data has been retrieved from Freebase.'),
	    'fields' => array(
			'tag' => array(
				'description' => t('Freebase mid'),
				'type' => 'varchar',
				'length' => 45,
				'not null' => TRUE),
		),
		'primary key' => array('tag'),
   	);
	$schema['tag_name'] = array(
	    'description' => t('Tag and its freebase name'),
	    'fields' => array(
			'tag' => array(
				'description' => t('Freebase mid'),
				'type' => 'varchar',
				'length' => 45,
				'not null' => TRUE,
			),
			'name' => array(
				'description' => t('Name of the tag'),
				'type' => 'varchar',
				'length' => 256,
			),
		),
		'primary key' => array('tag'),
	);
	$schema['event_attribute_value'] = array(
	    'description' => t('Event attribute and value'),
	    'fields' => array(
			'event' => array(
				'description' => t('Freebase mid of event'),
				'type' => 'varchar',
				'length' => 45,
			),
			'attribute' => array(
				'description' => t('Freebase attribute'),
				'type' => 'varchar',
				'length' => 128,
			),
			'value' => array(
				'description' => t('Freebase mid or numerical/date value'),
				'type' => 'varchar',
				'length' => 64,
			),
		),
  	    'unique keys' => array(
      		'triple'     => array('event', 'attribute', 'value')
		),
 	);
	$schema['query_id'] = array(
	    'description' => t('New story ids'),
	    'fields' => array(
			'id' => array(
				'description' => t('Story id'),
				'type' => 'serial',
				'not null' => TRUE),
		),
  	    'primary key' => array('id'),
  	);
	$schema['query_tag'] = array(
	    'description' => t('Tags associated with each query id'),
	    'fields' => array(
			'id' => array(
				'description' => t('Story id'),
				'type' => 'int',
				'length' => 11,
			),
			'tag' => array(
				'description' => t('Tag'),
				'type' => 'varchar',
				'length' => 45,
			),
		),
		'unique keys' => array(
				'id_tag' => array('id', 'tag')
		),
  	);
	$schema['tag_description'] = array(
	    'description' => t('Tag and its displayed description'),
	    'fields' => array(
			'tag' => array(
				'description' => t('Freebase mid'),
				'type' => 'varchar',
				'length' => 45,
				'not null' => TRUE,
			),
			'description' => array(
				'description' => t('Description'),
				'type' => 'text',
			),
		),
		'primary key' => array('tag'),
  	);
	$schema['calculated_settings'] = array(
	    'description' => t('Settings with retrieved freebase data'),
	    'fields' => array(
			'location' => array(
				'description' => t('Location freebase mid'),
				'type' => 'varchar',
				'length' => 45,
			),
			'year' => array(
				'description' => t('Date stamp YYYY, YYYY-MM, YYYY-MM-DD'),
				'type' => 'varchar',
				'length' => 45,
			),
	    ),
  	    'unique keys' => array(
      		'location_year'     => array('location', 'year')
		),
	);
	$schema['tag_attribute_id_value'] = array(
	    'description' => t('Associates one or more values with an attribute of a tag'),
	    'fields' => array(
			'tag_attribute_id' => array(
				'description' => t('Id for a tag attribute pairing'),
				'type' => 'int',
				'length' => 11,
			),
			'value' => array(
				'description' => t('Value for the topic-attribute e.g. another topic, date, int'),
				'type' => 'varchar',
				'length' => 45,
			),
	    ),
  	    'unique keys' => array(
      		'tv'     => array('tag_attribute_id', 'value')
		),
  	);
	$schema['tag_attribute'] = array(
			'description' => t('A tag attribute pair with which values are associated'),
			'fields' => array(
				'id' => array(
						'description' => t('Topic-attribute id'),
						'type' => 'serial',
						'not null' => TRUE,
				),
				'tag' => array(
						'description' => t('Freebase topic'),
						'type' => 'varchar',
						'length' => 45,
				),
				'attribute' => array(
						'description' => t('Freebase attribute'),
						'type' => 'varchar',
						'length' => 45,
				),
				'link' => array(
						'description' => t('1 if values are objects (i.e. topics) and 0 if data values'),
						'type' => 'int',
						'length' => 2,
						'not null' => TRUE,
				),
			),
			'primary key' => array('id'),
  	    	'unique keys' => array(
      			'ta'     => array('tag', 'attribute')
			),
  	);
	$schema['tag_notable_types'] = array(
			'description' => t('Notable types of a freebase topic'),
			'fields' => array(
				'tag' => array(
						'description' => t('Freebase topic'),
						'type' => 'varchar',
						'length' => 45,
				),
				'notable_type' => array(
						'description' => t('Id of notable type'),
						'type' => 'varchar',
						'length' => 45,
				),
				'notable_type_name' => array(
						'description' => t('Name of notable type'),
						'type' => 'varchar',
						'length' => 125,
				),
			),
	  	    'unique keys' => array(
	      		'tnt'     => array('tag', 'notable_type')
			),
  	);
	$schema['fb_saved_images'] = array(
			'description' => t('The image id of a topic id'),
			'fields' => array(
				'tag' => array(
						'description' => t('Freebase topic'),
						'type' => 'varchar',
						'length' => 45,
						'not null' => TRUE,
				),
				'image_tag' => array(
						'description' => t('Id of the image'),
						'type' => 'varchar',
						'length' => 45,
				),
			),
			'primary key' => array('tag'),
	);
	$schema['tag_timeline_data'] = array(
			'description' => t('Cached timeline data for a topic'),
			'fields' => array(
				'tag' => array(
						'description' => t('Freebase topic'),
						'type' => 'varchar',
						'length' => 45,
						'not null' => TRUE,
				),
				'attribute' => array(
						'description' => t('Freebase attribute'),
						'type' => 'varchar',
						'length' => 124,
						'default' => 'no_attribute',
				),
				'timeline_data' => array(
						'description' => t('Cached timeline data in JSON format'),
						'type' => 'text',
						'size' => 'medium',
						'not null' => TRUE,
				),
				'request_path' => array(
					'type' => 'varchar',
					'description' => "Request path of a timeline",
					'length' => 100,
					'not null' => FALSE,
				),
			),
			'unique keys' => array(
					'data_key'     => array('tag', 'attribute', 'request_path')
			),
	);
	$schema['story_timeline_data'] = array(
			'description' => t('Cached timeline data for a story'),
			'fields' => array(
				'story' => array(
						'description' => t('Story id'),
						'type' => 'int',
						'length' => 11,
						'not null' => TRUE,
				),
				'event_type' => array(
						'description' => t('Event type, i.e. activity of the event'),
						'type' => 'varchar',
						'length' => 124,
				),
				'timeline_data' => array(
						'description' => t('Cached timeline data in JSON format'),
						'type' => 'text',
						'size' => 'medium',
						'not null' => TRUE,
				),
				'request_path' => array(
					'type' => 'varchar',
					'description' => "Request path of a timeline",
					'length' => 100,
					'not null' => FALSE,
				),
			),
			'unique keys' => array(
					'data_key'     => array('story', 'event_type', 'request_path')
			),
	);
	$schema['setting_timeline_data'] = array(
			'description' => t('Cached timeline data for a setting'),
			'fields' => array(
				'location' => array(
						'description' => t('Location topic'),
						'type' => 'varchar',
						'length' => 45,
				),
				'start' => array(
						'description' => t('Start time datestamp'),
						'type' => 'varchar',
						'length' => 45,
				),
				'end' => array(
						'description' => t('End time datestamp'),
						'type' => 'varchar',
						'length' => 45,
						'default' => '0',
				),
				'event_type' => array(
						'description' => t('Event type, i.e. activity of the event'),
						'type' => 'varchar',
						'length' => 124,
				),
				'timeline_data' => array(
						'description' => t('Cached timeline data in JSON format'),
						'type' => 'text',
						'size' => 'medium',
						'not null' => TRUE,
				),
				'request_path' => array(
					'type' => 'varchar',
					'description' => "Request path of a timeline",
					'length' => 100,
					'not null' => FALSE,
				),
			),
			'unique keys' => array(
					'data_key'     => array('location', 'start', 'end', 'event_type', 'request_path')
			),
	);
	$schema['location_container'] = array(
			'description' => t('Associates a location with locations that contain it. Works to two freebase levels of containment. A location contains itself'),
			'fields' => array(
				'location' => array(
						'description' => t('Location topic'),
						'type' => 'varchar',
						'length' => 45,
				),
				'container' => array(
						'description' => t('Location topic'),
						'type' => 'varchar',
						'length' => 45,
				),
			),
			'unique keys' => array(
					'location_pair'     => array('location', 'container')
			),
	);
	$schema['tag_event_id'] = array(
			'description' => t('Associates a story tag with its events. Used to calculate setting and theme of the story.'),
			'fields' => array(
				'tag' => array(
						'description' => t('Freebase topic or value'),
						'type' => 'varchar',
						'length' => 45,
				),
				'event_id' => array(
						'description' => t('Id of event associated with the tag'),
						'type' => 'varchar',
						'length' => 45,
				),
			),
			'unique keys' => array(
					'tag_event_pair'     => array('tag', 'event_id')
			),
	);
	$schema['tag_types'] = array(
			'description' => t('Full type list of a freebase topic'),
			'fields' => array(
				'tag' => array(
						'description' => t('Freebase tag'),
						'type' => 'varchar',
						'length' => 45,
				),
				'type' => array(
						'description' => t('Type of the tag'),
						'type' => 'varchar',
						'length' => 128,
				),
			),
			'unique keys' => array(
					'tt'     => array('tag', 'type')
			),
	);
	$schema['attribute_name'] = array(
			'description' => t('Names of atttributes used in event slots and event groups associated with a tag'),
			'fields' => array(
				'attribute' => array(
						'description' => t('Freebase attribute'),
						'type' => 'varchar',
						'length' => 64,
				),
				'name' => array(
						'description' => t('Name of attribute'),
						'type' => 'varchar',
						'length' => 64,
				),
				'reverse_name' => array(
						'description' => t('Reverse name of attribute used for group of events related to a tag'),
						'type' => 'varchar',
						'length' => 64,
				),
			),
			'unique keys' => array(
					'attribute_UNIQUE'     => array('attribute')
			),
	);
	$schema['event_attribute_position'] = array(
			'description' => t('Column position of event attributes in event tables shown in event spaces.'),
			'fields' => array(
					'event_attribute' => array(
							'description' => t('Event attribute'),
							'type' => 'varchar',
							'length' => 125,
					),
					'position' => array(
							'description' => t('Column postion of attribute in event tables'),
							'type' => 'int',
							'length' => 11,
					),
			),
			'primary key' => array('event_attribute'),
			'unique keys' => array(
					'attribute_UNIQUE'     => array('position')
			),
	);
	$schema['theme_fact_property'] = array(
			'description' => t('List of fact properties of a topic that are used in theme calculation for that topic.'),
			'fields' => array(
					'fb_property' => array(
							'description' => t('Fact property used in concept space for the topic'),
							'type' => 'varchar',
							'length' => 45,
					),
			),
			'primary key' => array('fb_property'),
	);
	$schema['fact_attribute_reverse'] = array(
			'description' => t('Reverse names for fact properties for showing the inverse of a stored fact.'),
			'fields' => array(
					'attribute' => array(
							'description' => t('Fact property'),
							'type' => 'varchar',
							'length' => 200,
					),
					'reverse' => array(
							'description' => t('Inverse name'),
							'type' => 'varchar',
							'length' => 200,
					),
			),
			'primary key' => array('attribute'),
	);
	$schema['story_suggested_tags'] = array(
			'description' => t('Suggested tags of a story'),
			'fields' => array(
					'story' => array(
							'description' => t('Story nid'),
							'type' => 'int',
							'length' => 11,
					),
					'mid' => array(
							'description' => t('Suggested mid'),
							'type' => 'varchar',
							'length' => 45,
					),
					'name' => array(
							'description' => t('Suggested name'),
							'type' => 'varchar',
							'length' => 255,
					),
			),
	);
	$schema['dossier_themes'] = array(
			'description' => t('Stored themes of a dossier'),
			'fields' => array(
					'dossier' => array(
							'description' => t('Dossier nid'),
							'type' => 'int',
							'length' => 11,
					),
					'mid' => array(
							'description' => t('Theme mid'),
							'type' => 'varchar',
							'length' => 45,
					),
			),
	);
	$schema['story_themes'] = array(
			'description' => t('Stored themes of a story'),
			'fields' => array(
					'story' => array(
							'description' => t('Story nid'),
							'type' => 'int',
							'length' => 11,
					),
					'mid' => array(
							'description' => t('Theme mid'),
							'type' => 'varchar',
							'length' => 45,
					),
			),
	);
	$schema['site_themes'] = array(
			'description' => t('Stored themes of a site'),
			'fields' => array(
					'mid' => array(
							'description' => t('Theme mid'),
							'type' => 'varchar',
							'length' => 45,
					),
			),
	);
	return $schema;
}


function dec_rec_install() {
  	// Populate the attribute names
	$values = array(
		array('attribute'=>'activity', 'name'=>'activity', 'reverse_name'=>'activity'),
		array('attribute'=>'/education/education/student', 'name'=>'agent', 'reverse_name'=>'education history'),
		array('attribute'=>'/education/education/institution', 'name'=>'agent', 'reverse_name'=>'students'),
		array('attribute'=>'/education/education/start_date', 'name'=>'start_time', 'reverse_name'=>'start of education'),
		array('attribute'=>'/education/education/end_date', 'name'=>'end_time', 'reverse_name'=>'end of education'),
		array('attribute'=>'/education/education/degree', 'name'=>'tag', 'reverse_name'=>'degree awarded'),
		array('attribute'=>'/education/education/specialization', 'name'=>'tag', 'reverse_name'=>'sepcialization of degree'),
		array('attribute'=>'/education/education/minor', 'name'=>'tag', 'reverse_name'=>'minor of degree'),
		array('attribute'=>'/people/place_lived/location', 'name'=>'location', 'reverse_name'=>'residents'),
		array('attribute'=>'/people/place_lived/person', 'name'=>'agent', 'reverse_name'=>'places lived'),
		array('attribute'=>'/people/place_lived/start_date', 'name'=>'start_time', 'reverse_name'=>'start of residence'),
		array('attribute'=>'/people/place_lived/end_date', 'name'=>'end_time', 'reverse_name'=>'end of residence'),
		array('attribute'=>'/visual_art/artwork/artist', 'name'=>'agent', 'reverse_name'=>'artworks created'),
		array('attribute'=>'/visual_art/artwork/date_begun', 'name'=>'start_time', 'reverse_name'=>'start of artwork creation'),
		array('attribute'=>'/visual_art/artwork/date_completed', 'name'=>'end_time', 'reverse_name'=>'end of artwork creation'),
		array('attribute'=>'/visual_art/artwork/art_subject', 'name'=>'tag', 'reverse_name'=>'subject of artwork'),
		array('attribute'=>'/visual_art/artwork/art_genre', 'name'=>'tag', 'reverse_name'=>'genre of artwork'),
		array('attribute'=>'/visual_art/artwork/media', 'name'=>'tag', 'reverse_name'=>'media of artwork'),
		array('attribute'=>'/visual_art/artwork/support', 'name'=>'tag', 'reverse_name'=>'support of artwork'),
		array('attribute'=>'/visual_art/artwork/editions', 'name'=>'tag', 'reverse_name'=>'edition of artwork'),
		array('attribute'=>'/visual_art/artwork/edition_of', 'name'=>'tag', 'reverse_name'=>'artwork edition'),
		array('attribute'=>'/visual_art/artwork', 'name'=>'tag', 'reverse_name'=>'artwork creation details'),
		array('attribute'=>'/visual_art/artwork/period_or_movement', 'name'=>'tag', 'reverse_name'=>'movement of artwork'),
		array('attribute'=>'/visual_art/artwork/belongs_to_series', 'name'=>'tag', 'reverse_name'=>'series of artwork'),
		array('attribute'=>'/book/written_work/author', 'name'=>'agent', 'reverse_name'=>'books authored'),
		array('attribute'=>'/book/written_work/editor', 'name'=>'agent', 'reverse_name'=>'books edited'),
		array('attribute'=>'/book/written_work/date_of_first_publication', 'name'=>'start_time', 'reverse_name'=>'date of publication'),
		array('attribute'=>'/book/written_work/school_or_movement', 'name'=>'tag', 'reverse_name'=>'movement of work'),
		array('attribute'=>'/book/written_work/part_of_series', 'name'=>'tag', 'reverse_name'=>'series of work'),
		array('attribute'=>'/book/written_work/previous_in_series', 'name'=>'tag', 'reverse_name'=>'precedes in series'),
		array('attribute'=>'/book/written_work/next_in_series', 'name'=>'tag', 'reverse_name'=>'follows in series'),
		array('attribute'=>'/book/written_work', 'name'=>'tag', 'reverse_name'=>'book authorship details'),
		array('attribute'=>'/organization/organization_membership/member', 'name'=>'agent', 'reverse_name'=>'organisations joined'),
		array('attribute'=>'/organization/organization_membership/organization', 'name'=>'agent', 'reverse_name'=>'membership'),
		array('attribute'=>'/organization/organization_membership/from', 'name'=>'start_time', 'reverse_name'=>'start time of membership'),
		array('attribute'=>'/organization/organization_membership/to', 'name'=>'end_time', 'reverse_name'=>'start time of membership'),
		array('attribute'=>'/exhibitions/exhibition/produced_by', 'name'=>'agent', 'reverse_name'=>'exhibition produced'),
		array('attribute'=>'/exhibitions/exhibition/curators', 'name'=>'agent', 'reverse_name'=>'exhibition curated'),
		array('attribute'=>'/exhibitions/exhibition/exhibition_types', 'name'=>'tag', 'reverse_name'=>'type of exhibition'),
		array('attribute'=>'/exhibitions/exhibition/exhibits', 'name'=>'tag', 'reverse_name'=>'exhibition history'),
		array('attribute'=>'/exhibitions/exhibition/subjects', 'name'=>'tag', 'reverse_name'=>'subject of exhibition'),
		array('attribute'=>'/exhibitions/exhibition', 'name'=>'tag', 'reverse_name'=>'exhibition creation details'),
		array('attribute'=>'/visual_art/artwork_owner_relationship/owner', 'name'=>'agent', 'reverse_name'=>'owner of work'),
		array('attribute'=>'/visual_art/artwork_owner_relationship/date_acquired', 'name'=>'start_time', 'reverse_name'=>'start time of ownership'),
		array('attribute'=>'/visual_art/artwork_owner_relationship/last_date_owned', 'name'=>'end_time', 'reverse_name'=>'end time of ownership'),
		array('attribute'=>'/visual_art/artwork_owner_relationship/artwork', 'name'=>'tag', 'reverse_name'=>'ownership history'),
		array('attribute'=>'/award/award_honor/award_winner', 'name'=>'agent', 'reverse_name'=>'winner of award'),
		array('attribute'=>'/award/award_honor/year', 'name'=>'start_time', 'reverse_name'=>'time of award win'),
		array('attribute'=>'/award/award_honor/award', 'name'=>'tag', 'reverse_name'=>'award won'),
		array('attribute'=>'/award/award_honor/honored_for', 'name'=>'tag', 'reverse_name'=>'honored for award'),
		array('attribute'=>'/award/award_honor/ceremony', 'name'=>'tag', 'reverse_name'=>'ceremony of award'),
		array('attribute'=>'/award/award_honor/achievement_level', 'name'=>'tag', 'reverse_name'=>'achievement level of award'),
		array('attribute'=>'/award/award_nomination/award_nominee', 'name'=>'agent', 'reverse_name'=>'nominee of award'),
		array('attribute'=>'/award/award_nomination/year', 'name'=>'start_time', 'reverse_name'=>'time of nomination'),
		array('attribute'=>'/award/award_nomination/award', 'name'=>'tag', 'reverse_name'=>'award nomination'),
		array('attribute'=>'/award/award_nomination/nominated_for', 'name'=>'tag', 'reverse_name'=>'work nominated for'),
		array('attribute'=>'/award/award_nomination/ceremony', 'name'=>'tag', 'reverse_name'=>'ceremony of award'),
		array('attribute'=>'/visual_art/artwork_location_relationship/location', 'name'=>'location', 'reverse_name'=>'location of artwork'),
		array('attribute'=>'/visual_art/artwork_location_relationship/from', 'name'=>'start_time', 'reverse_name'=>'start time of artwork location'),
		array('attribute'=>'/visual_art/artwork_location_relationship/to', 'name'=>'end_time', 'reverse_name'=>'end time of artwork location'),
		array('attribute'=>'/visual_art/artwork_location_relationship/artwork', 'name'=>'tag', 'reverse_name'=>'artwork location history'),
		array('attribute'=>'/exhibitions/exhibition_run/opened_on', 'name'=>'start_time', 'reverse_name'=>'start time of exhibition run'),
		array('attribute'=>'/exhibitions/exhibition_run/closed_on', 'name'=>'end_time', 'reverse_name'=>'end time of exhibition run'),
		array('attribute'=>'/exhibitions/exhibition_run/venue', 'name'=>'location', 'reverse_name'=>'venue of exhibition run'),
		array('attribute'=>'/exhibitions/exhibition_run/exhibition', 'name'=>'tag', 'reverse_name'=>'exhibition run details'),
		array('attribute'=>'/time/event/people_involved', 'name'=>'agent', 'reverse_name'=>'person of event'),
		array('attribute'=>'/time/event/start_date', 'name'=>'start_time', 'reverse_name'=>'start time of event'),
		array('attribute'=>'/time/event/end_date', 'name'=>'end_time', 'reverse_name'=>'end time of event'),
		array('attribute'=>'/time/event/locations', 'name'=>'location', 'reverse_name'=>'location of event'),
		array('attribute'=>'location', 'name'=>'location', 'reverse_name'=>'location')
	);  	
	$query = db_insert('attribute_name')->fields(array('attribute', 'name', 'reverse_name'));
	foreach($values as $value) {
		$query->values($value);
	}
	$query->execute();
	
	//Populate the event attribute positions
	$values = array(
			array('event_attribute'=>'title', 'position'=>'0'),
			array('event_attribute'=>'activity', 'position'=>'1'),
			array('event_attribute'=>'agent', 'position'=>'2'),
			array('event_attribute'=>'start_time', 'position'=>'3'),
			array('event_attribute'=>'end_time', 'position'=>'4'),
			array('event_attribute'=>'location', 'position'=>'5'),
			array('event_attribute'=>'tag', 'position'=>'6'),
	);
	$query = db_insert('event_attribute_position')->fields(array('event_attribute', 'position'));
	foreach($values as $value) {
		$query->values($value);
	}
	$query->execute();

	//Populate fact theme properties
	$values = array(
			array('Associated artists'),
			array('Associated period or movement'),
	);
	$query = db_insert('theme_fact_property')->fields(array('fb_property'));
	foreach($values as $value) {
		$query->values($value);
	}
	$query->execute();
	
	//Populate fact name properties
	$values = array(
			array('Place of birth','Birthplace of'),
			array('Place of death','Death place of'),
	);
	$query = db_insert('fact_attribute_reverse')->fields(array('attribute','reverse'));
	foreach($values as $value) {
		$query->values($value);
	}
	$query->execute();
}

