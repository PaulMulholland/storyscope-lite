<?php

/**
 * @file
 * Manages the links between a dossier and its contents.
 * Provides menu callbacks for adding content to a dossier
 */
 
/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function storyscope_content_help($path, $arg) {
  switch ($path) {
    case "admin/help#storyscope_content":
      return '<p>' . t("Manages the links between a dossier and its contents.") . '</p>';
      break;
  }
} 
/**
 * Implements hook_menu().
 */
function storyscope_content_menu() {
  $items = array();

  // Add brand new child content to a dossier
  $items['dossier/%node/story/add'] = array(
    'page callback' => 'storyscope_content_add_child_content_form',
    'page arguments' => array('dossier', 1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
  );
  
  // Add a new tag to a story
  $items['dossier/%/story/%/addtag'] = array(
    'page callback' => 'storyscope_content_add_tag',
    'page arguments' => array(3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
  );

  // Remove a tag 
  $items['dossier/%/story/%/removetag'] = array(
    'page callback' => 'storyscope_content_remove_tag',
    'page arguments' => array(3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}


/**
 * Present the add node form to the user for our custom callback but also
 * allow for the dossier, to be updated with the link to a
 * new piece of child content (story) when created.
 *
 * For example, when someone visits dossiers/1/storry/add it will show the
 * add node form for a story but link it to dossier with nid 1 when saved.
 *
 * @param $parent_type
 *   The type of content to add the link to, i.e. the context.  Allowed value
 *   is 'dossier'
 * @param $dossier_node
 *   The node object for the dossier
 *
 * @return
 *   The built $form array as returned from drupal_get_form().
 */
function storyscope_content_add_child_content_form($parent_type, $dossier_node) {

global $user;

  // we need to have the available node types available to the drupal_get_form function
  module_load_include('inc', 'node', 'node.pages');

  // Retrieve appropriate node form.
  $types = node_type_get_types();

  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'story',
    'language' => LANGUAGE_NONE,
    'dossier' => $dossier_node->nid,
    
  );
  drupal_set_title(t('Create @name', array('@name' => 'story')), PASS_THROUGH);
  $form = drupal_get_form('story_node_form', $node);
  //drupal_set_message($node->dossier);
  return $form;
}


/**
 * Implements hook_field_attach_form().
 *
 * Add temporary 'dossier' settings to the node form for later
 * access in hook_node_insert().
 */
function storyscope_content_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if (!empty($entity->dossier)) {
    $form['dossier'] = array(
      '#type' => 'hidden',
      '#value' => $entity->dossier,
    );
  }
}

/**
 * Implements hook_node_insert().
 *
 * Update the parent dossier, story or plot with the link to the newly created
 * content.
 */
function storyscope_content_node_insert($node) {
	
  // Dossier context.
  // -----------------
  // Check to see if the node has been give a dossier context
  if (!empty($node->dossier)) {
  	  //now load the dossier so that we can set a new entity reference to the story
	  $dossier = node_load($node->dossier);
	  //use the metadatawrapper to get
	  $dossier_wrapper = entity_metadata_wrapper('node', $dossier);

      // Update the dossier with the link to the new content.
    	$delta = $dossier_wrapper->field_stories->count();
		//drupal_set_message('delta is ' . $delta);
   	 	$dossier_wrapper->field_stories[$delta]->set($node->nid);
    	storyscope_content_create_path_aliases($node, $dossier);
		$dossier_wrapper->save();
  }
 
}

/**
 * Helper function to create a path alias for a node for all contexts it may
 * exist in.
 *
 * @param $node
 *   The node to create the aliases for.
 * @param $parent_node
 *   The direct parent context, another node object.
 */
function storyscope_content_create_path_aliases($node, $parent_node) {

      $parent_path = 'dossier';
	  $path['alias'] = $parent_path . '/' . $parent_node->nid . '/story/' . $node->nid;
	  $path['source'] = 'node/' . $node->nid;
      storyscope_content_path_save($path);

}

/**
 * Wrapper function around path_save() to check for existing paths before
 * creating new ones, so as to avoid duplicates.
 *
 * @param $path
 *   Array of path arguments as accepted by path_save().
 */
function storyscope_content_path_save($path) {

  if (!path_load(array('alias' => $path['alias']))) {
    path_save($path);
	//drupal_set_message('set the path: ' . implode('|', $path));
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Hide the field_fb_tags fields, used for storing Freebase machine names
 * from the story node form.
 */
function storyscope_content_form_story_node_form_alter(&$form, $form_state) {
  $author = $form['uid']['#value'];
  global $user;
  $form['#after_build'][] = 'storyscope_content_form_story_node_form_after_build';
  

  if (empty($form['nid']['#value'])) {
    $form['actions']['submit']['#submit'][] = 'storyscope_content_form_story_node_form_submit';
  }
  
}

function storyscope_content_form_story_node_form_submit($form, &$form_state) {
  unset($_GET['destination']);
  unset($form_state['rebuild']);
  $nid = $form_state['nid'];
  $form_state['redirect'] = 'dossier/' . $form['dossier']['#value'] . '/story/' . $nid;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Hide the 'machine' parts of the Freebase fields from the Event / Object form.
 */
function storyscope_content_form_story_node_form_after_build(&$form, $form_state) {
  //drupal_set_message('after build');
  $language = $form['field_fb_tags']['#language'];  
  $max_delta = $form['field_fb_tags'][$language]['#max_delta'];
  $form['field_fb_tags'][$language]['#title'] = t('Tags');
  for ($i = 0; $i <= $max_delta; $i++) {
	$form['field_fb_tags'][$language][$i]['field_topic']['und']['0']['value']['#title'] = t('Tags');
        $form['field_fb_tags'][$language][$i]['field_topic']['und']['0']['value']['#title_display'] = 'invisible';
        $form['field_fb_tags'][$language][$i]['field_mid']['#attributes']['class'][] = 'hidden-input';
  }
  return $form;
}


/**
 * Create a Freebase Tag field collection entity from a topic name and mid and add it to the story
 */
function storyscope_content_add_tag($story_nid) {
	$query = drupal_get_query_parameters($_GET);
	//this gets the destination in the correct drupal manner - other paramenters are taken from the $query object
	$destination = drupal_get_destination();
	//make sure we are getting the required parameters
	if(isset($query['topic_name'])) {
		$topic_name = $query['topic_name'];
	}
	else {
		drupal_set_message(t('There was no valid topic name in the request. No tag has been added.'));
		drupal_goto($destination['destination']);
		return;
	}
	if(isset($query['mid'])) {
		$mid = $query['mid'];
	}
	else {
		drupal_set_message(t('There was no valid mid in the request. No tag has been added.'), 'warning');
		drupal_goto($destination['destination']);
		return;
	}
	
	//get mid value following /m/
	$mid_as_array = (explode('/',$mid));
	$mid_end = end($mid_as_array);
	
	//load the story - we should probably check to see if it tis the correct type and whether it 
	//already has this tag (both in the dec_rec created link that calls this function and also here)
	// Should change to "Remove" when the tag exists in the story.
	if (is_numeric($story_nid) && $story = node_load($story_nid)) {
		$story = node_load($story_nid);
	}
	else {
		drupal_set_message(t('There was no story in the request. No tag has been added.'), 'warning');
		drupal_goto($destination['destination']);
		return;
	}
	if($story->type !='story' || $story == NULL){
		drupal_set_message(t('The Story does not exist or you are trying to add a tag to something other than a Story.'), 'warning');
	 	drupal_goto($destination['destination']);
		return;
	}
	
    //make a new field collection item and bind it to the story node
	$new_fb_tag = entity_create('field_collection_item', array('field_name' => 'field_fb_tags'));
	$new_fb_tag->setHostEntity('node', $story);
	$new_fb_tag->field_topic[LANGUAGE_NONE][0]['value'] = $topic_name;
  	$new_fb_tag->field_mid[LANGUAGE_NONE][0]['value'] = $mid_end;
	$new_fb_tag->save();
	node_save($story);
	drupal_set_message(t('Added ') . $topic_name . t(' Tag to the Story'));
	drupal_goto($destination['destination']);
	//watchdog('addtag', '<pre>'. print_r($query, TRUE) .'</pre>');


}

 /**
	 * Remove a Freebase Tag field collection entity
	 */
	function storyscope_content_remove_tag($story_nid) {
		$query = drupal_get_query_parameters($_GET);
		//this gets the destination in the correct drupal manner - other paramenters are taken from the $query object
		$destination = drupal_get_destination();
		//make sure we are getting the required parameters
		if (isset($query['fcid'])) {
			$fcid = $query['fcid'];
		} else {
			drupal_set_message(t('There was no valid tag identifier in the request. No tag has been removed.'));
			drupal_goto($destination['destination']);
			return;
		}
		if ($tag = field_collection_item_load($fcid)) {
			//the delet function removes both the fc item and the reference in the host entity
			//(so no need to update the host node)
			$tag -> delete();
			drupal_set_message(t('Removed Tag from the Story'));
			drupal_goto($destination['destination']);
		} else {
			return;

		}

	}
