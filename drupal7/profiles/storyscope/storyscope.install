<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function storyscope_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);


  //  Set the custom theme
  variable_set('theme_default', 'storyscopezen');
  theme_enable(array('storyscopezen'));

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'storyscopezen');
  $admin_theme = 'seven';
  $values = array(
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '0');

  // Set Date Values
  variable_set('date_format_long', 'l, j F, Y - H:i');
  variable_set('date_format_medium', 'j F, Y - H:i');
  variable_set('date_format_short', 'j M Y');
  variable_set('site_default_country', 'IE');
  variable_set('date_default_timezone', 'Europe/Dublin');
  variable_set('date_first_day', '1');
  variable_set('configurable_timezones', '0');

  // Disable user reg
  variable_set('user_register', '0');

  // Always show Views master display.
  variable_set('views_ui_show_master_display', '1');

  // Always show Views advanced column expanded.
  variable_set('views_ui_show_advanced_column', '1');

  // Don't show Views advanced help warning.
  variable_set('views_ui_show_advanced_help_warning', '0');

  // Always show Views sql query in preview.
  variable_set('views_ui_show_sql_query', '1');

  // Show Views sql query below the preview.
  variable_set('views_ui_show_sql_query_where', 'below');

  // Disable overlay for user 1.
  $account = user_load(1);
  $account->data['overlay'] = 0;
  user_save($account);

  // Set Pathauto patterns
  variable_set('pathauto_node_pattern', '');
  variable_set('pathauto_node_news_item_pattern', 'news/[node:title]');

  variable_set('pathauto_update_action', '0');

  // Disable auto redirects of all url aliases for a node to one alias.
  variable_set('redirect_auto_redirect', 0);
  // Enable node view panel.
  variable_set('page_manager_node_view_disabled', 0);
  // Enable node edit panel.
  variable_set('page_manager_node_edit_disabled', 0);
  // Enable field collection edit panel.
  variable_set('field_collection_field_collection_item_edit_disabled', 0);

  // Set /user as homepage
  variable_set('site_frontpage', 'front');

  // Set a date format for Timeline
  variable_set('date_format_timeline_date', 'Y,m,d');

  // Rebuild node permissions.
  node_access_rebuild();
}

/**
 * STORYSCOPE FEATURE UPDATES
 * Enable and revert the storyscope_features.
 *
*/


function storyscope_update_7023() {
  // An array of new or changed features; the array keys are feature names,
  // values are an array of exportable types as seen in a feature's .info file:
  //   features[field][] = node-page-body
  $features = array(
    'content_type_storyscope_story');
 
  // Enable the modules by name.
  module_enable($features);
  
    // Revert the features (if the feature has been changed)
  storyscope_features_revert($features);
 
  return t('Update content_type_storyscope_story');
}


function storyscope_update_7024() {
  // An array of new or changed features; the array keys are feature names,
  // values are an array of exportable types as seen in a feature's .info file:
  //   features[field][] = node-page-body
  $features = array(
    'storyscope_user');
 
  // Enable the modules by name.
  module_enable($features);
  
    // Revert the features (if the feature has been changed)
  storyscope_features_revert($features);
 
  return t('Update storyscope_user');
}


function storyscope_update_7025() {
  // An array of new or changed features; the array keys are feature names,
  // values are an array of exportable types as seen in a feature's .info file:
  //   features[field][] = node-page-body
  $features = array(
    'storyscope_front_page');
 
  // Enable the modules by name.
  module_enable($features);
  
    // Revert the features (if the feature has been changed)
  storyscope_features_revert($features);
 
  return t('Update storyscope_front_page');
}

function storyscope_update_7026() {
  // An array of new or changed features; the array keys are feature names,
  // values are an array of exportable types as seen in a feature's .info file:
  //   features[field][] = node-page-body
  $features = array(
    'content_type_storyscope_dossier', 'panels_node_dossier');
 
  // Enable the modules by name.
  module_enable($features);
  
    // Revert the features (if the feature has been changed)
  storyscope_features_revert($features);
 
  return t('Update content_type_storyscope_dossier - panels_node_dossier');
}
/**
* Revert specified features.
*
* @TODO Check that it really is Forced features revert.  Currently an exact
* copy of the function initially placed in feature_projects.install.
*
* Code mostly taken from drush.
*/
function storyscope_features_revert($modules) {
  module_load_include('inc', 'features', 'features.export');
  features_include();
  foreach (
	$modules as $module) {
    if (($feature = feature_load($module, TRUE)) && module_exists($module)) {
      $components = array();
      // Forcefully revert all components of a feature.
      foreach (array_keys($feature->info['features']) as $component) {
        if (features_hook($component, 'features_revert')) {
          $components[] = $component;
        }
      }
    }
    foreach ($components as $component) {
      features_revert(array($module => array($component)));
    }
  }
}

